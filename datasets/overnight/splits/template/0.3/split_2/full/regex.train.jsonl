{"paraphrased": "lines that complete with the word abc or the digit 123", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_841", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that stops with abc or 123", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1435", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with the word  abc  or the number  123 ", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_2952", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "which line ends with the number 123 or the word abc", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3829", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either abc or 123", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line ends with either abc or 123", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_914", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with the word  abc  or the number  123 ", "source": "line that ends with the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_1284", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "number that begins with abc or a digit", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_266", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with 123 or a digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what  word that starts with lowercase letter or digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_360", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel or a digit", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_387", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with either a vowel or a digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter or a number as its beginning", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_664", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number begins with a letter or with a digit", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_677", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter or digit", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel or digit", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_897", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number beginning with either a character or a number", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_928", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter or a digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_931", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter or digit", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_949", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with capital letter or digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1067", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that starts with a lowercase letter or digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1131", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with either lowercase letter or digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1154", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with lowercase letter or digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1179", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list numbers beginning with a vowel or a digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1437", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has either a digit or a vowel at the beginning", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1454", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter or number", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1533", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number begins with either 123 or with a digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1547", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that had a digit or a character in the beginning", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1565", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with 123 or a digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1624", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character or digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1625", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character or a digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1638", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with either a character or a digit at the beginning", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1664", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a capital letter or digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with lowercase letter or digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1724", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with any lowercase letter or a digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1861", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character or digit", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1872", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character or digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with either a lowercase letter or a digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2198", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word starts with either a number or a lowercase letter", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2516", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that starts with 123 or any other digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2602", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with either a vowel or a digit", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2693", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc or a digit", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2695", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with vowel or digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2735", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a number or a vowel in the beginning", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2751", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with either a character or a digit", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3096", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a lowercase letter or digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3306", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with vowel or digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3504", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with letter or digit", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3543", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a letter or number", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter or digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3607", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a digit or abc", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3799", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a digit or vowel", "source": "word that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3968", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with a digit or else the string abc", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3979", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a vowel or digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3987", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter or digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with either a capital letter or a digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with capital letter or digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4343", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with either a lowercase letter or a digit", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4402", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter or digit", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a number or character", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4615", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a character or digit", "source": "number that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4641", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that start with either a digit or a capital letter", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4659", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that begins with either abc or with a digit", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4890", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning either with abc or a number", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with either a lowercase letter or a digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5179", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with a character or digit at the beginning", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5331", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word thet begins with a capital letter or number", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5572", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that start with a digit or capital letters", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number begins with either a lowercase letter or a digitr", "source": "number that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5874", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a letter or digit", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5967", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with either a letter or digit", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6242", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has abc or digit at beginning", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6322", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with either a capital letter or a digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_80", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_304", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  or digit", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_386", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a number or abc as its beginning", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_511", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  or digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_517", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character or digit", "source": "word that starts with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a digit or   abc ", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_950", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with either a letter or a digit", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1045", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with one or more digits", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter or digit", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1252", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a capital letter or digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1303", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begins with a vowel or digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1340", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with the word  abc ", "source": "line that starts with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4580", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin and end with the word abc", "source": "line that starts with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5482", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts and ends with abc", "source": "line that starts with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5750", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "words that begins with a character or 123", "source": "word that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_23", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with a character or  123 ", "source": "number that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_239", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a vowel or 123", "source": "word that starts with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_326", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel or the number  123 ", "source": "word that starts with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with 123 at the beginning", "source": "number that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_443", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with either the smaller word abc or number sequence 123", "source": "word that starts with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_817", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word can start with either of these two things a lowercase letter of the number 123", "source": "word that starts with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1211", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with abc or the number 123", "source": "word that starts with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1460", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a letter or 123", "source": "word that starts with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1678", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter or the number  123 ", "source": "word that starts with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1690", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter or 123", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1693", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter or the number  123 ", "source": "word that starts with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1701", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter or number 123", "source": "word that starts with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1813", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that starts with abc or 123", "source": "word that starts with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2057", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character or the number  123 ", "source": "word that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2105", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter or the number  123 ", "source": "word that starts with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2272", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word commences weither numerals 123 or vowel", "source": "word that starts with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2314", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc or the number 123", "source": "word that starts with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2538", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins either with a vowel or 123", "source": "word that starts with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2627", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with either the number 123 or any vowel", "source": "word that starts with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2630", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that begins with 123 or a character", "source": "number that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2678", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character or the number  123 ", "source": "number that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2759", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter or the number 123", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3077", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter or the number  123 ", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter or 123", "source": "word that starts with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3490", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with either a character or the number sequence 123", "source": "number that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3618", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts 123 or with some lowercase letter", "source": "word that starts with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3682", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a character or 123", "source": "word that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3978", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  or the number  123 ", "source": "number that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4255", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a letter or the number 123", "source": "word that starts with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4324", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that starts with 123 or is 123", "source": "number that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4334", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with either a lowercase letter or with the number 123", "source": "word that starts with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4362", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with letter or the number 123", "source": "word that starts with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4414", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "find a word that begins with either a capitalized letter or the numeral 123", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4956", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character or the number  123 ", "source": "word that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5200", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter or the number  123 ", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5334", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a character or the number 123", "source": "number that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6136", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers begins with 123", "source": "number that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_75", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with character or the 123 numerals", "source": "word that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_156", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  or the number  123 ", "source": "word that starts with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_202", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that initiate with a lowerccase letter or a number line 123", "source": "word that starts with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_220", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has an uppercase letter or the digit 123 in the beginning", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_238", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  or the number  123 ", "source": "number that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_507", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with 123 or a letter", "source": "word that starts with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character or the number 123", "source": "word that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_670", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with either abc or 123", "source": "word that starts with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_722", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number starts with a character or  123 ", "source": "number that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_750", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character or  the number 123 at the beginning", "source": "word that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_825", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with either a capital letter or with the number 123", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "capital letters or 123", "source": "capital letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_211", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either vowels or 123", "source": "vowel or the number `` 123 ''", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_1438", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either 123 or 123", "source": "`` 123 '' or the number `` 123 ''", "target": "(call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_1516", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": " 123  or the number  123 ", "source": "`` 123 '' or the number `` 123 ''", "target": "(call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_1589", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either a lowercase letter or the number 123", "source": "lowercase letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_1685", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "uppercase letter or numerals 123", "source": "capital letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_1727", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either a lowercase letter or the number 123", "source": "lowercase letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_1974", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "what are all the letters plus the series 123", "source": "letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_2178", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": " abc  or the number  123 ", "source": "`` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_2242", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "vowel or the number  123 ", "source": "vowel or the number `` 123 ''", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_2458", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "the digit123 or a small letter", "source": "lowercase letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_2465", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "letter or the number  123 ", "source": "letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_2547", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "a vowel or the number segment 123", "source": "vowel or the number `` 123 ''", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_2956", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "a character or the number segment 123", "source": "character or the number `` 123 ''", "target": "(call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_3158", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "capital letter or the number  123 ", "source": "capital letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_3793", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either a capital letter or the number 123", "source": "capital letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_3994", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "line using either a vowel or 123", "source": "vowel or the number `` 123 ''", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "small letter or the numerals 123", "source": "lowercase letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4073", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "line using a character or 123", "source": "character or the number `` 123 ''", "target": "(call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4265", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "line using abc or 123", "source": "`` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4321", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "number 123 or a character", "source": "character or the number `` 123 ''", "target": "(call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4418", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "uppercase letter or digit 123", "source": "capital letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4474", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "letter or the number  123 ", "source": "letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4527", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "capital letter or the number  123 ", "source": "capital letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4624", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either letters or 123", "source": "letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4964", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "what word begins with a letter or the number   123 ", "source": "letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_5820", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "line that contains abc or the number 123", "source": "`` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_6123", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "lowercase letter or the number  123 ", "source": "lowercase letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_test_333", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "which word either contains a vowel or the number 123", "source": "vowel or the number `` 123 ''", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_test_997", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "character or he digit123", "source": "character or the number `` 123 ''", "target": "(call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_test_1190", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "something with letters or the numbers 123", "source": "letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_test_1269", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "lines that stops with abc and begins with abc", "source": "line that ends with `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_47", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and ends with a character", "source": "line that ends with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_172", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends in a capital letter and also begins with the word abc", "source": "line that ends with capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "mention the line starting with the word abc and ending with a letter", "source": "line that ends with letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_190", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and abc", "source": "line that starts with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in the beginning and 123 at the end", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_417", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with the word  abc ", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_980", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that starts with the word  abc ", "source": "line that ends with capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_983", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the word abc and ending with a vowel", "source": "line that ends with vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1318", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and ending with a vowel", "source": "line that ends with vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1728", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and ending with a letter", "source": "line that ends with letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1936", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with the word  abc ", "source": "line that ends with `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2247", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the word abc is the beginning of a line that finishes with a char", "source": "line that ends with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2589", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a letter at the end and that begins with the word abc", "source": "line that ends with letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2603", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with the word  abc ", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2654", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and ending with 123", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2789", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that starts with the word  abc ", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3249", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in the beginning and end", "source": "line that ends with `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3392", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a character and the word abc", "source": "line that starts with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3548", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with the word  abc ", "source": "line that ends with vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3677", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate in a sequence of 123 and begin with the letter sequence abc", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3753", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a capital letter and that begins with the word abc", "source": "line that ends with capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4233", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter at the end and abc in the beginning", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4344", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with the word  abc ", "source": "line that starts with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4377", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with abc and end with capital letters", "source": "line that ends with capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4380", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a lowercase letter and begins with the word abc", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4553", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with abc and ended by any lowercase letter", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4577", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with the word  abc ", "source": "line that ends with letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4610", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that starts with the word  abc ", "source": "line that ends with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "find the line that starts off with the sequence abc and then finishes with the numerical sequence 123", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5054", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines which begin with the word abc and also end with the characters abc", "source": "line that ends with `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5329", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with 123 and abc", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5353", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with the word abc and end with a vowel", "source": "line that ends with vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5501", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with abc in it that ends with a capital letter", "source": "line that ends with capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5748", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a letter and begins with the word abc", "source": "line that ends with letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_41", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and stopped with a character", "source": "line that ends with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_265", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with abc and end with vowels", "source": "line that ends with vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_385", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences and concludes wabc", "source": "line that ends with `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_485", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a lowercase letter and also begins with the word abc", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_765", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that starts with the word  abc ", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_939", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line starts with abc and ends with a character", "source": "line that ends with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1099", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "number using digits", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_39", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the number must use the characters 123 after a digit", "source": "number that contains `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have 123 before a digit", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_701", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "whats a number that has a character before a digit", "source": "number that contains character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character after digit", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1793", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  after digit", "source": "number that contains `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2466", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that has first a character then a digit within it", "source": "number that contains character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3023", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the number containing 123 before a digit", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character after digit", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3861", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains any character after a digit", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4276", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number starting with 123", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4482", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that uses 123 after any digits", "source": "number that contains `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4627", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters after digits", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4811", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with any digit followed by 123", "source": "number that contains `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5508", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using a character followed by a digit", "source": "number that contains character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5796", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 123 before digits", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit followed by 123", "source": "number that contains `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6069", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with digits followed by characters", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have a character behind a digit", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_526", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  before digit", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_577", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that contains  123  before a digit", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1093", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a character followed by a digit", "source": "number that contains character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1153", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character before digit", "source": "number that contains character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1287", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line that begins with a bowel and ends with the smaller word abc", "source": "line that ends with the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_461", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and end with the word abc", "source": "line that ends with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_478", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with the word abc and also a character", "source": "line that ends with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_711", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with abc but also begins with a character", "source": "line that ends with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_725", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and starts with a lowercase letter", "source": "line that ends with the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_793", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with character", "source": "line that ends with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1027", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with any lowercase letter thats ended by abc", "source": "line that ends with the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1098", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with an abc character", "source": "line that ends with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1156", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and ends with abc 123 respectively", "source": "line that ends with the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1172", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with the   abc ", "source": "line that ends with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1383", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and starts with a letter", "source": "line that ends with the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1417", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line terminating with the word abc and beginning with a vowel", "source": "line that ends with the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1539", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with lowercase letter", "source": "line that ends with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1604", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and end with the word abc", "source": "line that ends with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1756", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with both the word abc and a lowercase letter", "source": "line that ends with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1848", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines begin with a vowel and end with the word abc", "source": "line that ends with the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2026", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines starting with a letter but ending abc", "source": "line that ends with the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2112", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stop with abc and stops with lowercase letters", "source": "line that ends with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2438", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character and the word  abc  at its end", "source": "line that ends with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2724", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line terminates with letter and abc word", "source": "line that ends with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2860", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc as the starting and ending word", "source": "line that ends with the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2982", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with  123 ", "source": "line that ends with the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3025", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with the word abc and terminates with a letter", "source": "line that ends with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3083", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with abc and start with a lowercase character", "source": "line that ends with the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3101", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with letter", "source": "line that ends with the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3255", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a smaller word abc and begin with the number sequence 123", "source": "line that ends with the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3403", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel and ending with abc", "source": "line that ends with the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3622", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that both begins and ends with the word abc", "source": "line that ends with the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3667", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with  abc  and starts with a capital letter", "source": "line that ends with the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3941", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with lowercase letter", "source": "line that ends with the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4003", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with letter", "source": "line that ends with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4211", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with abc and begins with a vowel", "source": "line that ends with the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4260", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that stops on abc but starts off 123", "source": "line that ends with the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4638", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with character", "source": "line that ends with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4867", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with the word abc and begins with a charactee", "source": "line that ends with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5271", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with the word  abc  and ends with a letter", "source": "line that ends with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5485", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with  123 ", "source": "line that ends with the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5486", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with  abc ", "source": "line that ends with the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5533", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with capital letter", "source": "line that ends with the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5577", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and ends with  abc ", "source": "line that ends with the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5705", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "list lines that starts with a capital letter and ends with  abc ", "source": "line that ends with the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5721", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc at the end and has a small letter in the beginning", "source": "line that ends with the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5739", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with capital letter", "source": "line that ends with the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5929", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends with the word abc and starts with any letter", "source": "line that ends with the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5979", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with lowercase letter", "source": "line that ends with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_6107", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word abc and starts with the number 123", "source": "line that ends with the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with  abc ", "source": "line that ends with the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_4", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has  the word abc at the end in lowercase", "source": "line that ends with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines start with capital letters and end with abc", "source": "line that ends with the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_464", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with abc and stops with a letter", "source": "line that ends with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_599", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with the abc but starts with a letter", "source": "line that ends with the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_697", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with character", "source": "line that ends with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1183", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines where the word ends in abc and also begins with a lowercase letter", "source": "line that ends with the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1486", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "numbers that starts with the word abc or any digits", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_484", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number starting on a digit or the short series abc", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_599", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with thee word abc or a digit", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with the word  abc  or digit", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_286", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number starts with word abc or digit", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_382", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number preceded by the word abc or a digit", "source": "number that starts with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_561", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with the word  abc ", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_67", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and end with abc", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_218", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter and finishes with the word abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_672", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that is ended by abc in lowercase", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with the word  abc ", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_826", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with the word  abc ", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_854", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and has the word abc at the end", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1058", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line with 123 in it that ends with abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1761", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines with capital letters and end with abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1846", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line using a character and ending with abc", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1925", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has 123 in it and also ends in the word abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1938", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilize a character and end with the word abc", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2233", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with the word  abc ", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2236", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line with a capital letter ending with the smaller word abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2383", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what word has both a vowe and ends with the smaller word abc", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2475", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and that concludes with the word abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3121", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with abc and uses vowels in it", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3351", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with the word  abc ", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3387", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with the word  abc ", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3514", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with the word  abc ", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3592", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines ending with abc that also include letters", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3790", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a letter and ends with the smaller word abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3796", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with the word  abc ", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3842", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with the word  abc ", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3897", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a letter that finishes with the word abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and that concludes with the word abc", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4768", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel and ending with word abc", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4909", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the number 123 and ending with the word abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5018", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line includes abc and also finishes with the word abc", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5134", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line with abc in the ending plus the start or middle", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5285", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with the word  abc ", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5898", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line has a character and also ends in the word abc", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_19", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a capital letter and terminates with the word abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_82", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line contains abc and ends with the word abc", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_147", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which line has abc in it and also ends with the word abc", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_416", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line has a letter in it and also ends in the word abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a capital letter but also ends in abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_958", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops after the word abc", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1028", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a lowercase letter and that concludes with the word abc", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and stops after abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1150", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels but ends with the letters abc", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1504", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character and ending with the word segment abc", "source": "line that contains character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1557", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that have 123 and end with abc", "source": "line that contains `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1572", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what word ends with a lowercase letter or  123 ", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_34", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a capitalized final letter or the ending 123", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that is ended with any character or 123", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_197", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a letter or the number 123", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with the sequence 123 or ending with a letter", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_435", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a vowel or the number 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1007", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a character or number 123", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1123", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter or the number 123", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  or the number  123 ", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1226", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that ends in 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1240", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with either abc or 123", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1464", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with the character or number 123", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with either a lowercase letter or 123", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1939", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel or the number  123 ", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2046", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a capital letter or 123", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2277", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with 123 or 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2284", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with either a letter or 123", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with the number123 or an uppercase letter", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with either a vowel or number sequence 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2619", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2768", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter or the number  123 ", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2885", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending 123 or with abc", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3924", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a lowercase letter or the number 123", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4288", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with 123 or any capital letter", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4536", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wsmall letter or 123 numerals", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4663", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter or the number  123 ", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4813", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter or the number  123 ", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5439", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel or the number  123 ", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5560", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with a character or  123 ", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5601", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with either 123 or the number 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5719", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or the number  123 ", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5720", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes weither uppercase letter or numerals 123", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5732", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a lowercase letter or 123", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5919", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number terminating with a character or the number 123", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5926", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character or the number  123 ", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6294", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or the number  123 ", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6342", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter or the number  123 ", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_124", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with the letters abc or the numbers 123", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_190", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character or the number  123 ", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_295", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with either a letter or the number 123", "source": "word that ends with letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_373", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  or the number  123 ", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number stops on either the number", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers in either character or the number   123 ", "source": "number that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_547", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with   abc  or   123 ", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with either abc or 123", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_618", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a vowel or 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_827", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word ending in characters or 123", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that ends with either a vowel or the number 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with either a vowel or 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1319", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list words that ends with a character or the number   123 ", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1510", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a character or 123", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1588", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what line begins 123 only to end abc", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_123", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a character and also ends with the word abc", "source": "line that ends with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_205", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begind with 123 but also end with abc", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_230", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with the word abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_378", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a lowercase letter and the word abc", "source": "line that ends with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_469", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with the word  abc ", "source": "line that starts with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_588", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with the word  abc ", "source": "line that ends with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_615", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with vowels and stops with abc", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with the word  abc ", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts off with a letter and ends with the short sequence of letters abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1198", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line commences wsmall letter and concludes wabc word", "source": "line that starts with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1256", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with the word  abc ", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1415", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel and ending with abc", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1479", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a letter and also ends in the word abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1763", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which line starts with 123 and ends with abc", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1909", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a letter and the word abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1991", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the character and that terminates with the word abc", "source": "line that starts with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1995", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a letter and ends with word abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with any character and ends with the word abc", "source": "line that starts with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2364", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a capital letter and stops with abc", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2404", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line must begin and end with the characters abc", "source": "line that starts with `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2499", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a lowercase letter as well as the word abc", "source": "line that ends with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a character and end with abc", "source": "line that ends with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2835", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line with a capital start and exactly abc for the end", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3000", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with the letters abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3153", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter in the beginning and has abc at its end", "source": "line that starts with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3194", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines which end with the word abc and begin with a lowercase letter", "source": "line that starts with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3272", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a character and stops after abc", "source": "line that starts with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3492", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that ends with the word  abc ", "source": "line that starts with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3495", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which lines end lowercase abc", "source": "line that ends with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3946", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a lowercase letter and ends with the word abc", "source": "line that ends with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4052", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and finish with the word abc", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4287", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with the number   123  and ends with the word   abc ", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4390", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with a lowercase abc", "source": "line that ends with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4612", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that has a uppercase letter in the beginning and has abc as its ending word", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4861", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with the word  abc ", "source": "line that ends with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4871", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that ends with the word  abc ", "source": "line that starts with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4946", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with the number 123 but ends with the word abc", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5048", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter and that ends with the word  abc ", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5115", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with both a letter and the word abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5116", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a lowercase letter and stops with abc", "source": "line that starts with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a character and also with the word abc", "source": "line that ends with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5709", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and ending with abc", "source": "line that starts with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5729", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and that ends with the word  abc ", "source": "line that starts with `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5757", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a character and ending with abc", "source": "line that starts with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5894", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what lines start with a vowel and end with the word abc", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_6222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with any letters but ends with the word abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_6258", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel in the beginning and abc in the end", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_181", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with the word  abc ", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with vowel and that ends with the word  abc ", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_466", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with the word  abc ", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_527", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line starts and ends with the same specific sequence abc", "source": "line that starts with `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_703", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a letter and ends with   abc ", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_989", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter that finishes with thw word abc", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1148", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that ends with the word  abc ", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1179", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line begin with any letter but ends with sequence abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1242", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "either the word abc or th number 123", "source": "the word `` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "the number 123 or the word abc", "source": "the word `` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_6037", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "line ending with abc", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_41", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains vowel", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_147", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ends with abc", "source": "line that ends with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_175", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "state a line containing a vowel and ending with the word abc", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_807", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes123 and has the word abc  at the end", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_811", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with abc and also uses characters", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_936", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains capital letter", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1221", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with the word abc and includes a character", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel and stops with abc", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains  abc ", "source": "line that ends with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3095", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc and containing a capital letter", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3170", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line that ends with the word  abc  and that contains character", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3192", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains  123 ", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3599", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with the word abc and has a capital letter", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3824", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains lowercase letter", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3857", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that conclude with the word abc and include lowercase letters", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4044", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing and ending with the word abc", "source": "line that ends with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a capital letter and ending with abc", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4148", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with the smaller word abc and incorporating the number 123", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4239", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with the word abc and that contains a letter", "source": "line that ends with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4878", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains  abc ", "source": "line that ends with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4996", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with abc and utilizes a character", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5220", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains capital letter", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5425", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a smaller word abc and also have a character in them", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5606", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that ends in abc", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5795", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains vowel", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5876", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a character and ends with the word abc", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a letter within it and terminates with the word abc", "source": "line that ends with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_67", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a capital letter and end with abc", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_136", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line both ends in the word abc and also contains a vowel", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains lowercase letter", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_811", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc and containing a lowercase letter", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1059", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which stops with the word abc and has a lowercase letter in it", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1428", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has 123 and puts abc at the end", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1453", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "all lines containing letters ending with   abc ", "source": "line that ends with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1514", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains character", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1558", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a capital letter as well as the word abc", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_46", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing 123 and abc", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_763", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains the word  abc ", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_840", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with both 123 and abc in it somewhere", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_847", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains the word abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1039", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a letter and  abc ", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a letter and the smaller word abc", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1416", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains abc", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1577", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains the word  abc ", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains the word  abc ", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1841", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and abc", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2061", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing both a lowercase letter and the word abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2215", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that contains the word  abc ", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2270", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2460", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2481", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with any lowercase letter and the word abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2983", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains both a letter and the word abc", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3086", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines contains vowels and   abc ", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3457", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  123  and contains  abc ", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3634", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that contains the word  abc ", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains the word  abc ", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3955", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that contains the word  abc ", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4092", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have capital letters as well as the word abc", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4230", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have more than one occasions of abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4812", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that contains the word  abc ", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5296", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains the word  abc ", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5345", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that includes the word abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5373", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have in them a capital letter and the word abc", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5467", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and abc", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5647", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc", "source": "line that contains `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6000", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing a character and containing word abc", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6065", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that contains the word  abc ", "source": "line that contains `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6083", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and abc", "source": "line that contains letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6128", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a lowercase letter and the smaller word abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6135", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a capita letter with the word abc", "source": "line that contains capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6295", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain both a lowercase letter and the word abc", "source": "line that contains lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_344", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which contains vowel as well as the word abc", "source": "line that contains vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_551", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has the word abc and contains a character", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_645", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character as well as the smaller word abc", "source": "line that contains character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_652", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "number ending with a digit or capital letter", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_178", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character or digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_223", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter or digit", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_256", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with lowercase letter or number", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_278", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that start either abc or some number", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_313", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with either a capital letter or a digit", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_447", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a capital letter or digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_464", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a vowel or digit", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_465", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends with either a character or in a digit", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_527", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with a letter or digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_647", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number concludes wdigit or small letter", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_667", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with lowercase letter or digit", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_950", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that ends with a letter or number", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1056", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with vowel or digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1187", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a digit or chracter", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1484", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers with a digit or lowercase letter at their end", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1549", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with any character or digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1654", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with either a character or a digit at its end", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1719", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that concludes with 123 or a digit", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1952", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with 123", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with either a vowel or digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2007", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter or digit last", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2016", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter or digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2113", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter or digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2435", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with letter or number", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with vowel or digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2875", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a digit or character at the end", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2900", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with any characters or digits", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with either abc or digit", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2957", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with a capital letter or a digit", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3171", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with either a capital letter or digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3182", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words stopping with vowels or digits", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate in lower cases letters or a digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a capital letter or a digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3416", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or digit", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter or digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3459", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with either a character or with a digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3803", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that conclude with either a capital letter or a digit", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3847", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has an uppercase letter or number at its end", "source": "word that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3964", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either 123 or a digit", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word the ends with either a letter or a digit", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4020", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a lowercase letter or digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4116", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops with a vowel or digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4569", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either abc or a digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4609", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after abc or digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4806", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a number or abcat the end", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4809", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with a character or a digit", "source": "number that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5025", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with either a vowel or a digit", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5037", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with abc or digits", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5045", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a character or a digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5371", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either a lowercase letter or a digit", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5374", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with either a letter or a digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending either with abc or a number", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5458", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in either a letter or in a digit", "source": "word that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5556", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  abc  or digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5574", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that stops with a lowercase letter or digit", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5816", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with a number or a capital letter", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6058", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number than ends with either the word abc or a digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6093", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a vowel or a number", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6116", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with abc or a digit", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with a letter or a digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6257", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending either with abc or a digit", "source": "number that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6283", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with capital letter or digit", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6357", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ends with either an uppercase letter or a digit", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6381", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with 123", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_11", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or digit", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that stops either lowercase or with a digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_229", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character or digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words end with a lowercase letter or with a digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with a letter or a digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_915", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with letter or digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_975", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word stopping on a digit or a character", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1098", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a vowel or a digit", "source": "word that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1147", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in either a vowel or a digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1424", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  or digit", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1475", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either a vowel or a digit", "source": "number that ends with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1567", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using abc or a digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1076", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that includes the word abc or any digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number contains the word   abc  or a digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6361", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number hat has the word abc or a digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_810", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains the word  abc  or digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_812", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with abc or a digit in it", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1342", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words do not begin with   abc ", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_134", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not begin with the word abc", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1235", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not begin with abc", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1304", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with the word  abc ", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1540", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not begin with the word abc", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3297", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word is not begun with abc", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3381", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with the word  abc ", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3602", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not beginning with abc", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4134", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not start with abc", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4540", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not starts with abc", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5086", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that does not start with abc", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6156", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with the word  abc ", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not start with the word abc", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_525", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with the word  abc ", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_660", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with abc and a character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_35", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_44", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number ends with a characer", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_66", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter and begins with a vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_68", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a capital letter as first character and a vowel as the final character", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_71", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a character and begins with abc", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_75", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with an abc", "source": "word that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_78", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ends with a lowercase letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_94", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and with abc", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with lowercase letter", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_104", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_116", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with a vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_135", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_152", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words begin with both a character and a lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_181", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with both abc and a lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_191", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that starts with character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_200", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a lowercase letter", "source": "word that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_217", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_219", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a character and begins with a letter", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_224", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with abc and a lowercase letter", "source": "word that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_229", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a capital letter and starts with a letter", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_234", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and ending with abc", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel and end with a lowercase letter", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_238", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel and a lowercase letter", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_252", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a vowel", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_260", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and end with a character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with a characters and ends in   123 ", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_282", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a character and a vowel", "source": "word that starts with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_290", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wsmall letter and character", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_292", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with  abc ", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_310", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that end with a letter thats a vowel", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_316", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with abc and stops after a capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_333", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with  abc ", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_337", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that starts with character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_362", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a letter and also begins in a character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word needs to begin with the characters abc and end with any vowel", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_380", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any capital letter that ends with a vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_384", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with a character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_385", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with capital letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_398", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_406", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and end with a capital letter", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_410", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with abc and also ends with any letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_411", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with letter", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a letter and begins with a vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_441", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with  abc ", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_457", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with  abc ", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with lowercase vowels", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_474", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and a vowel in the beginning", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending with a letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_523", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and terminate with a vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_526", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with abc", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_557", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and end with abc", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_558", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with a lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_563", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter in the beginning and a letter at the end", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_565", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and ends with a vowel", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_566", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a small letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_569", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_582", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends and begins with a letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_592", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_607", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with abc and also ends in a character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_611", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_634", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word begins with a lowercase letter and ends with abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_666", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with abc and begins with a vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_675", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a lowercase letter and begins with a capital letter", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_678", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_679", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a capital letter and commences with a character", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_691", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with abc and doesnt end with an uppercase letter", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_694", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any letter and ends with any letter that is lowercase", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_702", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that closures with abc and that finishes with letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_703", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a lowercase letter and a vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_709", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has abc at both the beginning and the end", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_726", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any letter but starts with abc", "source": "word that starts with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_762", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending in lowercase", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and ends with a character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_783", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with lowercase letter", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_795", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a letter and vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_799", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a character and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_801", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a vowel and begins with a character", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_822", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with  abc ", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any lowercase letter", "source": "word that starts with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_844", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number ends with a character and also begins with a character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts on a vowel", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_860", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a capital letter and that concludes with a character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_870", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_880", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with vowel", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_884", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with abc and also starts with abc", "source": "word that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_887", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a lowercase letter and begin with abc", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_892", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter in the beginning and a character in the beginning", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_895", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with characters and a capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_913", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a lowercase word that starts with abc", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_918", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a  small letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_922", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that always start with capital letters", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and begins with a capital", "source": "word that starts with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and a character", "source": "word that starts with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter and ending with a vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_961", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending and starting with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_966", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with a vowel and ending with a lowercase letter", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_976", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that ends with character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_990", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1032", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1033", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops and begins with a character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1035", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a capital letter and a character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1037", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with abc and ending with a letter", "source": "word that starts with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1052", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "proper words ending with a certain character", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1055", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a capital letter and terminates with abc", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1057", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with  abc ", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1061", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1064", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a vowel and a lowercase letter", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1089", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with abc and a character", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1101", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with the number 123 and ends with a character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1112", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending with a vowel", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a lowercase letter and also ends in a vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel at the end", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1137", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word terminating with a capital letter and beginning with abc", "source": "word that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1147", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any uppercase letter but begins with any character", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1160", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that in the ending there is a character that starts with a letter", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1197", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a letter", "source": "word that ends with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1213", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate a word that begins with a capitalized letter and uses the sequence abc to finish", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1246", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with lowercase letter and finishes with abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1255", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts out lowercase and ends with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1263", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with abc", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1265", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a vowel but ends with a capital letter", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1266", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that initiate with a vowel and terminate with a letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1313", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1316", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with a lower case letter and ends with a vowel", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1330", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel ends with a character", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1344", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a character and stops with 123", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a letter and starts with any character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and ends with any letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1423", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word needs to end with a letter as its character", "source": "word that ends with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with lowercase letter", "source": "word that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1469", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins and ends with a character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1470", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with capital letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a capital letter and terminates with a vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1482", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and finish with a letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1499", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and that begins with a capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1501", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and with a character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1507", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and finsih with a lowercase letter", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1510", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begins with a character and 123", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1512", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a letter and  abc ", "source": "word that ends with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1513", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a vowel and stops with abc", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1514", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and stops after a capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1525", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with lowercase letter", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1537", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that ends with character", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1545", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after 123", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1552", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words starting with a vowel that ends with the sequence abc", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1557", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with abc but ends with a lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1558", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a capital letter and also ends in a letter", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1560", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter in the beginning and in the end", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and letter", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1578", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1597", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start and end with letters", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1599", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a lowercase letter and starts with a vowel", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1602", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and ends with a vowel", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1605", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a capital letter and starts with  abc ", "source": "word that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1621", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a capital letter and starts with a letter", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1634", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that are not fully capitalized and start with a vowel", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1644", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and finishes with a character", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1657", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with capital letter", "source": "word that starts with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1659", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and end with a lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1671", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with and ending with a letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1679", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter and finishes with a capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1689", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with 123 and characters", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1691", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the word that starts with a character and ends with abc", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1695", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter and begins with abc", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1698", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a character and also begins with a capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1710", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with abc and stops after a character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1741", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning and ending with a character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1742", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter and has a small letter at the end", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1764", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a capital letter and starts with a vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a capital letter that starts with abc", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1777", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and that concludes with a capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1796", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1798", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and also start with letters", "source": "word that starts with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1801", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a letter and  abc ", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1804", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with one character and end with another letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1807", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a character and vowel", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1830", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1840", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter but also starts with the chain abc", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1849", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1860", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stop after a character and capital letters", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1863", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and a vowel", "source": "word that starts with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1864", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with letter", "source": "word that ends with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1868", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1874", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has123 and a character in the beginning", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1879", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel in the beginning and a uppercase letter at the end", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1906", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with lowercase letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has an uppercase letter in the beginning and end", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "wordthat uses big letter in the beginningthat finishes with abc", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1941", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a character and ending with a capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1949", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with capital letters and end with lowercase letters", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1957", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting abc and ending with any character", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1972", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with  abc ", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1981", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1984", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that both start and end with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1990", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in 123 and also ends in 123", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning in lowercase and ending with a character", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2021", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and stops with abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2029", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a character and ends with a vowel", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2035", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and that begins with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2043", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with any character and ends with a lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2047", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with character", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2056", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2069", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2071", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "find the word that begins with a capitalized letter and ends with any sort of a letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2082", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a lowercase letter and also ends in a letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2084", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends in the letters abc and starts with a vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2100", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with a letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2101", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with 123", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a character and that concludes with a lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2124", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts and ends with a capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2128", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with capital letter", "source": "word that starts with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2132", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a letter and also ends in a letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2135", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with  abc  and starts with a lowercase letter", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a capital and ending with a letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2150", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and end with a letter", "source": "word that starts with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a character and begins with a capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2159", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with lowercase letters", "source": "word that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2168", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter and ends with any letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2169", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and ending with a lowercase letter", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2220", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any letter and ending with a capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2253", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2271", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with a lowercase letter but ends with a capital letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2278", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts and ends with any vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2285", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2293", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends and starts with the number 123", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2303", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that starts with  123 ", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2322", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with  abc ", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2342", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter", "source": "word that starts with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2346", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with  abc ", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and ends with a letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2348", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2349", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any letter and ends with abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2362", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter but ends with a character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and end with abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2403", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word terminating with a lowercase letter and beginning with a character", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2418", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with lowercase letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2420", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and that starts with  123 ", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2427", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2432", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any letter and ends with a lowercase letter", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words starts with a capital letter and a character", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2441", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that both begin with and end with a vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2443", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character and the wordsabc in the beginning", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has an uppercase letter in the beginning ", "source": "word that starts with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and a letter", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2457", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with capital letter", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2483", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a letter", "source": "word that ends with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2489", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a lowercase letter and begins with a vowel", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that ends with  123 ", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2524", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2525", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and begins with abc", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2536", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in the beginning and a vowel at the end of it", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2560", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and ends with a letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2588", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2594", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number both beginning and ending with 123", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with abc and a lowercaseletter", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2610", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with  abc ", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2611", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and ends with any lowercase letter", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2614", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that has a character in the beginning and 123 in the end", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2632", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with abc and beings with a vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2633", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with capital letters and vowels", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2657", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and also begin with a character", "source": "word that starts with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with abc and ending with a character", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2675", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any letter but ended with a vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a lowercase letter and begins with a capital", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2681", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with the string abc and ends with any letter", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2691", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and ends with abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2694", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and end with a lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2698", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line that begins with a e i o or u and ends with a letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2701", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a character using abc", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2706", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2720", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts and ends with a letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2739", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a vowel and begins with a lowercase letter", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2753", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ends with capital vowel", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2756", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with abc and begins with a letter", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2770", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a letter and a capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2774", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with letter", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2790", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with vowel", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2795", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character after starting on a vowel", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2797", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and stops with characters", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2801", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2808", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that starts with character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2826", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a vowel and also ends in a vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2836", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after abc and a character", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2843", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2862", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2878", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter and begins with a character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2899", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2901", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2909", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "mention a word starting with a character and ending with a lowercase letter", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2915", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word which starts with any character and vowel at the end", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2927", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with the sequence 123 that begins with any character", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter and ending with a vowel", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2938", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a number ending in 123", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2943", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a abc in lowercase", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2953", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a vowel and an uppercase letter", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2959", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter and ending with a lowercase letter", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2967", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a capital letter and also begins with a vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2980", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2996", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with letter", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3001", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and that starts with  123 ", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3020", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with a character and starts with  123 ", "source": "number that ends with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3032", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and end witha  capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3033", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3044", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with letter and that begins with abc", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3049", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3061", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3071", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins and ends with any lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3080", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3085", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a charcter and finishes with another one", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3115", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and terminates with a lowercase letter", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3128", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter but ends with capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3143", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and ending with a vowel", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3147", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a lowercase letter", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3155", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with lowercase letter", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3159", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending with a vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3163", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter and that concludes with any capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3176", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3180", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begin with a capital letter", "source": "word that starts with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3184", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with 123", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3188", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and abc", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3190", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that beings with a vowel and a capital letter", "source": "word that starts with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase but ends in a capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3196", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc and ending with a capital letter", "source": "word that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3198", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3202", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter and ending with a vowel", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3215", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and ends with any letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3218", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wsmall letter", "source": "word that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter in the beginning and an uppercase letter at the end", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc as its beginning and a character at the end", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3246", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3251", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter and stops with a character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3259", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with character", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3267", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with any letter and ends with abc", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3282", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with a character and 123", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3284", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes in a vowel", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3302", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter and ending with a letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3312", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and stops after a lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3316", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word the ends with a capital vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3328", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with  abc ", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3331", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with  abc ", "source": "word that starts with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3332", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words whose last character is a vowel", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3345", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that ends with letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3365", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any letter and ends with any vowel", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a character and that begins with a character", "source": "number that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3378", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what are words that start with vowels and characters", "source": "word that starts with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3388", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with a lowercase letter and also begin with a letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3400", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts and ends with a capital letter", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with letter", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3429", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have abc at the end and has a vowel in the beginning", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that with a character and abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3440", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a letter and starts with the letters abc", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3451", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a lowercase vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3461", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins and ends with a letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3468", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a vowel and character", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3477", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with  abc  and also starts with  abc ", "source": "word that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3485", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3494", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with character", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3497", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that terminate with a character or begin with a character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3498", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and end with a vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3512", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and end with abc", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3550", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3553", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning and ending with a character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a vowel as first character and any lowercase letter as last character", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3557", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and begins  with a letter", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3566", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word terminating with a vowel and beginning with a lowercase letter", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a capital letter and ends with abc", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word commences wuppercase letter and concludes wcharacter", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3580", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with lowercase letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3583", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3585", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that begins with a character and also begins with 123", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3589", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start and finish with vowels", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with a double letter", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3597", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word the ends with a capital", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3616", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words begin with a capital letter and end with a vowel", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3617", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number wich begins with character and ends with 123", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3641", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3648", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a small letter at the end", "source": "word that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3663", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a lowercase letter and ending with a character", "source": "word that starts with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3665", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character in the beginning and has abc  at the end", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3671", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "where wond ends with big letter that begins with small letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3686", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with abc and end with vowels", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3687", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has to begin with a letter and and with the characters abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3700", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with multiple characters", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3715", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and a character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3721", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that start with  124  and ends with  123 ", "source": "number that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3727", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a lowercase letter and ending with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3744", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a capital letter and a vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3759", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins and ends with any letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3794", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "note the word that begins with the sequence abc as well as any other vowel", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3809", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with  abc ", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3811", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with lowercase letter", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3816", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3820", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a capital vowel", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3821", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in abc and also begins in abc", "source": "word that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3822", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and abc in the beginning", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3825", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel but ending with a character", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3835", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with  abc ", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3839", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with lowercase letter", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3848", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter and begins with a capital letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3850", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with a that begins with a lowercase letter that is a letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3860", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3865", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a wide beginning with abc as well as with a character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3878", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with 123 and ends with a character", "source": "number that ends with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3930", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and stops after a vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3935", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a letter and starts with a letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3943", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with any character", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3947", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with any character but starts with a lowercase letter", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3959", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and finish with a letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3976", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a character that ends with any lowercase letter", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3984", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with vowel", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3988", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a letter and vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3993", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3999", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words begin with a lowercase letter and ends with a letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4015", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with lowercase letters and end with characters", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4021", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4024", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with lowercase letter", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4035", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and lowercase letters", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4037", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that concludes with a character and begins with a character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4069", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with abc and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel in the beginning and has a letter at the end", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4086", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with letter", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4087", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4090", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a letter and also begins with a capital letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4098", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a lowercase letter and ends with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel and ends with a capital letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4109", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel but ending with a capital letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that ends with 123 but also begins with a character", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4131", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character that finishes with a vowel", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4145", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with abc as well as with a character", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4154", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and a lowercase letter", "source": "word that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4155", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word begins with a vowel and also begins with a capital letter", "source": "word that starts with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4179", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with character", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4194", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and that concludes with a vowel", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a capital letter for an ending", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4218", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a vowel and letter", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4221", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that concludes with 123 and that concludes with 123", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4223", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a letter and also ends in a lowercase letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4234", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that starts with character", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with abc", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with abc", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4301", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that ends with  123 ", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4325", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4329", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with lowercase letter", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4332", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that both begins and ends with a lowercase letter", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and ending with a capital letter", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4361", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a letter and character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and that concludes with a lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4388", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with character", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with both abc and a character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4407", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with vowels and stops with characters", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ended by abc and begun by any character", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4438", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line with a vowel at the start and finish", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4444", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a lowercase letter and ending with abc", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4448", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a vowel and starts with a lowercase letter", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4455", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word ends in a character and also begins in a vowel", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4466", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that ends with character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4467", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter and stops with a letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4485", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with vowel", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4492", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and stops after acb", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4504", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4509", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with a capital letter at the beginning and a lowercase letter at the end", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4510", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with abc and begins with a capital", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4524", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with  abc ", "source": "word that ends with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4526", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel", "source": "word that starts with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4547", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wletter and vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4557", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel and a letter", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4560", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a character and also ends in a lowercase letter", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4575", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4585", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4593", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and a character  in the beginning", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4606", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a capital letter and begins with a vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4635", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and finish with the smaller word abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4648", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with abc and begins with a character", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4657", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with letter", "source": "word that starts with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4678", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with and ending with a vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4683", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with letter", "source": "word that starts with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4692", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with a character and begin with a lowercase letter", "source": "word that ends with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4697", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate a word that starts with any type of letter but ends with a capitalized one", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4718", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "this word needs to begin with a vowel and finish off with the letters abc", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4729", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and a letter in the beginning", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4731", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4741", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with vowel", "source": "word that ends with vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4744", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter and ending with abc", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4746", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that stops with a character and 123 together", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4782", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that starts with character and that starts with character", "source": "word that starts with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4784", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and ending with a letter", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4786", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins and ends with lowercase letters", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4798", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with character", "source": "word that starts with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4817", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a character and abc", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4821", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any letter and also the smaller word abc", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4869", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "this number needs to both begin and end with a character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4870", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a vowel and a capital letter", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4872", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word concludes wvowel", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4876", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with 123 and ending with any character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4883", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with a character and also with 123", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4885", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with both a lowercase letter and with a vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4887", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending on a capital that starts with some different caharacter", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4891", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with an uppercase letter and ended with abc", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4897", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4915", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a vowel that is begun by a lowercase letter", "source": "word that ends with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to amend", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4922", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a lowercase character", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4927", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that commences with a lowercase letter and terminates with a vowel", "source": "word that starts with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4933", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with  abc ", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4944", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with character", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4945", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter that is lowercase", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4947", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with letter", "source": "word that starts with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4960", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with with a lowercase letter and a character", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4965", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a small letter in the beginning and end", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4970", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a capital letter and ends with any letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4978", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4983", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word stops with abc", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4994", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends in a character and also ends in a letter", "source": "word that ends with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a vowel and abc in sequence", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5005", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and also begin with a vowel", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "this word ends with a capital letter", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that starts with capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5041", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with 123 and terminating with 123", "source": "number that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5058", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any character and ends with any letter", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5064", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter and end with a letter", "source": "word that ends with letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5069", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a capital letter but starts with a lowercase letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5070", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with 123", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5085", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5089", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a lowercase letter and letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5107", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel and also begin with a lowercase letter", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5111", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5117", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends in a vowel and starts with a capital letter", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any character that ends with a vowel", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5141", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that ends with  123 ", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5154", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with abc and also ends in abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begun with any lowercase letter and has a capital letter at the end", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5201", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a capital letter and begins with a vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5202", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a capital letter that is also a vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a vowel and beginning with abc", "source": "word that ends with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5219", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with any vowel", "source": "word that starts with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5226", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with the characters abc", "source": "word that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5229", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with a lowercase letter at the start and end with abc", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do have characters at both the beginning and end", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5244", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a letter that is a vowel", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a capitalized vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5299", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "whats a word ending lowercase and starting with a character", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5304", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a charatcer that finishes with a capital letter", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5308", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin and end with a lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with vowel", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that must start with 123", "source": "number that starts with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that ends with character", "source": "word that ends with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5357", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and end with a capital letter", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5376", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a letter that has a capital letter at the end", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5394", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with abc and a letter", "source": "word that starts with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a character and begins abc in sequence", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5409", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc  and a small letter at the end", "source": "word that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5421", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a lowercase letter and also begins with a vowel", "source": "word that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter in the beginning and a character at the end", "source": "word that starts with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5435", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words begins with a vowel and ends with  abc ", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5436", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5453", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with abc", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5483", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a lowercase letter and also ends in abc", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5498", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a vowel", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5500", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a letter and that concludes with a character", "source": "word that ends with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5513", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter at the end which is a vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5521", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with both a character and a capital letter", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5523", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words taht begin with a letter that is also a character", "source": "word that starts with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5544", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a letter after starting on any vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a capital letter and commences with a lowercase letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5558", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with lowercase letter and ends with capital letters", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5559", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with lowercase letter", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5575", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that ends with  123 ", "source": "number that starts with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5579", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter and that concludes with a lowercase letter", "source": "word that starts with capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with 123 as well as a character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5596", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts and ends with 123", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5608", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with a character and 123", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5609", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with any letter and ending with any lowercase letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5620", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops with a character and also 123", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5621", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with any character", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5638", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with letter", "source": "word that starts with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5682", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops and begins with a lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5683", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a lowercase vowel", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5685", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a character and ends with a letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5690", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in a capital letter and also ends in a capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5717", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finsihes with a lowercase letter and begins with a character", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5718", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a letter and a vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5746", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with any capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5766", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts and ends with  abc ", "source": "word that starts with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5768", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and that begins with a lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5773", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5780", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character and terminates with a character", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5806", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with an uppercase letter", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5808", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word starts with abc and also starts with a lowercase letter", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5810", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with lowercase letter and also it starts with a lowercase letter", "source": "word that starts with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5826", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5831", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5842", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a letter and stops after abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5844", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a capital letter and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5845", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and ending with a capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5850", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a letter and a vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number starts with a character before ending on 123", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5858", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and ends with any lowercase letter", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5867", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that starts with vowel", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5880", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and ends with any letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5895", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and stops after a lowercase letters", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5914", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with letter", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5918", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a lowercase letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5931", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number starts and ends with a character", "source": "number that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5939", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with a capital vowel", "source": "word that starts with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a lowercase letter and ends with a capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5945", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with and ending with a character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5950", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a vowel and that begins with a capital letter", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5964", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5970", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins and  ends with a character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5971", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with  abc ", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5973", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with character", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5980", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with letter", "source": "word that starts with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5989", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and terminates with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word where begins with vowel and also starts with small letter", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6008", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with letter", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a capital letter and a vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6013", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter and a character in the beginning", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6015", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a number that starts with 123 and a character", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6025", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in 123 and also ends in a character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6027", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with a capital letter and begin with one", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6028", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that both begins and ends with 123", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that starts with letter", "source": "word that starts with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6073", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with letters and abc", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6077", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with character", "source": "word that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and stops with a vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6081", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with capital letter", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6085", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with character", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6097", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with abc and begins with a vowel", "source": "word that starts with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6104", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins in a lowercase letter and also ends in a character", "source": "word that starts with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6110", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and terminate with abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with  abc ", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with  abc ", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6134", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "list down a word starting with abc and ending with a character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6147", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with character", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6159", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6167", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6171", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "only words which start with a capital letter", "source": "word that starts with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6182", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "can a lowercase letter end a word that also ends abc", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6189", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with capital letter", "source": "word that starts with lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6191", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with lowercase letters and characters", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6200", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character at the end and has abc in the beginning", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6210", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has a character at the start and abc at the end", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6224", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with abc", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning and ending with any character", "source": "word that ends with character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6244", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in the beginning and end", "source": "word that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6251", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowla and ends with a capital letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6260", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with capital letter", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6268", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with character", "source": "word that ends with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6270", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with any lowercase letter but ends with sequence abc", "source": "word that ends with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6280", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter at the end", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6289", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a letter but ends in a character", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6298", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with  abc ", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6301", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6302", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and end with a character", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6308", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character in the beginning and a small letter in the end", "source": "word that starts with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6311", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character that begins with a vowel", "source": "word that starts with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6313", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with lowercase letter", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with a letter and begin with a character", "source": "word that ends with letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6319", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a capital letter", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and ends with a capital letter", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6344", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a lowercase letter and begins with a letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any character and ends with abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6380", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and ending with a lowercase letter", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_7", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and ending with a character", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_48", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with character", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_52", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts as well as ends with vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_56", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and that starts with character", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_57", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with the word abc and ends with a lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_64", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_74", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes abc and that concludes with a letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_83", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends with a letter and also ends in a capital letter", "source": "word that ends with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_88", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_90", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has no numbers or characters that end with abc", "source": "word that ends with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_100", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that ends with character", "source": "number that ends with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that starts with letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_106", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter and stops with a vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that ends with letter", "source": "word that starts with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with  abc ", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a lowercase letter and a vowel", "source": "word that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a character and that concludes with a character", "source": "number that starts with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_134", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter and also starts with a letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_152", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and the word abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_158", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number starting with the characters 123 and ending with a character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a lowercase letter", "source": "word that ends with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_183", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a character and begins with a capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_203", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a word that ends in a lowercase vowel", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a vowel and abc", "source": "word that starts with vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_207", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number staring and ending with 123", "source": "number that ends with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_214", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with a lowercase letter", "source": "word that starts with lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_221", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that ends with  123 ", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_232", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and a letter", "source": "word that starts with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has the smaller number 123 in the beginning that also begins with a character", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_244", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with   abc  and ends with a capital letter", "source": "word that ends with capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number sequence has 123 at both the start and end", "source": "number that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_257", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that ends with character", "source": "word that starts with `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_258", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and that begins with a vowel", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_272", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a capital letter and a character", "source": "word that starts with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_274", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with a vowel and begins with a letter", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_289", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  and that starts with  123 ", "source": "number that ends with `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_294", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with letter", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc and ending with any lowercase letter", "source": "word that starts with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_326", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character and that ends with  123 ", "source": "number that ends with character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_340", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with  abc ", "source": "word that ends with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_343", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with characters and ends with letters", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_356", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning and ending with abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_358", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital and ends with a character", "source": "word that starts with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_368", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts and ends with the smaller word abc", "source": "word that starts with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_370", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with letter", "source": "word that starts with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_372", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and ending with an uppercase letter", "source": "word that starts with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_423", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins and stops with capital letters", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_424", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with abc and begins with a capital letter", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_428", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that ends with  abc ", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_433", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with letters", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_437", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter and ending with a capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_438", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a character and end with a letter", "source": "word that starts with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_458", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with any lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_467", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter and ending with abc", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_470", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with character", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_471", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that starts with a capital letter but ends with the word abc", "source": "word that starts with capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_480", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and abc", "source": "word that starts with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_490", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a lower case vowel", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_512", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with a character that begins with abc", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_513", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that ends with a character", "source": "number that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_514", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words starting out lowercase", "source": "word that starts with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_515", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has vowel at the beginning and starts with a capital letter", "source": "word that starts with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_516", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with both a character and a lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_523", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "name a word ending with a letter especially capital letter", "source": "word that ends with capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_529", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that starts with letter", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_579", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with capital letter", "source": "word that ends with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_582", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with a character and begins with 123", "source": "number that ends with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_606", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word will start with a vowel and end with a character", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_611", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a lowercase vowel", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_613", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter the beginning and a lowercase letter at the end", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_625", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with letter", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_627", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and a character", "source": "word that starts with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_632", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_633", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a vowel and a character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_635", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a vowel as first character", "source": "word that starts with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_646", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that starts with  abc ", "source": "word that ends with character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_648", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that concludes with both a lowercase letter and abc", "source": "word that ends with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_671", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_672", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words start with a letter and end with a vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_675", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that ends with vowel", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_679", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word starts with a letter and ends with a vowel", "source": "word that ends with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_692", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with an uppercase letter", "source": "word that starts with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_694", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a character and ends with  abc ", "source": "word that starts with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_715", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter and also ends with a character", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_748", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with abc and end with capital letters", "source": "word that starts with `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_759", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes and begins with a letter", "source": "word that ends with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_763", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what  word that ends with character and that starts with capital letter", "source": "word that ends with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_768", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends and starts with the word abc", "source": "word that ends with `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_777", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with letter", "source": "word that ends with capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_785", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with a vowel and ends with a character", "source": "word that ends with character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_794", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that starts with capital letter", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_819", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that ends in abc and also starts with a vowel", "source": "word that ends with `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_828", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with a letter", "source": "word that starts with letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_836", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_848", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with vowel", "source": "word that ends with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_850", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a lowercase vowel", "source": "word that ends with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_851", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a letter and that ends with a lowercase letter", "source": "word that ends with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_860", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and also ends with abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_868", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter at the beginning and the smaller word abc at the end", "source": "word that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_872", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that finishes with character and has a letter at the end", "source": "word that ends with character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_875", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with character", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_893", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter at the end and a vowel in the beginning", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_904", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with abc and a letter", "source": "word that ends with `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_906", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with vowels and conclude with lowercase letters", "source": "word that starts with vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_907", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with a character and with abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_908", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a capital letter and starts with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_920", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that ends with vowel", "source": "word that starts with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_925", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with vowel", "source": "word that ends with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_932", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with a vowel and that concludes with a character", "source": "word that ends with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_946", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that starts with letter", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_953", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with   abc  and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_969", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and a capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1003", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word both starts and ends with a lowercase letter", "source": "word that ends with lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1009", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter ending with a capital letter", "source": "word that starts with letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1013", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "name a word starting with a character and ending with a capital letter", "source": "word that starts with character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter and that ends with capital letter", "source": "word that starts with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1015", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1017", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a letter and also begins with a vowel", "source": "word that starts with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a lowercase letter", "source": "word that ends with character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1051", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a lowercase letter and end with a letter", "source": "word that ends with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1061", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with a series of capital letters", "source": "word that starts with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1091", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a capital letter and character", "source": "word that ends with capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1092", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any character and ends with any vowel", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1094", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts and ends with any capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1096", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with 123 and ends with a special character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a character and also a lowercase letter", "source": "word that starts with character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1104", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word ends with a vowel and also ends in a capital letter", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1106", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a character and with a capital letter", "source": "word that starts with character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1110", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character and terminates with a vowel", "source": "word that starts with character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1122", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with capital letter and that starts with capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1126", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with an uppercase letter and ends with any vowel", "source": "word that ends with vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1131", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with a character and ends with   123 ", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  and that starts with character", "source": "number that starts with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that ends with character", "source": "word that ends with character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1163", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with  abc ", "source": "word that starts with letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1182", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and a lowercase letter", "source": "word that starts with `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a letter and that has a lowercase letter at the end", "source": "word that starts with letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1204", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with abc and has a vowel at the end", "source": "word that starts with `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1210", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character and that starts with  123 ", "source": "number that starts with character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1215", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and a vowel at the end", "source": "word that ends with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1219", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that starts with lowercase letter", "source": "word that starts with letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that ends with  abc ", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1226", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a letter and begins with a vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1240", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and ending with abc", "source": "word that starts with vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1250", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that ends with letter", "source": "word that ends with letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with letter and that ends with vowel", "source": "word that starts with letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1265", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has 123 at the end", "source": "number that ends with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1273", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel and ends with a character", "source": "word that starts with vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1278", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a lowercase letter ending with a character", "source": "word that starts with lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1297", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with the same character it begins with", "source": "word that ends with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1345", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a capital and ending with a vowel", "source": "word that starts with capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1349", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with vowel and that starts with letter", "source": "word that starts with vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1362", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that starts and ends with a capital letter", "source": "word that ends with capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1386", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with abc and that concludes with a lowercase letter", "source": "word that ends with `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter and ending with abc", "source": "word that starts with lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1406", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with any letter but must end with a lowercase letter", "source": "word that ends with lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1408", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate the word that begins with a small letter and finishes by using a capitalized letter", "source": "word that ends with capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1409", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with any letter but ends with sequence abc", "source": "word that ends with `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1416", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with vowel", "source": "word that ends with vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1427", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a vowel and that begins with a lowercase letter", "source": "word that starts with vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1430", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number ends with 123 and starts with a a character", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1437", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that initiate with a capital letter and characters", "source": "word that starts with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1448", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with vowel and that ends with letter", "source": "word that ends with vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with character and with a letter", "source": "word that starts with character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a character and ends with   abc ", "source": "word that ends with `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1503", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that starts with vowel", "source": "word that ends with letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1516", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel at its end", "source": "word that ends with vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1528", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with the number 123 but starts with any character", "source": "number that ends with `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1536", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with the number sequence 123 and finish with a character", "source": "number that starts with `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1545", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a letter and ends with abc", "source": "word that starts with letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1556", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter", "source": "word that starts with lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1566", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a character and starts with a letter", "source": "word that starts with letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1593", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that terminate with the smaller word abc or a digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_842", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with the word abc or any digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3111", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with abc or any digit at the end", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3714", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either abc or digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that concludes with the word abc or a digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with the word  abc  or digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1351", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that not only contain the word abc but also start with the word", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2066", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc at the beginning", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2316", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with the word  abc ", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2624", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contains and starts with the word abc", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line where abc appears at both the beginning and again later", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3464", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has the word abc in it and also begins with the word abc", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with the word  abc ", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4619", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "word with a vowel at the end", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_8", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include a letter and also finish with a vowel", "source": "word that contains letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_22", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has a vowel and then a capital letter at the end", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_51", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that use a letter and end with abc", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_96", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that contains 123 which also ends with a character", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_120", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses lowercase letters and has an uppercase letter at the end", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_148", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and stops after a vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_155", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any letter and contains any letter", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_160", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and begins with a vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include a captal letter and begin with a lowercase letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with abc and contains a character", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_220", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character at the beginning that also utilizes a letter", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_226", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word comprised of a lowercase letter and ending with a vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_262", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word where contains vovel that begins with abc", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_302", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character that begins with a character", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_353", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a letter and ending with a character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_358", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_361", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_389", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in the beginning and a capital letter somewhere in it", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_403", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character and has a vowel at the end", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_414", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with vowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_444", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and stop with a letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_503", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contains the word abc but also ends with abc", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a character and starts with a capital letter", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with  abc ", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_596", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a capital letter and ending with a lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_620", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with abc that also includes a letter", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_622", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with abc in it that begins with any letter", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_623", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a letter and finish in a lowercase letter", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_626", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "mention a word starting with a lowercase letter and containing a character", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_629", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a letter and ends with a characer", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_632", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has a vowel and ends with a lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_636", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has at least a capital letter and doesnt end with a number or character", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_660", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has both a lowercase letter in it and also begins with a vowel", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_674", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and begins with abc", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_693", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with a character at the end", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_699", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word includes abc and begins with a vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_728", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with lowercase letter", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_741", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has lowercase and begins with a capital", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_742", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word has a capital letter in it and also starts with abc", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_779", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has a capital letter that is a character at the start", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_787", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_814", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters and stops with a character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_845", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which numbers start with characters", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_902", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has abc but begins with a special character", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_909", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters and begins with a capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_911", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a capital letter and ending with a letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_955", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a character and finish with a capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_967", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with lowercase letter", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_971", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains and starts with characters", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_972", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter that finishes with a capital", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_982", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses and begins with letters", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_993", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a letter and begins with a capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1003", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a lowercase letter and ends with abc", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and using abc", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1008", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a lowercase letter and uses a vowel within it", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with lowercase letter", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word contains a character that stops with abc", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1043", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words made of letters that start with a capital one", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1083", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and has letters", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1088", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with  abc ", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that contains letter and that starts with capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1148", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ending in a lowercase letter has abc in it", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and starts with a vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1209", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a vowel and finish in a lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers ending in 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and uses abc at the end", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1276", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that ends with  123 ", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1287", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes abc and terminates with a lowercase letter", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1291", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a lowercase letter at the beginning", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1297", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include a vowel and start with one", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1300", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with any character and elsewhere contains the number 123", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1340", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains a vowel and starts with a letter", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a character and begin with a capital letter", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses and begins with characters", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1374", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with lowercase letter", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1399", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a character and begin with a letter", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with a capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1422", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a character in it and also ends in a vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1442", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with at least one character and ending with a character", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1446", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a letter but does have a character somewhere else", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1449", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word contains a vowel and starts with a lowercase letter", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1465", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that both contain and end with abc", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1475", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel and using a letter", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1480", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate the word that finishes by using a vowel and that also has a capitalized letter inside of it", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1494", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1505", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include capital letters and the phase abc", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1520", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains any letter and ends with any letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1530", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that starts with character", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1550", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with capital letter", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have a character and begin with 123", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1556", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with capital letter", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1559", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with letters and uses abc at the ending", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1564", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has abc within it and also begins with the smaller word abc", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1569", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter that finishes with a lowercase letter", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with vowel", "source": "word that contains letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1582", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and begins with a lowercase letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a lowercase letter and ends with a vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1615", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with abc in it and ends with an uppercase letter", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1640", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character and has a small letter at the end", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1660", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1663", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with letter", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1670", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains  abc  and ends with a letter", "source": "word that contains `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1705", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a lowercase letter and that begins with abc", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1720", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1751", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a vowel and terminates with a character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1771", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that uses and begins with a character", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1772", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers begin with a character and contain 123", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1780", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word starting with a containing a vowel", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1799", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1805", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and contains lowercase letter", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1845", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a letter and contains a letter", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1847", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with letter", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1851", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a lowercase letter and also a capital letter", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1871", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has character in it and ends in a lowercase letter", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1883", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a lowercase letter and contains letters", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1896", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing abc and ending with a capital letter", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1901", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with a character and then 123 at the end", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1927", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses with any letter but ends with a lowercase letter", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters and begins with a character", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1954", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters and stops with 123", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1958", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a vowel and has other another vowel later", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1959", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes abc and that ends with a lowercase letter", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2012", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a vowel and uses characters", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2027", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a vowel and had a character in the beginning", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2077", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with capital letter", "source": "word that contains letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word starts with a vowel and contains a lowercase letter", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that ends with  123 ", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a lowercase letter and ending with a character", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2125", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a letter in it and also begins with a vowel", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2148", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with lowercase letter", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2153", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with lowercase letter", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2160", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with  abc ", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with  abc ", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2165", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with capital letter", "source": "word that contains capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2175", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that had an uppercase letter in the beginning and has a small letter also", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with vowel", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2199", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with abc and has a vowel preceding it", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2203", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a vowel in it that ends with any character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2210", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what begins with a character and contains a letter", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word should start and contain a capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and finishes with abc", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2305", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any letter and contains the string abc", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2310", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels and begins with a capital letter", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2323", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a vowel letter and includes a lowercase letter", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2326", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with capital letter", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2330", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with vowel", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2345", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a letter and have a vowel", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes vowels and concludes with a lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2365", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have abc and begin with a capital letter", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2407", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that contains character and that ends with capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2413", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a character to start and a capital letter somewhere in it", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2415", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a character begins with a capital letter", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word both has a character in it and also starts with a letter", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2478", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with a character and containing 123", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2480", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc at the end", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2486", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a capital letter and starts with a vowel", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2507", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with a vowel and having a capital somewhere in it", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2508", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with abc and contains a letter", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2519", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains any letter and ends with the smaller word abc", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2520", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and begins with a character", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2528", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with a character that begins with 123", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2530", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and begins with abc", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2562", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and begins with a character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning in lowercase and containing a letter", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2574", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with  abc ", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2645", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with  abc ", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2649", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes capital letter and has a character at its end", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2696", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with character", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2703", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and stops after a lowercase letter", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2707", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word starting with abc", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2737", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a letter and ending on a vowel", "source": "word that contains letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2758", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a letter and contains a vowel", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2780", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word includes character and concludes wletter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2830", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words where a vowel appears and that end with a letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2841", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has a letter somewhere in it and ends with a character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2845", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include lowercase letters and begin with a character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2855", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with  abc ", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2866", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a letter that begins with a character", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2898", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter and begins with abc", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2919", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that both contains and ends with 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2935", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2937", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a character and end with a lowercase letter", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2947", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that includes an uppercase letter and ends with the same", "source": "word that contains capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2949", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which  word that contains lowercase letter and that starts with character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2974", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with the letter a b or c and also contain a vowel", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2975", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2988", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with a lowercase letter", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3005", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains the smaller word abc and ends on a letter", "source": "word that contains `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3008", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with  abc ", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3012", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a lowercase letter and ends with a lowercase letter", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3047", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a capital letter and has a vowel in it", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3063", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a vowel as final character", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses and stops with a capital letter", "source": "word that contains capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3082", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3094", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word including uppercase letter concludes wvowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and begins with a letter", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3144", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and contains at least one lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3168", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters but starts with abc", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3189", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with abc", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with capital letter", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3234", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with a lowercase letter and any characters", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3238", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc in the beginning and includes a letter", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3298", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with letter also concludes wletter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3301", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3319", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a character starting a word that contains a capital letter", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3324", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a capital letter and ended by a lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character and has abc in the beginning", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3329", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with abc and containing capital letter", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3337", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ending with a vowel uses a lowercase letter within it", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3339", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and stops with a capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3348", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels and begins with a character", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3397", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a small letter which has a small letter at the end", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3404", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with a lowercase letter that include abc", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses any capital letters but ends with the word abc", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3425", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses the word abc but also starts with a lowercase letter", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3456", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with character", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with vowel", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3527", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with  abc ", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3549", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with character", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3555", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any character and contains any other character", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3577", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with letter", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3581", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and ends with any letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3587", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with abs and formed with vowel", "source": "word that contains vowel and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with  abc ", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3610", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3613", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that contains character and that starts with vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3631", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a vowel and ending with a vowel", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3636", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3642", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word includes character and finishes wuppercase letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3651", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with capital letters and contains   abc ", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3657", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and begins with a letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3709", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with capital letter", "source": "word that contains letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3742", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that has 123 and finishes with a character", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a lowercase letter that also has a character at the end", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3757", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 123 and begins with 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3773", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a letter and begin with a letter", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3776", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a capital letter and terminates with a lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3783", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contain the character and end with the letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3801", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a vowel and ending with a vowel", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3815", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word where a character appears and ends with abc", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and begins with a character", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3843", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and begins with a vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3846", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a capital letter and ending with abc", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3876", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with letter", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3890", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with 123", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3908", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter and using a capital letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has 123 and begins with 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3997", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains at least one capital letter and starts with a vowel", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4008", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate the word that uses a character to start besides making use of a capitalized letter", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4025", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a vowel and finish with a character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4041", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with character", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4045", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a vowel and ending with a capital letter", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4048", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a capital letter and ending with a character", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4057", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains abc and ends with a lower case letter", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4059", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing characters and ending with a vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4072", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with  abc ", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4083", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels and stops after abc", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4108", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4111", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a letter and ending with a letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4114", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4115", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a character in the beginning and includes a character", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4150", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word including a letter and terminating with a lowercase letter", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending with the characters abc and containing at least one lowercase letter", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4180", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with  abc ", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word consisting of characters with the last being a vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4216", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has the letters abc appear and finishes with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4224", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains and ends with  abc ", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that both begins with and contains a character", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a vowel", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with  abc ", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4240", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a special character and also has a vowel", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4242", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing the smaller word abc and ending with a vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4243", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and stops after a letter", "source": "word that contains `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4246", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a lowercase letter in it and also ends in a letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and begins with abc", "source": "word that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4263", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starting with a vowel that also has lowercase in it", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4274", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what cord contains a capital and begins with a lowercase letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character and has a character at the end", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4282", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word has abc in it and also begins with a letter", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4313", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses abc and begins with a capital letter", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4367", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that starts with character", "source": "number that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a vowel to start then a character later", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4400", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains any character and also ends with the number 123", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4410", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a small letter and has a letter at the end", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4437", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a character and contains lowercase letters", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word using a character and ending with any letter", "source": "word that contains character and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4470", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending with a vowel and also including abc", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4477", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  and that starts with  123 ", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4502", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a vowel and end with a capital letter", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4543", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a capital letter and ending with a vowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4573", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with capital letter", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4706", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with character", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4726", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number has 123 in it and also begins with a character", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4730", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with lowercase letter", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include a character and begin with a letter", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4750", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a lowercase letter and beginning with a capital letter", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and stops after a vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4771", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words where abc appears and end with a vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4778", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that starts with a letter and has capital letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have an abc and end with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4829", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with vowel", "source": "word that contains `` abc '' and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4847", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line beginning with a capital letter and using a character", "source": "word that contains character and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4855", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a lowercase letter and contains abc", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4894", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that both contains and ends with a character", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4928", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 123 and begins with a character", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4934", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a capital letter and has a letter in the beginning", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4940", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a vowel and ending with abc", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word starts with lowercase letters", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4943", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a vowel and ends with a capital letter", "source": "word that contains vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4980", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a vowel and containing a capital letter", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with lowercase letter", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5044", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with capital letter", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5055", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with a capital letter ended by any letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5066", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with letter", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5077", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with 123 and using a character", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5083", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending in a lowercase letter but also containing a capital letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5106", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that include a character and begin with 123", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has abc in it and also ends in a capital letter", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5171", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a vowel and has a character at the end", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5176", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a lowercase letter and that commences with a character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5184", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with and also contains a lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5189", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have 123 and end with a character", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5195", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes abc and also begins with abc", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5196", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and ends with a capital letter", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5210", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel and begins with a lowercase letter", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a vowel and has a small letter at the end", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5214", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what contains lowercase letters ending in a capital letter", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5221", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels and stops after a character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with capital letter", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5238", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with at least one letter in lowercase", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5257", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a lowercase letter and begin with a lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5258", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5284", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include the phase abc and start with a character", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any words containing lowercase and ends with a capital", "source": "word that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5324", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have abc and end with a vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5326", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that starts with  abc ", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that includes 123 in it and comes to an end with a character", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5328", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that has abc within it and terminates with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5338", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number includes 123 and concludes wcharacter", "source": "number that contains `` 123 '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5339", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5359", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses capital letters and stops with a vowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5367", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "where a word includes a letter that finishes with big letter", "source": "word that contains letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5416", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel in the beginning and includes a capital letter", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5445", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and begins with abc", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5451", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and a character at the end", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5507", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with character", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5524", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses and starts with a vowels", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5535", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that both starts with and utilizes 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5538", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a lowercase letter and finishes with a vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with a character and including a vowel", "source": "word that contains vowel and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5570", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has a lowercase letter somewhere and specifically ends with one", "source": "word that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5594", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a lowercase letter and also ends with the same letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5622", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a letter and ending with abc", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5637", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a lowercase letter and contains lowercase letters", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5680", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5713", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses and starts with a capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5730", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  and that starts with character", "source": "number that contains `` 123 '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5738", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing and ending with a character", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5747", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a lowercase letter that begins with any character", "source": "word that contains lowercase letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5764", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with character", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit  that includes a character and ends with it", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5782", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with lowercase letter and using a vowel", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5789", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains character and that ends with capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5807", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with a capital letter and also a character at the end", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and stops after abc", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5871", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that had a small letter in the beginning and includes a letter", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5904", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a letter in it and also ends in a letter", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5913", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a vowel and is more than one letter long", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5938", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and begins with a vowel", "source": "word that contains lowercase letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5968", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with vowel", "source": "word that contains lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5974", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with character", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5988", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with lowercase letter", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6049", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a character and beginning with a vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6064", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word starting with abc that contains abc", "source": "word that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6070", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with multiple letters ending with a vowel", "source": "word that contains letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6076", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that begins with a capital letter and has a vowel", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6084", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with vowel", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6086", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with  abc ", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6112", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a vowel at the beginning that utilizes a capital letter", "source": "word that contains capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6132", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has 123 and begins with 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6148", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with and containing a capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6164", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that ends with character", "source": "word that contains letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6173", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words contain a lowercase letter and end with a character", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6203", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any uppercase letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with character", "source": "word that contains letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6233", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with  abc ", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that include characters and conclude with the number line 123", "source": "number that contains character and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6299", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc at the end and uses characters", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6337", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has abc and finishes with a letter", "source": "word that contains `` abc '' and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes abc and begins with a letter", "source": "word that contains `` abc '' and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has both a lowercase letter and a letter at the beginning", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_8", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with vowel", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_21", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that start with letters and have vowels as well", "source": "word that contains vowel and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_37", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number containing 123 and also ending with 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_51", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a vowel and ends with  abc ", "source": "word that contains vowel and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_70", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with letter", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_142", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a capital letter and contains abc", "source": "word that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_149", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have abc and start with lowercase letters", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_150", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with capital letter", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_196", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word contains a capital letter that also starts with a lowercase letter", "source": "word that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_213", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a vowel and that starts with a vowel", "source": "word that contains vowel and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_222", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  and that ends with  123 ", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_261", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a letter and using a character", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_271", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a character and has a capital letter", "source": "word that contains capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_279", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with and including the sequence 123", "source": "number that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_280", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with abc and have a letter", "source": "word that contains letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_285", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that contains vowel and that ends with letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_299", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a capital letter and contains at least one letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_307", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number begins with 123 and contains a character", "source": "number that contains character and that starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_387", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing abc and ending with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_399", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with abc at the beginning and a character in it", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_441", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a lowercase letter and ending with a character", "source": "word that contains lowercase letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_472", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses vowels but ends with a letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_492", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with vowel", "source": "word that contains `` abc '' and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_499", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has the smaller word abc in the beginning that also utilizes a character", "source": "word that contains character and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_532", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a capital letter and contains vowels", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_538", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number containing a character and ending with a character", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_548", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word has a lowercase letter in it and also begins with a lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_559", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that starts with capital letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_566", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a capital letter in it and also begins in a letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with vowels that end with lowercase letters", "source": "word that contains vowel and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_576", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word beginning with a letter and containing lowercase letters", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_587", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that starts with lowercase letter", "source": "word that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_593", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a letter and that concludes with abc", "source": "word that contains letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_661", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a character and ending with abc", "source": "word that contains character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_668", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a vowel in it and also begins with a capital letter", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_683", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains lowercase letters and ends with   abc ", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_723", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word both includes and concludes with small letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_725", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a capital letter also has a lowercase letter", "source": "word that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_751", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that ends with character", "source": "word that contains vowel and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a capital and ending with abc", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_771", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilize a character and begin with a vowel", "source": "word that contains character and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_846", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with and includes a character", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_854", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that ends with  abc ", "source": "word that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_858", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words beginning with a capital and containing the set abc", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_871", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has a character in it and also begins with a lowercase letter", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_882", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital and starts with a letter", "source": "word that contains capital letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_886", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilize a lowercase letter within them and end with abc", "source": "word that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_899", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a letter and starts with a capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_902", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a vowel and contains letters", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_930", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters but stops with a letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_952", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has a capital letter in it and also ends with a capital letter", "source": "word that contains capital letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_990", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that ends with character", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contain vowels and end with vowels", "source": "word that contains vowel and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1023", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes an uppercase letter and has abc at the end", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1039", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter and that ends with vowel", "source": "word that contains capital letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1046", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses characters and stops with a lowercase letter", "source": "word that contains character and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1085", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include letters and end with a capital one", "source": "word that contains letter and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1086", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that starts with letter", "source": "word that contains letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilize any characters and ends with a vowel", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has a lower case letter and ends with any letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1140", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that ends with letter", "source": "word that contains lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1196", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains a letter that begins with a lowercase letter", "source": "word that contains letter and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1209", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains  abc  and that starts with lowercase letter", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1220", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a character and terminates with a capital letter", "source": "word that contains character and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with vowels that begins with a lowercase letter", "source": "word that contains vowel and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a cahracter and begins with one", "source": "word that contains character and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes a capital letter and that terminates with a character", "source": "word that contains capital letter and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1308", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and stops with a lowercase letter", "source": "word that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1330", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word has both a lowercase letter and starts with the letter ", "source": "word that contains lowercase letter and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1336", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with both a character and a lowercase letter somewhere in them", "source": "word that contains character and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1359", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words have a vowel and a letter at the end", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1387", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters and begins with a vowel", "source": "word that contains letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1394", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that starts with capital letter", "source": "word that contains vowel and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1401", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word contains a character that ends with another character", "source": "word that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1405", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains  abc  and starts with a capital letter", "source": "word that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that contains a character and also ends with one", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1443", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with the same letter also found before the end", "source": "word that contains letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1444", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a character in the beginning and includes abc in it", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1455", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with lowercase letters", "source": "word that contains letter and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1467", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes abc and begins with a lowercase letter", "source": "word that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1498", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing the smaller word abc and ending with a lowercase letter", "source": "word that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1547", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using 123 and ending with 123", "source": "number that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1553", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word containing a vowel and ending with a letter", "source": "word that contains vowel and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1591", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin and end with the same letter", "source": "word that contains capital letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1592", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has abc in it and ends with a character", "source": "word that contains `` abc '' and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1595", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending without abc", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1488", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not end with abc", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1548", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not stop with abc", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1996", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with the word  abc ", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2401", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not stop after abc", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3138", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with the word  abc ", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not end with the word abc", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4181", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with the word  abc ", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5641", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with the word  abc ", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5992", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number where the word abc does not appear", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1412", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line that starts with  abc  or a digit", "source": "line that starts with the word `` abc '' or digit", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1196", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begins with the word abc or a digit", "source": "line that starts with the word `` abc '' or digit", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4348", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that start with either the word abc or a digit", "source": "line that starts with the word `` abc '' or digit", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_409", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  after the number  123 ", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_285", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that initiate with a smaller word abc before the number sequence 123", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_669", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  before the number  123 ", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_777", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts 123 followed by the word abc", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_792", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "123 shall be after abc at the beginning of the line", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3411", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line begins with 123 and then abc", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3911", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  after the number  123 ", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4113", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "is there a line starting with abc that immediately continues 123", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4136", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses the word abc after the number 123", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4528", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has 123 after the starting word abc", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5839", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line where the word abc appears before the number 123", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_766", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "the number 123 followed by a character", "source": "character after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .)))", "qid": "regex_train_1", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what is the vowel that follows  123 ", "source": "vowel after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_163", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "small abc formed before digit in word", "source": "the word `` abc '' before digit", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_480", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "put abc after the number 123", "source": "`` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc)))", "qid": "regex_train_808", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "list all lines with   abc  appearing after   123 ", "source": "`` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc)))", "qid": "regex_train_867", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " 123  after the number  123 ", "source": "`` 123 '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123)))", "qid": "regex_train_932", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "abc followed by a digit", "source": "the word `` abc '' before digit", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1305", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a letter that appears after the digit 123", "source": "letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_1323", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "vowel after the number  123 ", "source": "vowel after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_1397", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the digit 123 before an uppercase letter", "source": "capital letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_1408", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " 123  after the number  123 ", "source": "`` 123 '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123)))", "qid": "regex_train_1429", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what is a word where a character comes after the number 123", "source": "character after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .)))", "qid": "regex_train_1586", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "just before digit there is the word abc", "source": "the word `` abc '' before digit", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1746", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the word  abc  before digit", "source": "the word `` abc '' before digit", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1950", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "letters that come after 123", "source": "letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_2031", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter after the number  123 ", "source": "lowercase letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_2145", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the digits 123 after the digit 123", "source": "`` 123 '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123)))", "qid": "regex_train_2289", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what lowercase letter follows 123", "source": "lowercase letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_2639", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "character after the number  123 ", "source": "character after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .)))", "qid": "regex_train_2948", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the number 123 followed by a lowercase letter", "source": "lowercase letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_2971", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letters after 123", "source": "capital letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_3160", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "vowel after the number  123 ", "source": "vowel after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_3338", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what letters appear after   123 ", "source": "letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_3623", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "word that contains a vowel after the number 123", "source": "vowel after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_3788", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " abc  after the number  123 ", "source": "`` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc)))", "qid": "regex_train_4078", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a word with abc before a number", "source": "the word `` abc '' before digit", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4262", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "after 123 include a capital letter", "source": "capital letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_4359", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "123 coming before a single capital letter", "source": "capital letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_4381", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a letter following the number 123", "source": "letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_4882", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a lowercase letter followed by the number 123", "source": "lowercase letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_4972", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what word is it where 123 comes after the number 123", "source": "`` 123 '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123)))", "qid": "regex_train_5159", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter that comes after 123", "source": "lowercase letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_5305", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the number 123 followed by a vowel", "source": "vowel after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_5401", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "letter after the number  123 ", "source": "letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_5678", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the word  abc  before digit", "source": "the word `` abc '' before digit", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_6034", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " 123  after the number  123 ", "source": "`` 123 '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123)))", "qid": "regex_train_6100", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "line with 123 followed by a character", "source": "character after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .)))", "qid": "regex_test_283", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " abc  after the number  123 ", "source": "`` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc)))", "qid": "regex_test_1074", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the digit 123 before the vowel", "source": "vowel after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_test_1511", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lines that starts with a vowel before a digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_17", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a number followed by abc", "source": "line that starts with `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_293", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel after digit", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_322", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a digit followed by any character", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_368", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a character is is after a digit", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_394", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with any character followed by a digit", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_420", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a vowel then contains a digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_429", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a digit followed by 123", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_504", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with character after digit", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_510", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that initiate with a character directly after a digit", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_528", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with a digit then a lowercase letter", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_646", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with a character followed by a number", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_651", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with a digit followed by a character", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_659", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a digit followed by a capital letter", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_756", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with 123 after a number", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_804", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line starts with a capital letter before digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_851", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a vowel following a digit", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_1000", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with 123 after a digit", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1166", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a digit and then a letter", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1377", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a lowercase letter after a digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_1553", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a lowercase letter followed by a digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1666", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with the number 123 prior to another digit", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1674", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a digit followed by a letter", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1683", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line thet begins with 123 after a digit", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1712", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a digit followed by a capital letter", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_1850", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a letter that is before a digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2036", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  before digit", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2080", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel before digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2209", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a digit preceded by abc", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2221", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with 123 before the digit", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2239", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a digit followed by 123", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_2412", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a number after an uppercase letter", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_2425", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with a digit that is followed by a vowel", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_2467", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  after digit", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_2563", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel before digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2783", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter before digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2847", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with 123 before any digits", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2945", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  before digit", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2963", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a character followed by a digit", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3048", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter after digit", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3068", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with a lowercase letter after a digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_3090", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with capital letters after certain digits", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_3150", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter before digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3209", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with abc followed by a digit", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3300", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter before digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3313", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with abc followed by a digit", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3408", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a vowel before any digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3465", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter after digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_3483", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with character before digit", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3539", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a lowercase letter and a digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3598", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with letters after digits", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3795", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is a line that begins with a letter that comes before a digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4023", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a vowel and then a digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4124", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a lowercase letter after digits", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_4311", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a character followed by a digit", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4453", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter after digit", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_4486", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with a capital letter before a digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4550", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a vowel that follows a digit", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_4556", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a lowercase letter in front of a digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4728", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  after digit", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_4752", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with a digit following after a lowercase letter of some sort", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4904", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that had a vowel in the beginning before a number", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4941", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter before digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4973", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "before digit line starts with 123", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5153", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a letter and then a digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5172", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line starts with a letter that follows a number", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_5198", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a letter followed by a digit", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5262", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a capital letter after a digit", "source": "line that starts with capital letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5387", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line that starts with lowercase letter after digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_5649", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has abc in the beginning after a number", "source": "line that starts with `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5948", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter before digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5957", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is a line that begins with a letter that comes after a digit", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_6066", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a capital letter before a digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_6220", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a lowercase letter before digits", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_6348", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a digit and then a vowel", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_14", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with  123  before a digit", "source": "line that starts with `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_test_35", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with characters before digits", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_361", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines with a digit followed by a lowercase letter at the beginning", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_test_403", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with abc before other digits", "source": "line that starts with `` abc '' before digit", "target": "(call + (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_602", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with as alphabet before a number", "source": "line that starts with letter before digit", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_721", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line begins with a charcter appearing after a digit", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_test_762", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a capital letter followed by a digit", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1047", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter after digit", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_test_1062", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line starts with 123 followed by some other digit", "source": "line that starts with `` 123 '' before digit", "target": "(call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1185", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line starts with a vowel that comes after a digit", "source": "line that starts with vowel after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_1337", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a capital letter before any digits", "source": "line that starts with capital letter before digit", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1589", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "number without abc", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_19", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not containing any lowercase letters", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_91", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not contain a lowercase letter", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_114", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that not contains  abc ", "source": "word that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not contain a vowel", "source": "number that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_253", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number without abc in it", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_300", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains  abc ", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not include 123", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_328", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not contain a vowel", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_506", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not use 123", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_584", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not contain the smaller word abc", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_750", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not include 123", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_876", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not have abc", "source": "word that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not using capital letters", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1184", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not include abc", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not have vowels", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1315", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not have a vowel within it", "source": "number that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1349", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not use letters", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1629", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not include an uppercase letter", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1787", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not include a capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1897", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not contains capital letter", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2002", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has no capitals", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2039", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not contain 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2170", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not using abc", "source": "word that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2216", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "are there numbers that dont have any lowercase letters", "source": "number that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2311", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not contain letters", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with only uppercase", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2863", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not contain  123 ", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2904", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not contains lowercase letter", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2925", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not contain the numbers 1 2 or 3 or the symbol ", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2991", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that excludes the series 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3002", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number without a single capital letter in it", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3139", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not use 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3233", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that only contains consonants", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3702", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains letter", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that not contains  123 ", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3954", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "should be a number do not include any lowercase letters", "source": "number that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not utilize a lowercase letter", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers do not contain letters", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4249", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains  123 ", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4371", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not have a vowel", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains  123 ", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4558", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not have abc in it", "source": "word that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4561", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not include a capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4774", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words lacking capitals", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4901", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that does not have abc in it", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5473", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number without a vowel in it", "source": "number that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5645", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not have a lowercase letter", "source": "number that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5744", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number without 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5814", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not using a vowel", "source": "word that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5835", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not have a capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5956", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not contain a lowercase letter", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6366", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not have 123", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_26", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not contains  123 ", "source": "word that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_442", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not use capital letters", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_455", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not have a letter", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_903", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word without capital letters", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1054", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not have a vowel", "source": "number that not contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using either abc or digit", "source": "the word `` abc '' or digit", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3507", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "a line commencing with the word abc and including a character", "source": "line that starts with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_60", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with the word abc and has a lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_280", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc in addition to at least another letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_335", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_416", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the smaller word abc and containing a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_462", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc which contains a lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_485", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with lower case abc and numbers", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_612", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains  123 ", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_866", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that initiate with the smaller word abc and vowels", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_957", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc at the beginning and a vowel in it", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1016", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and has a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1227", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and includes a lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1311", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line begins with the word abc and also has a character in it", "source": "line that starts with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1401", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a smaller word abc and include other letters", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1448", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with the word  abc  and contains  123 ", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2329", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with  abc ", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2373", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "list lines that begins with   abc  and contains characters", "source": "line that starts with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2391", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and includes abc", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3117", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line that starts with the word  abc  and that contains  123 ", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3355", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains 123 and starts with the word abc", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3521", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starts with the characters abc and has more characters in it", "source": "line that starts with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3558", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc but uses 123", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3678", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and have a vowel", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3730", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4396", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains vowel", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4570", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and contains a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5256", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the chain abc and also contains the digits 123", "source": "line that starts with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5352", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with abc and has a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5490", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5627", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6383", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that both begins with the word abc and also has abc in it", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_118", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with a vowel plus the short word abc at the beginning", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_537", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains  abc ", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_544", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc that also has a lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_895", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with abc and contains any other letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_941", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and have a letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_993", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1071", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a vowel that starts with abc", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1530", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with abc and uses abc", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3502", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line stops with abc after having abc earlier in the word", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains the word  abc ", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4552", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with the word abc and has the word abc", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4827", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends with the word abc and also has the word abc in it", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5694", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate with the letter sequence abc and include abc", "source": "line that ends with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that does not contain abcv", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_56", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not contain the smaller word abc", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_3731", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line without the word abc", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_3881", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that does not have the word abc in it", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_4085", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line without abc in it", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_test_109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains the word  abc ", "source": "line that not contains the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_test_1500", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "the word  abc  before the number  123 ", "source": "the word `` abc '' before the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_687", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word  abc  after the number  123 ", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1073", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word  abc  after the number  123 ", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1116", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word abc preceding the number 123", "source": "the word `` abc '' before the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1947", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the digit 123 before the word abc", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2492", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "lines where 123 appears after abc", "source": "the word `` abc '' before the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2692", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word abc followed by the number 123", "source": "the word `` abc '' before the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_3185", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "what is a line where the word abc comes after the number 123", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_4505", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "line using 123 followed by abc", "source": "the word `` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_192", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "word that uses a lowercase letter before the number 123", "source": "lowercase letter before the number `` 123 ''", "target": "(call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_376", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "line using a lowercase letter followed by 123", "source": "lowercase letter before the number `` 123 ''", "target": "(call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_486", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": " abc  before the number  123 ", "source": "`` abc '' before the number `` 123 ''", "target": "(call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_848", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a letter followed by the number 123", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1048", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "uppercase letter precedes the numerals 123", "source": "capital letter before the number `` 123 ''", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1078", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "where the number 123 has a vowel before itself", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1111", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "character before the number  123 ", "source": "character before the number `` 123 ''", "target": "(call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1292", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "word using a digit followed by abc", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1517", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "vowel before the number  123 ", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1854", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "lowercase letter before the number  123 ", "source": "lowercase letter before the number `` 123 ''", "target": "(call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1881", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "123 preceded by a capital letter", "source": "capital letter before the number `` 123 ''", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2274", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "abc in fromt of 123", "source": "`` abc '' before the number `` 123 ''", "target": "(call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2360", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "123 preceded by any lowercase letter", "source": "lowercase letter before the number `` 123 ''", "target": "(call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2716", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "abc the word comes after a digit", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2840", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "abc comes before 123", "source": "`` abc '' before the number `` 123 ''", "target": "(call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2954", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "vowel before the number  123 ", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_3343", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "character before the number  123 ", "source": "character before the number `` 123 ''", "target": "(call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_3716", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "word or line with any character before the number 123", "source": "character before the number `` 123 ''", "target": "(call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_3958", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "capital letter before the number  123 ", "source": "capital letter before the number `` 123 ''", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_4498", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "locate the line that incorporates a vowel followed by the numeral 123", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_4698", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "letter before the number  123 ", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_5017", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a letter preceding the number 123", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_5240", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "abc followed by 123", "source": "`` abc '' before the number `` 123 ''", "target": "(call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_5516", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word  abc  after digit", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_5727", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "any vowel followed by 123", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_5763", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a letter followed by number 123", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_5952", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "capital letter in front of 123", "source": "capital letter before the number `` 123 ''", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_6197", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "digit followed by the word abc", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_89", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": " 123  before  123 ", "source": "`` 123 '' before the number `` 123 ''", "target": "(call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_176", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a lowercase letter that comes in front of the number 123", "source": "lowercase letter before the number `` 123 ''", "target": "(call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_200", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "letter before the number  123 ", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_298", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "123 with a letter before it", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_337", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "uses a vowel before the number 123", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_364", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the number123 after an uppercase letter", "source": "capital letter before the number `` 123 ''", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_558", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "digit followed by abc", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_617", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "character preceding 123", "source": "character before the number `` 123 ''", "target": "(call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_650", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the number 123 preceded by a vowel", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_1100", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the number 123 preceded by abc", "source": "`` abc '' before the number `` 123 ''", "target": "(call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_1105", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a digit followed by the word abc", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_1145", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the digit 123 after the number 123", "source": "`` 123 '' before the number `` 123 ''", "target": "(call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_1371", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "line that contains the word  abc  and that ends with the word  abc ", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1953", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that have the smaller word abc and finish with the word abc", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2377", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses and ends with the word abc", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2687", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with the word  abc ", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2822", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which line contains abc and and also ends with abc", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_335", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains either a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_36", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include lowercase letters or the number sequence 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1028", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line including a lowercase letter or the number 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1106", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line has a character or 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1210", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes 123 or the number 123", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1492", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  123  or the number  123 ", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line contains a vowel or the number   123 ", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1673", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line using either a character of 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1946", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains vowel or the number  123 ", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_2224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line contains 123", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_2229", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel or 123", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3006", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  or the number  123 ", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3482", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains the number 123", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4101", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what is a line that contains the number 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4112", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that uses with either letter or number 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4213", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that has either letters or the numeric sequence 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4415", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes a character or the number 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4439", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that utilizes either a vowel or the number 123", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4807", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a vowel or the number 123 on a single line", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4810", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what  line that contains letter or the number  123 ", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5008", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that uses characters or 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5029", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line using the either the character or number 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5038", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what is a line that has a capital letter or the number 123 in it", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5487", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  or the number  123 ", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5771", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that has a lowercase letter or 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_6122", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that has a vowel or 123 in it", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_6360", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains either a letter or the number 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_159", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have letters and the number 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_236", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains character or the number  123 ", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_545", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that contains  abc  or  123 ", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_830", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that has either a capital letter or the number 123 within it", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_933", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include the characters abc or include the number 123", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1123", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains either a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1141", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains character or the number  123 ", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1164", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines tha have either abc or 123 within", "source": "line that contains `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1357", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines with lowercase letters or 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1398", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that includes within it either the sequence 123 or a letter", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1549", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "word that not contains the word  abc ", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_415", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number not using abc", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_475", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that exclude the series abc", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that doesnt have the letters abc in it", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_770", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not contain the smaller word abc", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not include the word abc", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2038", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word without abc in it", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3802", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains the word  abc ", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4067", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not use abc", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4373", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains the word  abc ", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4630", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a character after digits", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_87", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a character in the beginning before a digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1192", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with a digit followed by 123", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1334", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that starts with any character before a digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  after digit", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1945", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with 123 and then a digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2163", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with 123 before a digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2568", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  after digit", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2718", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with 123 preceded by a digit", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2891", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character before digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a digit followed by a character", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3154", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a character followed by a digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3354", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number commences wdigit then character", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3453", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that start with digits and then 123 after", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3517", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers begin with 123 followed by a digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4126", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character before digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4375", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses the number 123 after any digit", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4472", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number than starts with 123 before any other digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4877", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  before digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5600", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with 123 followed by any digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6271", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers with a digit followed by 123 at the beginning", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_66", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with a character followed by digits", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1087", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character after digit", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1229", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "something with letters or digits in it", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_427", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "a letter or perhaps a digit", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_1060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "selection of digit or vowel", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_1584", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "letter or number", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "small letter or number", "source": "lowercase letter or digit", "target": "(call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2068", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "a letter thats capital or a number", "source": "capital letter or digit", "target": "(call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2070", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "what word contains either 123 or digit", "source": "`` 123 '' or digit", "target": "(call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2567", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "vowel or number", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3216", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "any vowel or digit", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3448", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either a vowel or a digit", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3747", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either a character or a digit", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "find a line that has in it either the abc sequence or a numeral", "source": "`` abc '' or digit", "target": "(call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_4341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "uppercase letter or number", "source": "capital letter or digit", "target": "(call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_4578", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either 123 or a digit", "source": "`` 123 '' or digit", "target": "(call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_5151", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "list all characters or digits", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_5177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "line using a character or a digit", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_5960", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "123 or any other number", "source": "`` 123 '' or digit", "target": "(call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_6142", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "lowercase letter or digit", "source": "lowercase letter or digit", "target": "(call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_241", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either a capital letter or a digit", "source": "capital letter or digit", "target": "(call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_410", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "contains either the word abc or a digit", "source": "`` abc '' or digit", "target": "(call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_605", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "character or digit", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_1079", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "choice between digit or character", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_1559", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "any line with either the word abc or a digit in it", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3361", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  or digit", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3813", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that uses abc or digits", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5423", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines with abc or other digits", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5786", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line includes digit or abc word", "source": "line that contains the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_944", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that uses lowercase letters and ends with it too", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character that finishes with a lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_25", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and includes a vowel", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_30", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with  123 ", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_37", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilize a lowercase letter and end with 123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_80", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with  123 ", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_84", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with  123 ", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_122", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with  123 ", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_125", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and stops with abc", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_128", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wvowel has abc", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_131", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines starting with a vowel that then have another letter", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_133", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the word phase abc and end with a lowercase letter", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_137", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter and begins with a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_142", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and end with the smaller word abc", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_150", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with capital letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_168", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with  123  and contains vowels", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_179", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that comes to an end with a vowel and includes abc in it", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with character", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_244", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has capital letters and ends with vowels", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_259", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "list lines containing and ending with lowercase letters", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_265", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with  abc ", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_311", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a letter and using a capital letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_315", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with character", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_357", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_359", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has 123 in it and also begins with a lowercase letter", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_382", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a vowel and ends with a vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_383", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with  abc ", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_413", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with lowercase letter", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_423", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line uses a lowercase letter and begins with a vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_425", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line which ends with 123 and has abc in it", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_437", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have 123 but also ends with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel at the end and includes 123 in it", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_455", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines  that have a lowercase letter and begin with abc", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_458", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with vowels but also have characters", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_494", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_495", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both contains and ends with a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_496", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with vowel", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_499", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have lowercase letters and start out abc", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_500", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and has abc in the beginning", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_521", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses any character but ends with a letter", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_537", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include letters and terminate with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_539", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character and ending with a vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_555", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with capital letters and contains characters", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_561", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel in the beginning", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_579", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with lowercase letter", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_583", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilize a vowel and end with a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_589", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have characters and a letter at the beginning", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_593", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line uses abc and ends with a letter", "source": "line that contains `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_594", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a character and uses letters", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_631", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with vowel", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_638", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a character and begins with 123", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_642", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and stops after a letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_650", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes character and that starts with a lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_671", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with 123 and contains lowercase letters", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_682", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the sequence 123 and including a letter", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_685", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with  abc ", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_714", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with letter", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_715", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the word abc and ending with a letter", "source": "line that contains `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_723", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a character that begins with a capital letter", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_743", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character in the beginning and includes a capital letter", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_753", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with a character", "source": "line that contains `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_769", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_773", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and begins with 123", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_776", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line both contains and ends with a lowercase letter", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_782", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line should start with and contain a vowel", "source": "line that contains vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_790", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with  123 ", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_794", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and stops with a lowercase letter", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_810", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with  abc ", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_812", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with letter", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_835", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that concludes with a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_857", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing abc and beginning with a capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_872", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wsmall letter and includes 123", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_874", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and beginning with a vowel", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_875", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "where line ends with character includes a character", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_878", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both begins with and includes a capital letter within it", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_908", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter and containing a vowel", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_910", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and contains 123", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_916", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a capital letter and starts with a character", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_923", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and  has 123 at the end of it", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_924", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel in the beginning and also includes a vowel", "source": "line that contains vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_927", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with a capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_943", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses and also ends with the number 123", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_944", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and begins with a character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_948", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "123 initiating a line that has a letter in it", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_968", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain a character inside the line as well as the end of the line", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_978", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1002", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a lowercase letter in it and also ends in abc", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1025", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing characters and ending with letters", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1050", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter that begins with abc", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1068", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a letter and begins with 123", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1082", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using 123 and ending with a letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1162", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1163", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a lowercase letter and that also utilizes a letter", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1169", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a letter in it and begins with 123", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1183", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a letter and terminates with abc", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and begin with a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1230", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using 123 and ended by a lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1277", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains any vowels and ends with a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_1295", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and begin with a vowel", "source": "line that contains vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1342", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1353", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has lowercase instances of the letter that starts it", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1372", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a letter and containing a lowercase letter", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1403", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a lowercase letter and must include 1 2 or 3", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1431", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including 123 and begins with abc", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1433", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter that finishes with 123", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1468", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes abc and begins with a letter", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1538", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and stops after a character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1576", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1607", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with letter", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1611", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1627", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and contains a vowel", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1672", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1676", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a letter and abc for an ending", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and has a character in the beginning", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1713", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include at least one letter and ends with a vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_1717", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing and ending with abc", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1729", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a letter and having a lowercase somewhere in it", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1731", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a vowel and contains a character", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1734", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines contain a letter and end with a character", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1769", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with lowercase letter", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1773", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with  123 ", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1792", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with capital letter", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1800", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a lowercase letter and ending with abc", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1806", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including a lowercase letter and beginning with 123", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1815", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops with 123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_1820", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and stops with abc", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1828", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_1838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a character at its end that contains at least one lowercase letter", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_1844", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a vowel and starts with  123 ", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1866", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes small letter and concludes wvowel", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_1869", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a character that finishes with abc", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1894", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and begins with a capital letter", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1902", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has vowels as well as a character at the start", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_1920", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with lowercase letter", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1933", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel utilizes a lowercase ltter", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1934", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with  abc ", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1979", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and using a vowel", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1989", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a capital letter and ending with the smaller word abc", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_1994", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2030", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains 123 and ends with the word abc", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2044", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with  abc ", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2049", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "note the line that incorporates a letter besides beginning with the alphabetical sequence abc", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2064", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a lowercase letter and begins with a character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2078", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "where line finishes with a letter also includes a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2081", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2114", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses and begins with 123", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2115", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a lowercase letter at its end that utilizes the sequence", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2126", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending abc thats got a character in it", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2156", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops with a character", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2187", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a capital letter that is a vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2188", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a capital letter and ending with 123", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2232", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2240", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with capital letter", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2251", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  abc  and starts with a lowercase letter", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2263", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a small letter and has a vowel at the end", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2290", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lowercase letter and a vowel to start", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2313", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes 123 and that ends with a vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2331", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and ends with a capital letter", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2341", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has abc at the end", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2344", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes 123 and begins with a capital letter", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2351", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lowercase letter and a capital at the end", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2371", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have both a character as well as a capital letter at the beginning", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2375", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains vowels and begins with a letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2379", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and stops with a letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2386", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lowercase beginning", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2388", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the smaller word abc and begin with a vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2396", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a lowercase letter and ending with 123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2397", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and that concludes with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2406", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing lowercase letters and ending with letters", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2414", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a lowercase letter and that begins with a lowercase letter", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2417", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and end with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2419", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains   123  and ends with a vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2429", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and finishes with a lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2472", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2501", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a character and contains at least one capital letter", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2515", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with  abc ", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2535", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a letter and has a capital letter at the end", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2555", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a character and starts with  abc ", "source": "line that contains character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2583", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a lowercase letter and ending with123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2587", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2605", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing 123 and  beginning with a lowercase letter", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2609", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including 123 and terminating with a letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2621", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a vowel but also ends with abc", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2643", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with capital letter", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2658", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a lowercase letter in it and also ends in a capital letter", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2660", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes and concludes with uppercase letter", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2699", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has 123 within it and also begins with a vowel", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2728", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and stops with a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2740", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have vowels but also ends with a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a vowel that includes at least one letter", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2772", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both contains and ends with a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2775", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with  123 ", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2792", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using any letters and ends with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2800", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences wcharacter and includes letter", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2809", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains  123  and ends with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2813", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes abc and terminates with 123", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2823", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with 123 in it that is ended by a vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_2848", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have capitals and end in lowercas", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2859", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with capital letters", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2913", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a character and starts with a vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2936", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with lowercase letter", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2941", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc and starts with a capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2951", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the phase abc and that begin with a character", "source": "line that contains `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_2965", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a lowercase letter and ending with a capital letter", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2970", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with capital letters and start with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_2973", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and ends with a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2986", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line using at least one capital letter with a capital letter at its end", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2997", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter at the beginning and includes abc", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2999", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and begin with a character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3003", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3011", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with  123 ", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3014", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a character and which contains a capital letter", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3015", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and have an abc", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3022", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with capital letter", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3024", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning abc", "source": "line that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3027", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a character ending with a capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3031", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a character in it and also ends in a vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3034", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with  abc ", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3056", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing capitals and starting with abc", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3073", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lind containing 123 and ending with a letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3075", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a capital letter in it and also begins in a vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3092", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word abc and ends with a vowel", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3108", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and stops after 123", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3148", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with abc and have a character", "source": "line that contains character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3149", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a character and terminate with a vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3187", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including the sequence 123 within it and at its beginning", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3227", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line includes a capital letter and starts with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3231", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter that finishes with a capital letter", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3232", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences wletter and includes 123", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3240", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a letter and stops after a vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3247", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing 123 and ending with abc", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3317", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with  123  and contains lowercase letters", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3352", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3362", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3380", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the word abc and ending with a capital letter", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3386", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with  123 ", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3396", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with capital letter", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3410", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a lowercase letter that contains a letter", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3413", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and that begins with a letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3439", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines goes abc to start and has a capital in it", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3458", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines starting with a capital letter and have some character", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3460", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter at both the start and somewhere else", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3469", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a character in it and also begins with a vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3474", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with  abc ", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3487", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and begins with a vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3509", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing any letter and starting with a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3532", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have capital letters but also starts with abc", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have 123 and end with a lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3561", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3582", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with abc", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3584", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the beginning word a capital letter and includes 123", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3615", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a capital letter to start then 123 somewhere later", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3620", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line includes character and end also", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3624", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains characters and starts with a character", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3627", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with  123 ", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3645", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a character and ending with a lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3652", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with any character and including at least one character", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3669", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a character in it and also ends in abc", "source": "line that contains character and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3675", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a character that begins right after 123", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3689", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a letter and that has a letter in it", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3691", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include lowercase letters and finish with a capital letter", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3694", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a lowercase letter and begins with a capital", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3698", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with abc and at least one lowercase letter", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_3718", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with abc and end with vowels", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3743", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with character", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3746", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a character and which also ends with any lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3748", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a capital letter in it and also begins with a lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3780", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the number sequence 123 and conclude with a letter", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3781", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and begins with abc", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3827", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end in a letter and have at least one vowel", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3831", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "note the line ending in a lowercase letter that also has the alphabetical listing abc", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_3841", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3855", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and stops after a capital letter", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_3868", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and has a vowel at the end", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3871", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have 123 and start with a character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3884", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with character", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_3907", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and that begins with abc", "source": "line that contains character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3912", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has 123 in the end", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3923", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3925", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and begins with letters", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3965", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a character and begins with a letter", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3983", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel in it and a letter at the end", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_3989", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with character", "source": "line that contains `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4001", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and end with a vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4011", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word 123 and which also starts with a letter", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4030", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has 123 in it and also ends in 123", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4055", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with  abc ", "source": "line that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4064", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4071", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with capital letter", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4080", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with character", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4081", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with letter", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4096", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and stops after 123", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4138", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing a lowercase letter and ending with a vowel", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4163", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines have lowercase letters but also ends with a letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4166", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and ending with a character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4171", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has any character and ends with an uppercase letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4172", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4191", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes 123 and that starts with 123", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4228", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4248", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and has a letter in the beginning", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4298", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that comes to an end with a letter and includes a small letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4314", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a special character that ends with a lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4319", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and stops with abc", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4328", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter but also contain lowercase letters", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4338", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a vowel and utilizes a capital letter", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4342", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and that concludes with a lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4372", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has 123 ending with a character", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4379", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4432", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that begins with a lowercase letter", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4443", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and begin with a character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4446", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a capital  and starts off with a lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4450", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a letter and using a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4481", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and ends with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4496", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has 123 number sequence and finishes with a vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4516", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel in it and also ends in a capital letter", "source": "line that contains vowel and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4538", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with any character where capital letters appear", "source": "line that contains capital letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4541", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc and that begins with a lowercase letter", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4546", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a vowel that finishes with a character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4549", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with  abc ", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4555", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with 123 and contains a letter", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a capital letter in it and also ends in a lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4599", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a letter and begins with a capital letter", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4607", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and begins with a character", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4622", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including a lowercase letter and ending with 123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4640", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and ending with a capital", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4642", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the number 123 and contains the word abc elsewhere", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4645", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses abc and ends with a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4649", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has 123 in it and also begins with a character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4650", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing abc and ending with 123", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4674", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with 123 at the beginning and has a lowercase letter", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4685", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines with lowercase letters that starts with characters", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4686", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes 123 and has a letter at its end", "source": "line that contains `` 123 '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4688", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc at the end", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4691", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc that has a vowel", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4721", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with a vowel and using a letter", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4737", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a capital letter and end with a capital letter", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4740", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4748", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops after abc", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4755", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that use a character and end with a letter", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a capital letter and begin with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4785", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses characters and begins with a vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4790", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with the sequence 123 with that sequence used at least once within it", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4801", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a vowel and that begins with a lowercase letter", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4844", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with abc", "source": "line that contains character and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4888", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and stops after abc", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4889", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_4892", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starts with 123 and includes small abc", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4893", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4948", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with  abc ", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_4971", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain the number sequence 123 and start with abc", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_4975", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letter and begins with a letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4984", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses letters and begins with a vowel", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4992", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with  abc ", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5001", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with  abc ", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5011", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a lowercase letter and stop with abc", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5012", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines use a vowel and end with a lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5015", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and then 123 at the end", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5026", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc that finishes with a vowel", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5027", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing the smaller word abc and ending with a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5034", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a capital letter and ending with a character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5039", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a character and ends with a capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5047", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a capital letter in it is ended by a lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5061", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "there is a vowel in the end of a line that also includes a big letter", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5068", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a capital and begins with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5076", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5081", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  123  and ends with  123 ", "source": "line that contains `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5091", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line includes noncapitalized letter and concludes wcharacter", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a lowercase letter and also starts with a letter", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5147", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has 123 at the end", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5158", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and ending with a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5160", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing capital letter and beginning with lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5165", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with lowercase letter", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with  abc ", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a lowercase letter and uses other letters", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5185", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with 123 and where a character appears with it", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5197", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with character", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5203", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes letter and ends with a character", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5217", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has vowels including at the end", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_5224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "note the line incorporating a capitalized letter that also finishes with the sequence abc", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5227", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that contains the string 123 and starts with a character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5243", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has abc in the beginning", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5266", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ends with a lowercase letter", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5267", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and has a character in the beginning", "source": "line that contains `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5268", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and stops with a letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5283", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "123 on a line that finishes with abc", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5294", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a capital letter and that begins with a vowel", "source": "line that contains capital letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5302", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have the number sequence 123 and finish with a capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5307", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and begins with a vowel", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5316", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a lowercase letter and that begins with abc", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5342", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and using 123", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5350", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with character", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with  123 ", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5365", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has a letter in the beginning", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5372", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with letter", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5379", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with  abc ", "source": "line that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5386", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and beginning with a letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5393", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has a capital letter and ends with sequence 123", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5431", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has abc in it and also ends in a letter", "source": "line that contains `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5432", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line including a vowel and beginning with a capital letter", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5438", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a character at the end", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5449", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line contains 123 and has a charcter at the end", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5471", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5474", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with  abc ", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5512", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with  123 ", "source": "line that contains `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5515", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that comes to an end with 123 and includes a character", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5517", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel in it and also ends in abc", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5532", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line thatcontain a character in it and also starts with a character", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5547", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a lowercase letter and end with a capital letter", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5569", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line contains a letter and ends with", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5585", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has  a character at the end and also has 123 in it", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5586", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a vowel and containing 123", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5593", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and begin with a character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5595", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have lowercase letters and end with characters", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5602", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc to start and another vowel besides", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5612", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 has a character in it", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5623", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with 123", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5643", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with  abc ", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5656", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with a vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5666", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has any vowel and ends with any characters", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5711", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital letter and containing 123", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5712", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "whats a line with characters and ends in one", "source": "line that contains character and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5756", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel adn ending with abc", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5760", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes abc", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line starts with a letter and contains a lowercase letter", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5785", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a capital letter and contain at least one vowel", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that ends with letter", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has lowercase letters in it and ends with a character", "source": "line that contains lowercase letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5863", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with vowel", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_5882", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5887", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a letter and has a lowercase letter in it", "source": "line that contains lowercase letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_5903", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and contains letters", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5927", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter and contains a letter", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5953", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a vowel and end with 123", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5954", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with  abc ", "source": "line that contains letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5984", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word abc and contains any vowel", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5995", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and that begins with 123", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6022", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line that contains  abc  and that starts with vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6030", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6031", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains and ends with a vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6057", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with capital letter", "source": "line that contains character and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6059", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and has a small letter at the end", "source": "line that contains `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_6061", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a lowecase letter and begins with a vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6087", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6099", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with vowel", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6124", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains 123 and ends with a character", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_6214", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and begins with a letter", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6228", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines which end with a capital letter and includes abc", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_6238", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and begin with a character", "source": "line that contains letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6246", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6253", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc in it and ended by a character", "source": "line that contains `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_6254", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and contains a capital letter", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_6262", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a vowel and terminates with a letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_6281", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes abc and has a letter at the end", "source": "line that contains `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_6343", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with vowel", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_6368", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and has 123 at the end of it", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_15", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses any capital letters but ends with a character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_29", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line can contain any letters the first letter being capitalized", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_34", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with a capital letter and contains vowels", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_77", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with lowercase letter", "source": "line that contains lowercase letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_87", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what lines begin with a vowel and contain 123", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_92", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains   123  and ends with   abc ", "source": "line that contains `` 123 '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_94", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_126", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with  123 ", "source": "line that contains letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_132", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a character and ends with  123 ", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_141", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a capital letter and begins with a letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_151", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a capital letter and ending with a lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_163", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the line contains the numerals 1 2 and 3 and starts with a lowercase letter", "source": "line that contains `` 123 '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with 123 and containing abc", "source": "line that contains `` 123 '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_182", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and stops after a lowercase letter", "source": "line that contains capital letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_197", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses capital letters and ends with any character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_201", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a vowel and begin with the smaller word abc", "source": "line that contains vowel and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_204", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has both a vowel and 123 in sequence for its end", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_246", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starting with 123 also has abc in it", "source": "line that contains `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_259", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with letter", "source": "line that contains lowercase letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_262", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and begins with a lowercase letter", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_273", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_276", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line commences w123 and has vowel", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_290", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and ending with the number 123", "source": "line that contains vowel and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_302", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and begins with a character", "source": "line that contains `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_308", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a letter and end with a capital letter", "source": "line that contains letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_315", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with  abc ", "source": "line that contains lowercase letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_320", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a capital letter and ending with a vowel", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_362", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and begins with a letter", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_392", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a lowercase letter in it and also begins with a character", "source": "line that contains lowercase letter and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_396", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_425", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a character in both the body and end of the line", "source": "line that contains letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_434", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line starting with and containing a letter", "source": "line that contains letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_445", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have in them a character and begin with a letter", "source": "line that contains character and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_449", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with a capital letter", "source": "line that contains capital letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_453", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word abc and starts with a vowel", "source": "line that contains `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_463", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and a lowercase letter", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_468", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with a capital but containing lowercase letters", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_469", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses character but ends with capital letters", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_518", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a letter and ending with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with  123 ", "source": "line that contains capital letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_530", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a character and had a letter at the end", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_541", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses and starts with lowercase letters", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_542", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel and ends in another vowel", "source": "line that contains vowel and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_595", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has characters and also ends with a charcter", "source": "line that contains character and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_597", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line has a capital letter in it and also begins with 123", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_610", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter and have a capital letter", "source": "line that contains capital letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_622", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a capital letter and terminates with a letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_634", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a lowercase letter and begins with a capital letter", "source": "line that contains lowercase letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_678", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines where abc is both the start and finish", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_693", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and ending with a letter", "source": "line that contains vowel and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_705", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_707", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses abc and stops after abc", "source": "line that contains `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_709", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a letter and ends with the sequence abc", "source": "line that contains letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_717", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the phase abc and begin with the letter sequence abc", "source": "line that contains `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_730", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a vowel and that terminates with a character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_740", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a vowel and begin with a character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a letter and ending with a lowercase letter", "source": "line that contains letter and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_769", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter in the beginning", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_780", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a vowel that must use at least one lowercase letter", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_795", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with any vowel and contains the number 123", "source": "line that contains `` 123 '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_798", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and begins with a vowel", "source": "line that contains lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a vowel and starts with a character", "source": "line that contains vowel and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_852", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a capital letter and using 123", "source": "line that contains `` 123 '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_864", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes a vowel and has abc  at the end", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_874", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_879", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and stops after a lowercase letter", "source": "line that contains `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_880", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains a capital letter and with a character", "source": "line that contains capital letter and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_898", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with vowel", "source": "line that contains `` 123 '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_966", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_999", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with any lowercase letter with a vowel within it", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1019", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have a capital letter and end with a vowel", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1050", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing 123 and ending with a character", "source": "line that contains `` 123 '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1052", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains a character and ends with a lowercase letter", "source": "line that contains character and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1053", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has characters but ends with a vowel", "source": "line that contains character and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1080", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains any character and ends with a capital letter", "source": "line that contains character and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_1118", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a letter and contains a capital letter", "source": "line that contains capital letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_1130", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with  123 ", "source": "line that contains capital letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1142", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a lowercase letter and begins with 123", "source": "line that contains lowercase letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1144", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with character", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1154", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and stops with 123", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1165", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with lowercase letter", "source": "line that contains `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1172", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with lowercase letter", "source": "line that contains lowercase letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with  abc ", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1212", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and finishes with a lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1213", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses vowels and stops after a lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1218", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using abc and ending with a capital letter", "source": "line that contains `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_1221", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses and begins with characters", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1234", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a letter and the line ends with a letter", "source": "line that contains letter and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_1244", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letters and begins with abc", "source": "line that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1249", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what  line that contains lowercase letter and that starts with  abc ", "source": "line that contains lowercase letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1267", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains characters and ends with   123 ", "source": "line that contains character and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1272", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a capital letter and begin with a lowercase letter", "source": "line that contains capital letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1280", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a capital letter and finish with the letter sequence abc", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_1285", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and includes a vowel", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1302", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line containing a character and starting with a lowercase letter", "source": "line that contains character and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1312", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel and also 123 in the beginning", "source": "line that contains vowel and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1333", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that ends with lowercase letter", "source": "line that contains vowel and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_test_1354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with multiple vowels starting with a vowel", "source": "line that contains vowel and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1355", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and begins with a letter", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1360", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins with a letter and contains a vowel", "source": "line that contains vowel and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1365", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a capital letter but can contain any other letter", "source": "line that contains letter and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1374", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what begins and contains characters", "source": "line that contains character and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1381", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that ends with vowel", "source": "line that contains letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1383", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both starts with and contains 123", "source": "line that contains `` 123 '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1385", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line start with both a letter and 123", "source": "line that contains `` 123 '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1407", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a lowercase letter and contains at least one vowel", "source": "line that contains vowel and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1421", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending on a vowel with a lowercase letter somewhere", "source": "line that contains lowercase letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1440", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line creates wletter and includes abc", "source": "line that contains `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1490", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with  123 ", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1493", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a capital letter that finishes with a vowel", "source": "line that contains capital letter and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1523", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the letter sequence abc and begin with a capital letter", "source": "line that contains `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_1524", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that ends with capital letter", "source": "line that contains `` 123 '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_test_1537", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc ending in a vowel", "source": "line that contains `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1552", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with vowel", "source": "line that contains character and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1560", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with lowercase letter", "source": "line that contains letter and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1564", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both starts with abc and contains abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1269", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with and contains the word abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3271", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the expression abc and that has the saying abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3496", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains the word  abc ", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3990", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with and containing the word abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_330", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that does not contain  abc ", "source": "line that not contains `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\"))", "qid": "regex_train_58", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not contain  123 ", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_70", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line not containing any lowercase letters", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line with no characters in it", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_869", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line without small letter", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_989", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not use vowels", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_1038", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not have a capital letter", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_1337", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line without any lowercase letters", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_1402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have a capital letter", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_1681", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what  line that not contains character", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_1704", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines without any vowels at all", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_1748", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains capital letter", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_1839", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that does not have 123 in it", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_1858", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains letter", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_2626", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not include a letter", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_3062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have a character in it", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_3191", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not use capital letters", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_3268", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line containing no characters", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_3273", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not contain a letter", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_3330", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains character", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_3635", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that cannot utilize any lowercase letters", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_3936", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line without letters", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_4095", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not contain a capital letter", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_4507", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not have a vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_4736", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not contain a vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_4738", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not include a small letter", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_5102", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not include a character", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_5120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains  123 ", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_5150", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not have the digits 123 within them", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_5156", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines where abc does not appear", "source": "line that not contains `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\"))", "qid": "regex_train_5181", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains lowercase letter", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_5539", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not contain a letter", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_5615", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains  123 ", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_5800", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line not using abc", "source": "line that not contains `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\"))", "qid": "regex_train_6017", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line with only numbers and letters", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_6234", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what line does not contain a vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_test_55", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not include any capital letters", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_test_360", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_test_738", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that does not use letters", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_test_760", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not use 123", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_test_909", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that begins with abc or the number 123", "source": "line that starts with the word `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_489", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line starting with abc or 123", "source": "line that starts with the word `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_27", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with the word abc or the number 123", "source": "line that starts with the word `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_297", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that starts with the word  abc  after the number 123 ", "source": "line that starts with the word `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1021", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that stops with a character or digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_366", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line ending with 123 or any digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_405", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that finish with a digit or abc", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_509", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with a character or a digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_576", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "what line ends with 123 or another digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_934", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with character or digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_937", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that end with either a letter or number", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_1404", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that finishes in lowercase or a numeral", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_1682", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with capital letter or digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_1699", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  123  or digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2117", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "what line ends with a digit or abc", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2197", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that concludes with a letter or a digit", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with vowel or digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2556", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either a capital letter or a single digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2570", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that stops after a capital letter or digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3256", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either a vowel or a digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3294", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with lowercase letter or digit", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3415", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  123  or digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3559", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that contain a digit ora vowel at the end", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3713", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending either with 123 or a digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3866", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line concludes wletter or digit", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_3877", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that have a lowercase letter or number at the end", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4106", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with lowercase letter or digit", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4352", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that finish with the sequence of 123 or any other digit", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4576", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either abc or a digit", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4725", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending with either a letter or a number", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4754", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with letter or digit", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4794", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that can be ended with a capital letter or number", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_4913", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "what line ends in either a capital letter or in a digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_5053", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line ending with either a lowercase letter or a digit", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_5459", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that terminate with either a capital letter or digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_5526", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that has a lowercase letter or digit at the end", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_5702", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line that terminates with a character or digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_6153", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that end with either a vowel or a digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_461", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that stops after 123 or any digits", "source": "line that ends with `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_479", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line that terminates with a letter or a digit", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_630", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "what is a line that ends with either a lowercase letter or with a digit", "source": "line that ends with lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_797", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line ending in either a digit or any letter", "source": "line that ends with letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_911", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that finishes with a vowel or digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_938", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with character or digit", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_956", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with vowel or digit", "source": "line that ends with vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1055", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that has a character or a  number at the end", "source": "line that ends with character or digit", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1217", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  abc  or digit", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1392", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that conclude with the smaller word abc or a digit", "source": "line that ends with `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1410", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with capital letter or digit", "source": "line that ends with capital letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1512", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line that includes the word abc preceded by the number 123", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_640", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line where there number 123 came after the word abc", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1352", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  before the number  123 ", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1817", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc before 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3470", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line containing the word abc followed by the number 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3606", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the word abc before 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3633", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a word abc after 123", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_199", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that include the number 123 and ends with abc", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_256", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what lines contain abc before the number 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_509", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  after the number  123 ", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_739", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that includes the word abc followed by the number 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1063", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that do not begin with abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_154", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that isnt begun with abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_1026", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with the word  abc ", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_1779", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not start with the phase abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_3724", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that does not begin with the word abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_5333", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have abc as its beginning", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_test_1485", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that begins with abc has a capital letter in it", "source": "line that contains capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc in the beginning that also utilizes any letter", "source": "line that contains letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_559", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with the word  abc ", "source": "line that contains character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1167", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in the beginning and  includes a letter", "source": "line that contains letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1426", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line starting with abc", "source": "line that contains `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1722", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line starting with and containing the word abc", "source": "line that contains `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1750", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with the word  abc ", "source": "line that contains letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2033", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word abc and has a character in it", "source": "line that contains character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2157", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with the word  abc ", "source": "line that contains `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with   abc  and contains characters", "source": "line that contains character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2265", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with the word  abc ", "source": "line that contains `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2321", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with the word  abc ", "source": "line that contains character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2752", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and using a character", "source": "line that contains character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2920", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that starts with the word  abc ", "source": "line that contains capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2969", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses 123 and begins with abc", "source": "line that contains `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3081", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with   abc  and contains capital letters", "source": "line that contains capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3707", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and where 123 appears", "source": "line that contains `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3733", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the number sequence 123 and begin with the letter sequence abc", "source": "line that contains `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3875", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line that contains lowercase letter and that starts with the word  abc ", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3892", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with abc and has a vowel in it", "source": "line that contains vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3972", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses characters and begins with the word abc", "source": "line that contains character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3996", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a lowercase letter and begins with the word abc", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4002", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with the word  abc ", "source": "line that contains letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4153", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the word abc and containing a vowel", "source": "line that contains vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4506", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and begins with abc", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4851", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that had the word abc as its beginning and includes a small letter", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4895", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with the word  abc ", "source": "line that contains `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4916", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has a character in it and also begins with the word abc", "source": "line that contains character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5193", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has the word abc in the beginning", "source": "line that contains capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5364", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with abc that utilizes a letter", "source": "line that contains letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5448", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that starts with the word  abc ", "source": "line that contains vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5511", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and where a capital letter appears", "source": "line that contains capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5741", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has abc in it and begins with the word abc", "source": "line that contains `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5775", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that starts with the word  abc ", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_59", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a vowel and begins with the smaller word abc", "source": "line that contains vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_160", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a vowel and begins with abc", "source": "line that contains vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_408", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with   abc  and contains   123 ", "source": "line that contains `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_736", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a capital letter and begins with the word abc", "source": "line that contains capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_919", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line both contains abc and a letter", "source": "line that contains letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_940", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wabc word and includes small letter", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_965", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have in them a lowercase letter and begin with the phase abc", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1402", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has numbers 123 followed by a letter", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_215", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that include a lowercase letter after the number sequence 123", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_324", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with a capital letter following the series 123", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_354", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains character after the number  123 ", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_431", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line includes numerals 123 and vowel", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_530", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with 123 followed by 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_551", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is the line containing a capital letter after the number 123", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_739", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line has lowercase letters appearing after   123 ", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_774", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line containing the number 123 followed by a lowercase letter", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_984", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  after the number  123 ", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_1509", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "which line has 123 in it after the number 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1531", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with abc coming after 123", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_1824", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains letter after the number  123 ", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1878", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that uses abc and then a digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2385", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line containing the numbers 123 followed by a capital letter", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_2442", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel after the number  123 ", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_2786", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses any characters after the number 123", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_2932", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes 123 preceded by the number 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_3122", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains the word abc before any digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3552", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains letter after the number  123 ", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3605", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line includes 123 following number 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_3676", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that includes the digit 123 before the vowel", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_3693", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line utilizing the sequence 123 followed by any letter", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3948", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "locate the line that incorporates abc following the number sequence 123", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_4060", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses letters after the number 123", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_4102", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter after the number  123 ", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_4186", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that contains  abc  before a digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4187", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line where 123 is followed by a letter", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_4253", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter after the number  123 ", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_4309", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "the line needs the character to appear after the number 123", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_4397", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that has a special character after the number 123", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_4586", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses lowercase letters after the number 123", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_4713", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is a line that has a capital letter coming after the number 123", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5252", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc before numbers", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5276", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line containing the word abc followed by a number", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5323", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc after 123", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5348", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line with the number 123 followed by a character", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_5368", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  after the number  123 ", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5382", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter after the number  123 ", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_5414", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with 123 followed by any character", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_5478", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  after the number  123 ", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_5540", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  before digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5670", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that contain a letter that follows the number 123", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_5865", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  before digit", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5917", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has 123 followed by a capital letter", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5982", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel directly after the number sequence 123", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_6088", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains the number 123 twice", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_6216", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel after the number  123 ", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_431", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel after 123", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_1069", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have lowercase letters after 123", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_test_1232", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter after the number  123 ", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_test_1472", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line including abc is preceded by 123 number", "source": "line that contains `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_test_1482", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses a vowel after 123", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_1579", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line ending either with the word abc or with a digit", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_321", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line that ends with  abc  or a digit", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_645", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that has a number or abc at the end", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_676", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "lines that have a number or the smaller word abc at the end", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_train_2075", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with a number or the word abc", "source": "line that ends with the word `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")))", "qid": "regex_test_1181", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")))"}
{"paraphrased": "a line with a vowel at the end before the number 123", "source": "line that ends with vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_31", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that end with a vowel before 123", "source": "line that ends with vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_261", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with  abc  before the number  123 ", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_343", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that comes to an end with a vowel before the digit 123", "source": "line that ends with vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_605", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with  123  before the number  123 ", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_766", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines ending 123 after any capital letter", "source": "line that ends with capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_969", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that conclude with the phase abc after a digit", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1649", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with 123123", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1886", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with character before the number  123 ", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2149", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with the word  abc  after digit", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2234", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that terminate with a lowercase letter directly before the number sequence 123", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2244", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that has 123 before an ending lowercase letter", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2275", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that end with  abc after a digit", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2482", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line ending in abc before 123", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2549", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with letter before the number  123 ", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2831", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after a letter is before 123", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2844", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line ending in a character before 123", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3119", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that has a digit and abc at the end", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3142", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with a repeating 123 sequence", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3242", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with lowercase letter before the number  123 ", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3323", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "locate the line that ends with the sequence of a letter followed by 123", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3588", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after abc if abc is written before 123", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3756", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line ending with the sequence 123 with a vowel appearing right before it", "source": "line that ends with vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3767", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with the word  abc  after digit", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4046", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line that ends with  abc  before  123 ", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4088", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line the concludes with a capital letter before the number 123", "source": "line that ends with capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4217", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "which line ends with a capital letter that comes before the number 123", "source": "line that ends with capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4226", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with lowercase letter before the number  123 ", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4300", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with the number 123 following any lowercase letter", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4603", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that initiate with a character directly before the number sequence 123", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4656", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with  123  before the number  123 ", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5112", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "what line ends with a capital letter followed by the number 123", "source": "line that ends with capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5241", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line concludes wcharacter then numerals 123", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5288", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after the word abc if it is before any digits", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5444", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with letter before the number  123 ", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5681", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with 123 before 123", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5884", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that stops with any letter as long as its lowercase then 123", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5937", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line that ends with a capital letter before  123 ", "source": "line that ends with capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_6162", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line ending with abc followed by 123", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_6187", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops with a lowercase letter before 123", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_6237", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line ending with a character and 123", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_6326", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after 123 that is before a 123", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_6376", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line that ends with a vowel before  123 ", "source": "line that ends with vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_85", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "which line ends in 123 coming before the number 123", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_456", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that comes to an end with an alphabet before the digit 123", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_747", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that has the digit 123 after a character which forms the end of a sentence", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_815", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that terminate with a letter before the number sequence 123", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_981", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that conclude with the phase abc before the number sequence 123", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_1076", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line ending with a letter preceding the number 123", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_1111", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line that does not terminate with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_train_981", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not end in the smaller word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_train_5519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not end with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_test_560", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "line that does not finish with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_test_583", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "line that does not end with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_test_1436", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "a line that begins with 123 followed by a capital letter", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_4", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start off 123 abc", "source": "line that starts with `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_107", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with abc then some digit following that", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_187", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "after the number 123 there is a letter next in the beginning of a line", "source": "line that starts with letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_401", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with abc after 123", "source": "line that starts with `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_473", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter after the number  123 ", "source": "line that starts with letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_830", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a lowercase letter that is after the number 123", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_1135", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter after the number  123 ", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_1229", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line begins with the number 123 followed by 123", "source": "line that starts with `` 123 '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1356", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a capital letter after 123", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_1456", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter after the number  123 ", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_1743", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with 123 followed by character", "source": "line that starts with character after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_1818", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  before digit", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1915", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line with the number 123 followed by a letter", "source": "line that starts with letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1966", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with a character after the number  123 ", "source": "line that starts with character after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_2634", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a vowel after 123", "source": "line that starts with vowel after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_2683", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  before digit", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2856", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with the number 123 followed by a letter", "source": "line that starts with letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3291", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line goes 123 then some capital letter", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_3292", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with a character preceded by the number 123", "source": "line that starts with character after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_3503", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "find the line that uses the sequence abc at the beginning followed by a numeral", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3544", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that go 123 then some lowercase letter", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_3570", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line has two iterations of  123 ", "source": "line that starts with `` 123 '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_3673", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with the sequence 123 followed by any character", "source": "line that starts with character after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_3817", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel after the number  123 ", "source": "line that starts with vowel after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_3895", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  after the number  123 ", "source": "line that starts with `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_3929", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with 123 after the number 123", "source": "line that starts with `` 123 '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_4284", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with 123 and includes 123", "source": "line that starts with `` 123 '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_4491", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter after the number  123 ", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_4662", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with a capital letter after  123 ", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_4775", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with abc before digits", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4866", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with the word  abc  followed by a digit", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4886", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with 123 followed by a lowercase letter", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_5261", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a capital after 123", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5337", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with 123 and a letter", "source": "line that starts with letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_5537", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a vowel in the beginning after the digit 123", "source": "line that starts with vowel after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_5802", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line beginning with the number 123 followed by a lowercase letter", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_5966", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has abc  in the beginning after the digit 123", "source": "line that starts with `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_train_5994", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a character after the number 123", "source": "line that starts with character after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_test_504", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that satrts with the number 123 then contains a letter", "source": "line that starts with letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_test_533", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a vowel after 123", "source": "line that starts with vowel after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_970", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that has a digit after the word abc which starts the line", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1082", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with 123 then follow with a vowel", "source": "line that starts with vowel after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_1243", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  after the number  123 ", "source": "line that starts with `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_test_1396", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what is a line that begins with a lowercase letter coming after the number 123", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_test_1483", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "find the line that finishes with the lettered sequence abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2017", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with the word  abc ", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3864", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with the word abc and also ends with the word abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4019", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after the word abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4254", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc at the end", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4808", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with the word  abc ", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_329", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with the word abc and that concludes with the word abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1238", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "word that ends with two capital letter", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_43", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a numbers that ends with no more than two numbers", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_50", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "locate a word ending with two different characters", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_110", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two numbers or less at the end", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_132", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with no more than two letters", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_195", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two lowercase letters", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_276", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 words", "source": "word that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_371", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two lowercase letter", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_404", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a minimum of two characters", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_434", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two number", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_491", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two capital letter", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_540", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in at the most two numbers", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_656", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two character", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_695", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with two or more letters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_768", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number is it that ends with two characters", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_846", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have at least two capital letters and the end", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_930", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at least two vowels", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_935", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two capital letter", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_977", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with two vowels", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1285", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number where at least two digits appear", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1321", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that has two letters as its final characters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1322", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with no more than two digits at its end", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1326", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with no fewer than two capital letters", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1335", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two words or less", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1343", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 capital letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1357", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops with at most 2 numbers", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1410", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with at least two characters", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1487", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at least two digit", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1541", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with no more than two digits", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1718", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that is completed with two letters or less", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1723", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number with no more than two lowercase letters at its end", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1749", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most two vowels", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1759", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two number", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1808", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "mention a word ending with two letters at most", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1875", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with two vowels at most", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2004", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with no more than two numbers", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2018", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with no more than two lowercase letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2088", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with at most two digits", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has more than a single character at the end", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with at least 2 letters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2204", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with two characters or less", "source": "number that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2258", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with two letters", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2320", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most 2 capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2424", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with atmost two words", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2462", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with two or fewer letters", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2490", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with two vowels", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2545", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with two or more vowels", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2593", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that finish with two characters", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2606", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at most two digits", "source": "word that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2661", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that concludes with at a maximum of two words", "source": "word that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2697", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two letter", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2708", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after at most 2 digits", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2733", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at least 2 character", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2765", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with two words or less at the end", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2777", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two letter", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2784", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two letter", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2867", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two letter", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2905", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with no less than two capital letters", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2990", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with no more than two letters", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with no more than two characters", "source": "number that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3059", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with two capital letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3074", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with at least two digits", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3102", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that comes to an end with two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3118", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with no more than two characters", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3165", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two vowels or less", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3181", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with any two letters", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3252", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 characters", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3269", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with exactly two vowels at its end", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3305", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two word", "source": "word that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3350", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with two character", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3369", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with two or more vowels at the end", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3395", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3401", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word with no more than two characters at its end", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3452", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two or less lowercase letters", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3522", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with two characters", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3574", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with no more than two lowercase letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3637", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word can be any but finishing word have two lowercase letter", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3649", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two vowels at the end", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3800", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two letter", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3837", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with two or more digits", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3870", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains two characters at the end", "source": "number that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3873", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has a minimum of two characters at the end", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3883", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have two letters at the end", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3910", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after at most 2 letters", "source": "number that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4009", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two digit", "source": "number that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4012", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two capital letter", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4093", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has two lowercase letters at the end", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4117", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most 2 letters", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4144", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending in no more than two digits", "source": "word that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4195", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate in no more than two numbers", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4204", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with two or more lowercase letters", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4214", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a double character", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4244", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two capital letter", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4290", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers ending with at most two capital letters", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4353", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with no more than two capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4365", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4378", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with two vowels at most", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4424", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with any letter number or character but ends with two lowercase letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4457", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that terminates in no more than two vowels", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4483", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with no more than two words", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4513", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that is ended by any two letters", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4554", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at least a capital", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4567", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with two lowercase letters", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4583", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with three or more digits", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4608", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two characters or less at the end", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4618", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4628", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two vowels or less", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4653", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has two small letters at the end", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4671", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with two capital letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4703", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with no more than two capital letters", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4760", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most 2 characters", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4865", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "last two letters of last word are lowercase", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4911", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with two or more characters", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4966", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word has two characters at its end", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two lowercase letter", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5059", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with no more than two digits", "source": "word that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5063", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with no more than two letters", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5087", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with two digit", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5103", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at most 2 lowercase letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5126", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that has two uppercase letters or less at the end", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after 2 characters", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word ends with a maximum of two vowels", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two character", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5297", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two lowercase letter", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5385", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two word", "source": "number that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5417", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that finish with two or more letters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5466", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with two lowercase letters or less", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5476", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after at least 2 vowels", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5552", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with any two digits", "source": "number that ends with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5618", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word is it that ends in at least two vowels", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5655", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words end with two or less shorter words", "source": "word that ends with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5697", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a maximum of two capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5700", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the word ends with two consecutive lowercase letters", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5734", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that uses at least two capital letters at the end", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5742", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two capital letter", "source": "word that ends with at least two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5777", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two capital letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5779", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that are shorter than three capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5836", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with two character", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5900", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two character", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at least two characters", "source": "number that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6071", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two vowel", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6095", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with two digits or less", "source": "word that ends with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6098", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 lowercase letters", "source": "word that ends with two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6105", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "this number must end with less that three capital letters", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6114", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate with no more than two characters", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6119", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with two uppercase letters", "source": "word that ends with two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two letter", "source": "word that ends with at most two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6195", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word that ends with at most two number", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6198", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two character", "source": "word that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6204", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that also no more than two lowercase letters at the end", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_6", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two character", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_18", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at least two letters", "source": "word that ends with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_86", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after 2 vowels", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_108", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two number", "source": "number that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_131", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with two capital letters or less", "source": "number that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_278", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with a maximum of two small letters", "source": "word that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_317", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word ends with at least two vowels", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_376", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word ends with two letters", "source": "word that ends with two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_379", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at most two capital letter", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_406", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number ends with minimum two digits in it", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_498", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with at most 2 numbers", "source": "word that ends with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_524", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with a double character", "source": "number that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_567", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that end with no more than two characters", "source": "number that ends with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_773", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that ends in at the least two digits", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_802", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with not more than two capital letters", "source": "word that ends with at most two capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_826", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that finishes with at least two lowercase letters", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_867", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two vowel", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1020", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two lowercase letter", "source": "word that ends with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1277", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with two or more digits", "source": "number that ends with at least two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1329", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two vowel", "source": "word that ends with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that ends with two lowercase letters", "source": "number that ends with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1380", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with two or more characters", "source": "word that ends with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1384", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with two vowels or less", "source": "word that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1413", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with at least two vowel", "source": "word that ends with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1426", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with two character", "source": "word that ends with two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1546", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with at most two vowel", "source": "number that ends with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1571", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that ends with abc", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1238", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with the word  abc  before the number  123 ", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1317", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "what  line that ends with the word  abc  before the number  123 ", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1387", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that finsih with a smaller word abc and the number sequence 123", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1631", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "mention the line that ends with wordabc followed by number 123", "source": "line that ends with the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2732", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after the word abc and also the number 123", "source": "line that ends with the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3167", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line ending with the number 123 followed by the word abc", "source": "line that ends with the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4465", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line stops wabc word then 123 number", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5528", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line that ends with  abc  after  123 ", "source": "line that ends with the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5859", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after the word abc that is before 123", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_254", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with the word  abc  after the number  123 ", "source": "line that ends with the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_972", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with the word abc before the number 123", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_1066", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line beginning with a letter followed by the number 123", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_53", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with abc after a digit", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_696", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel before the number  123 ", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_778", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel before the number  123 ", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_852", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a lowercase letter that is before the number 123", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1234", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a capital letter in the beginning", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1280", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  before the number  123 ", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1339", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with a lowercase letter then 123", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1474", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line with a letter and 123 at the beginning", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2108", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line begins with 123 followed by a lowercase letter", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2133", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line commences wcharacter then numerals 123", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2219", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with capital letter before the number  123 ", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2226", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  after digit", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2487", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with character before the number  123 ", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2511", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line beginning with a capital letter followed by 123", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2580", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with letter before the number  123 ", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2640", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that starts with any characters before the numbers 123", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2644", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that start with the letter sequence abc directly after a digit", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2894", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  before the number  123 ", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3141", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with the alphabets abc  before the digits 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3738", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line beginning with a character followed by 123", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3899", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that starts with the word abc before the number 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4016", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with any letter followed by the number 123", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4077", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  before the number  123 ", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4157", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a letter before 123", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4232", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that starts with a capital letter before 123", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4456", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with abc then 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4852", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the word abc in the beginning after a number", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4991", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "find the line that has two repetitions of the sequence 123 both of which occur at the beginning", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5004", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with 123 that is before a 123", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5020", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line commences wdigit then abc word", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5090", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line beginning with abc followed by 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5218", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line beginning with a lowercase letter followed by the number 123", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5398", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with the digit 123 after the number123", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5406", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that start some letter then 123", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5597", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that begins with a vowel before 123", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5657", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with a capital letter and before the number 1 2 or 3", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5912", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line beginning with 123 before itself", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6080", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with  123  before the number  123 ", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6346", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line begins with a character followed by 123", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6350", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a vowel before the digits 123", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_145", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what lines begins with a character and contains  abc  after", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_311", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter before the number  123 ", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_378", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the digit 123 after a vowel", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_389", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  after digit", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_629", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter before the number  123 ", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_801", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a vowel that is before 123", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_961", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line beginning with abc followed by the number 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_988", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the digit 123 after the beginning letter which is in lowercase", "source": "line that starts with lowercase letter before the number `` 123 ''", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1186", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that initiate with a vowel right before the number sequence 123", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1522", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that begins with the word abc and terminates with a lowercase letter", "source": "line that starts with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_85", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wabc word and concludes wsmall letter", "source": "line that starts with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_149", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with  abc ", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_221", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the beginning of the line should be the characters abc", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_493", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with  abc  and and ends with  123 ", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_554", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the word abc and finishes with a capital letter", "source": "line that starts with the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_894", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts and ends with the word  abc ", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_903", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with the shorter word abc ending on a letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_956", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the word abc and that concludes with a lowercase letter", "source": "line that starts with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1498", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with lowercase letter", "source": "line that starts with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1819", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with  123 ", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2312", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in the beginning and a character at the end", "source": "line that starts with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2566", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the smaller word abc and ending with a lowercase letter", "source": "line that starts with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2736", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line starting off with abc and finishing with 123", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_3433", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the word abc and terminating with a vowel", "source": "line that starts with the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3508", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with   abc  and ends with a vowel", "source": "line that starts with the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3768", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with character", "source": "line that starts with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_3914", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with abc and end with 123", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4094", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that starts with character", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4161", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4165", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with abc and then continues with some character", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4339", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with  123 ", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4499", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins and stops with 123", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4621", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line creates wabc word and concludes wuppercase letter", "source": "line that starts with the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4734", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with the word abc and ending with a vowel", "source": "line that starts with the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4777", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the sequence abc and ends with any character", "source": "line that starts with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4834", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and ending with 123", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_5071", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with   abc  and ends with a letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5361", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines begin with abc and end with a letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5362", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and terminates with a letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5481", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "which line both begins and ends with abc", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5715", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that starts with character", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6353", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the smaller word abc and ending with a character", "source": "line that starts with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_17", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and terminates with a character", "source": "line that starts with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_91", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with  abc ", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_501", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc and a character in the beginning", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1189", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc ending with any letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_test_1264", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start and end with abc", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_1321", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the word abc and has a character at the end", "source": "line that starts with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_test_1350", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  abc  and ends with a vowel", "source": "line that starts with the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_1489", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with word abc", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1518", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with two letters", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_33", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two words", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_52", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending in two vowels", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_113", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with a least two vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_166", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines with two words or less", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_305", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_318", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two letters", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_352", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two capital letter", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_367", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_392", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that comes to an end with a minimum of two letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_456", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending two or more digits", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_467", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two capital letter", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_697", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with one or two numbers", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_861", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that concludes with at least two words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_865", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with a minimum of two vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_915", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begins with at most 2 words", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_973", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two characters at most", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1053", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two number", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1084", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ends with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1108", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that conclude with two lowercase letters", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1110", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line terminating with no fewer than two numbers", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1136", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two digits", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1149", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after 2 numbers", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1181", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two vowel", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1370", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with at least 2 vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1381", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two digit", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1412", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what is a line that ends with two letters", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1421", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two word", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1424", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two digits", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1461", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no fewer than two vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1702", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with two vowels", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1747", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what lines end with two or more digits", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1757", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that comes to an end with a maximum of two words", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1791", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two capital letters", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1803", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that concludes with two vowels", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1812", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with no more than two vowels", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_1922", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "two vowels terminate the line", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1999", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two character", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2022", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with two or more words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2091", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with at least two characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2196", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line must finish off with two capital letters", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2241", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with two or more lowercase letters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2256", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with at least two vowels", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2307", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that contains at least two numbers at the end", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2339", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two letter", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2353", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two word", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2355", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that comes to an end with two uppercase letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2459", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two lowercase letter", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2496", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two letter", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2539", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two digit", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2540", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after at least 2 lowercase letters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2542", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two character", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2548", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "no fewer than two capital letters should end that line", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2558", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after at least 2 capital letters", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2612", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has at least two digits at the end", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2637", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with two or more characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2686", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line where two numbers appear at the end", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2700", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that terminates with two capital letters", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2741", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two letter", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2742", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that stops with any two digits or less", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_2747", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which line finishes with two numbers", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2815", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two number", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_2981", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines ending with two or more digits", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3069", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two numbers", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3091", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with two or more letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3104", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that has two letters at the end", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3131", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two character", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3151", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two or more lowercase letters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3219", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3280", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ends with a minimum of two words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3309", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two word", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3407", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with two words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3418", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with no more than two digits", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3423", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with three or more characters", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3455", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line concludes with two vowels maximum", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3575", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line with two lowercase letters at the end", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3593", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two capital letters", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3680", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with at least two capital  letters", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3728", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after 2 words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3775", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that terminates with two words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3785", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with two or more characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3807", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what is a line that ends with two letters at the most at the end", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3852", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with no more than two vowels", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3938", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after at least 2 characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3957", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with at most 2 capital letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4075", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with at least two capital letters", "source": "line that ends with at least two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4089", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two digit", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4229", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with two letters at the end", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4494", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two vowel", "source": "line that ends with at least two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4531", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has two or more numbers at the end", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4666", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with no more than two capital letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4687", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with 2 digits", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4701", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has at least two lowercase letter at the end", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4708", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines with two digits or less", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4717", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line of words with the last two to end with lowercase letters", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4735", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two or fewer numbers", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_4739", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that comes to an end with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_4850", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two or more lowercase characters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_4907", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines with two or fewer lowercase letters", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5003", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two lowercase letter", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5021", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two word", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5060", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with has two characters or less at the end", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5073", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with two or more different letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5092", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line needs to end with two capital letters", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5138", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with two numbers or less", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5255", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two lowercase letters", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5313", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5377", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with one or two digits", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5389", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending two or more numbers", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5447", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with two letters", "source": "line that ends with two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5461", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with at most two numbers", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5462", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two character", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5477", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after at least 2 words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5491", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with at least 2 letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5494", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes with two or more characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5505", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line has at least two lowercase letters at the end", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5652", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two capital letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5668", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two capital letter", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5708", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with no more than two lowercase letters", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5813", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what lines end with two characters", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_5852", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with two or more numbers", "source": "line that ends with at least two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5923", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two numbers", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_6046", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with at least two digits", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_6092", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what ends with at least two words", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_6117", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with no more than two letters", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_6190", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line ending with no more than two lowercase letters", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_5", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two digit", "source": "line that ends with at most two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_72", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that has two vowels or less at the end", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_184", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that terminate in no more than two words", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_186", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that terminates with two numbers", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_310", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that concludes with a maximum of two vowels", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_596", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two or less numbers", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_604", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two capital letter", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_727", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that have two numbers at the end", "source": "line that ends with two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_796", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two or less capital letters", "source": "line that ends with at most two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_983", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that end with a word that is two letters or less", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1016", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two letters or less", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1037", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two digit", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1107", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops with at most 2 lowercase letter", "source": "line that ends with at most two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1169", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that is ended by any two lowercase letters", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1187", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with two vowels", "source": "line that ends with two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1208", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with two character", "source": "line that ends with two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1306", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that finishes at least two letters", "source": "line that ends with at least two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1310", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line with two capital letters at the end", "source": "line that ends with two capital letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1460", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at most two vowel", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1474", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the line ends with two consecutive digits", "source": "line that ends with two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_test_1478", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what is a line that ends with two characters at the most", "source": "line that ends with at most two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1484", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that is ended by two letters or less", "source": "line that ends with at most two letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_1577", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line using a character followed by 123", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_143", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line where the word abc appears after a number", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_297", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what line has a letter just before the number 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_507", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  before the number  123 ", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_780", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines in which 123 follows a vowel", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_858", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that have abc right after some digits", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_951", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line where includes a big letter before the number 123", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_963", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that has any letter before the number 123", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1018", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that includes a letter followed by the number 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1059", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  before the number  123 ", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1114", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what line contains alphabets before 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1141", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses character before 123", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1151", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line with the number 123 preceded by a capital letter", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1152", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line where a character precedes the number 123", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1251", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that contains a vowel before  123 ", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1523", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line containing abc prior to 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1653", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that have a capital letter before 123", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1700", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line includes 123 which precedes number 123", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2076", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc that is before 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2255", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a character before 123", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2294", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has abc then 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2350", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what is a line that has abc that comes before the number 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2576", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains character before the number  123 ", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2884", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that contains a lowercase letter before  123 ", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2993", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses vowels before 123", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3114", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line where 123 precedes the number 123", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3225", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  before the number  123 ", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3283", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a capital letter before the number 123", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3674", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that have a lowercase letter before 123", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4315", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line containing a digit followed by the word abc", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4495", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel before the number  123 ", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4584", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what line is it that has the word abc in it coming after a digit", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4632", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line containing a letter preceding the number 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4787", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses 123 in front of 123", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4961", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the digit 123 after a small letter", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5213", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line where the sequence 123 appears after a lowercase letter", "source": "line that contains lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5407", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line has capital letter before 123", "source": "line that contains capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5525", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the 123 after the digit 123", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5749", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines where the number 123 appear after any character", "source": "line that contains character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5841", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "what lines contains   123  before   123 ", "source": "line that contains `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6115", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  after digit", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_38", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that includes letter before the number 123", "source": "line that contains letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_398", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel before 123", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_459", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line with abc followed by 123", "source": "line that contains `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_686", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a number before the word abc", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_807", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  after digit", "source": "line that contains the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1022", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines where vowels appear before   123  does", "source": "line that contains vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1194", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains at least two letter", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_11", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines where at least two capital letters appear", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_29", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two digit", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_92", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines with at least two characters", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_140", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 capital letters", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_169", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line has at least two letters in it", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_196", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two numbers", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_212", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "state a line that has at least two digits", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_270", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two digit", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_299", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that include two or more vowels", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_546", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at least two digits", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_751", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what line that contains two word", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_754", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that contains at least two lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_755", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two digits or less", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_827", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what line contains at most two numbers", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_836", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two number", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_907", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at least two words in it", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_939", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two capital letter", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_979", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a two character or longer line", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1074", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two vowel", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1103", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line with two numbers", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1122", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two digit", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1132", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line with two or more numbers in it", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1140", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two character", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1175", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line where two letters appear", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1178", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two vowel", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1208", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two letter", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1243", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most two lowercase letters", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1284", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that only has two characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1301", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what line contains at least two capital letters", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1327", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line including no fewer than two capital letters", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1398", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that have more than one character", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1400", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes a max of two characters", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1452", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes a maximum of two small letters", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1519", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two words or less", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1551", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two number", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1594", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two or more lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1626", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has a maximum to two uppercase letters", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1630", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that contains exactly two numbers", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1636", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that have two or more lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1643", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line containing two or more letters", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_1736", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two capital letters or less in it", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1788", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has two digits at most", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1814", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that include two capital letters", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_1833", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 numbers", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1900", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two character", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_1961", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes two small letters", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_2011", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 words", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_2092", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at most two letters", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_2333", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that have two characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_2357", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes two digits", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_2384", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using one or two numbers", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_2514", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two number", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_2575", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two or more words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_2726", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two character", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_2782", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that has two or more numbers", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_2879", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two lowercase letter", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_3035", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two lowercase letter", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3235", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line containing any two characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3265", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what line conatins two lower case letters", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3341", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that contain two vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3342", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two lowercase letter", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_3359", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "the line must be comprised of at least two words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3383", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two or more digits", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3476", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines with two capital letters", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3526", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes at least two words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3551", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two digits in it", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3562", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes two characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3567", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "whats a line with two plus vowels", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3647", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line using two lowercase letters", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3683", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that has two capital letters", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3769", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line containing at least two words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_3797", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has a maximum of two vowels", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_3900", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses two capital letters", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_3919", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "which line has at least two vowels in it", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4110", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line containing two letters", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4170", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that contain two or more capital letters", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4201", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that includes two words", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4269", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with no more than two lower case letters", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4272", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two vowel", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4316", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line has two vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4331", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that include no more than two words", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4349", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at least two words", "source": "line that contains at least two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4427", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two vowel", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4459", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has two capitals at most", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4534", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that contain two or more numbers", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4572", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with at least 2 lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4574", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 lowercase letters", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_4597", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two capital letter", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4661", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has two or fewer lowercase letters", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4670", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what  line that contains at most two vowel", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4707", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes a maximum of two characters", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4779", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses 2 lowercase letters", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4919", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that includes no more than two vowels", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_4968", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two character", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_4997", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two or less digits", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5065", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at most two letters", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5145", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at the most two words in it", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5242", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at least two digits in it", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_5278", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses 2 digits", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5360", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "is there a line that has two digits minimum inside of it", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_5392", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line where two numbers are had", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5456", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two letter", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5518", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "which line has in it at the most two digits", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5520", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line with two special characters", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5580", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two character", "source": "line that contains two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5679", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two digit", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5691", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses 2 vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5792", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line containing two numbers", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5889", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most two character", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5905", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 vowel", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_5920", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line including exactly two vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_5951", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that includes no more than two numbers", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_6052", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two words", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_6090", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two lowercase letters or less in it", "source": "line that contains at most two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_6091", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines which include at least two capital letters", "source": "line that contains at least two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_train_6127", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that contains two letters", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_6165", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "which line has two lowercase letters somewhere in it", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_6307", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most 2 digits", "source": "line that contains at most two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_train_6345", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses 2 words", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_train_6351", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains no more than two words", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_54", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at most two letter", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_69", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two lowercase letter", "source": "line that contains at least two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_76", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two lowercase letter", "source": "line that contains two lowercase letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_99", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two word", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_249", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "a line that has no more than two capital letters", "source": "line that contains at most two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_250", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at least two letters in it", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_383", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with no more than two characters in it", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_419", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two word", "source": "line that contains at most two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_488", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two digit", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_556", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two character", "source": "line that contains at most two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_573", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 letters", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_578", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that utilize two vowels", "source": "line that contains two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_698", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has at least two vowels", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_710", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 vowels", "source": "line that contains at least two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_781", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 digits", "source": "line that contains at least two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_816", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with at least two characters in it", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_820", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses two numbers", "source": "line that contains two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_824", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line includes two vowels maximum", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_866", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two capital letter", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_869", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what is a line that has at least two characters in it", "source": "line that contains at least two character", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_878", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two capital letters or less", "source": "line that contains two capital letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_912", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that uses at least 2 number", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_922", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two letter", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_976", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "find a line that contains a maximum of two letters in it", "source": "line that contains at most two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_1058", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "lines that include no more than two vowels", "source": "line that contains at most two vowel", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_1073", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that has two or more numbers", "source": "line that contains at least two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_1135", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line with two letters", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_1201", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that includes at least two lettersq", "source": "line that contains two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_1258", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at most two number", "source": "line that contains at most two number", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[0-9]+\\\\\\\\b)) (string \")\") (string {0,) (call .toString (number 2)) (string }))", "qid": "regex_test_1271", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two letters", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_1324", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains at least two letter", "source": "line that contains at least two letter", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,}))", "qid": "regex_test_1513", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that uses two digits", "source": "line that contains two digit", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_1529", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "line that contains two word", "source": "line that contains two word", "target": "(call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b)) (string \")\") (string {) (call .toString (number 2)) (string }))", "qid": "regex_test_1539", "anonymized_target": "(call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))"}
{"paraphrased": "what number does not end with abc", "source": "number that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_12", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that does not end in a lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_57", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that dont end in a lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_63", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number concludes wo small letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_76", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not begin with a capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_83", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not begin with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_117", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not begin with 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_153", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt start out with a capital", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_330", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not start with a letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_347", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not begin with abc", "source": "number that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number doesnt stop with a vowel", "source": "number that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_532", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with something other than 123", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_720", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that doesnt end with a lowercase letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_829", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt end with abc", "source": "number that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_871", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number excluding the digits 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1069", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not being with abc", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1145", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that does not end in a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1153", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not end with a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1159", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not start with  abc ", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1161", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with vowel", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1201", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not begin with a lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1220", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not end with the number 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with  123 ", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1298", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which numbers dont end with capital letters", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number not ending with a capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1360", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "is there a numeral that does not begin with a small letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1384", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that does not end in a vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1472", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that does not have 123 at the end of it", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1648", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers whose final character is not a vowel", "source": "number that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1832", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not begin with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1835", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not start with a capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1837", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not stop after a vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2218", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not start with a letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2230", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not end with a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2238", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not start with a vowel", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2268", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number does not start with   abc  ", "source": "number that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2378", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not start with a vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2423", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2431", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number not ending with a vowel", "source": "number that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with lowercase letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2497", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not ending with a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2565", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with something other than abc", "source": "number that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2604", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2608", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any number that does not end with a lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2642", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2702", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that is finished with a capital letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2734", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words do not begins with   123 ", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2881", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that does not start with a capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2886", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not begin with a vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2914", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number starting with a consonant", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2966", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not end with a vowel", "source": "number that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3026", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with anything but 123", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3040", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt have 123 at the end", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3066", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not end with 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3099", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not have a vowel for the last character", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3100", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any number that doesnt begin with 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3127", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word does not ends with a capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3223", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number that does not end in 123", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3340", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with  123 ", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3393", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not begin with a vowel", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3432", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number does not end with a letter", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3463", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words whose first character is not a vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3660", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not begin with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3704", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with  abc ", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3834", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not begin with 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3956", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that does not end with 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4188", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not end with a letter", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not start with a vowel", "source": "number that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4295", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not end with 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4337", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not start with 123", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4346", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not end with a capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4417", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4425", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4471", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not begin with a vowel", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4600", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not begin with abc", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4629", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not begin with abc", "source": "number that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4757", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with  abc ", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4781", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number begins wo small letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4839", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not end with a lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4843", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not begin with a lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4999", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5013", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a consenant", "source": "word that not starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5132", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that isnt ended with a capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5137", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5163", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not stop with abc", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5336", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number tthat does not end with abc", "source": "number that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5399", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words dont start off abc", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5413", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number not using a lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5454", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with capital letter", "source": "word that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5809", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not end with a 123", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5855", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with  123 ", "source": "number that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5861", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that doesnt end with abc", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5862", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not start with abc", "source": "number that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5877", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with  123 ", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5897", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not start with a lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with  abc ", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6004", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which number doesnt start with letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6041", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words do not begin with 123", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6120", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word does not start with a lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6207", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the word that does not start with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6247", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which word does not end with a vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6255", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not begin with 123", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6349", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not begin with a letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6371", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "nubmer that does not end with a letter", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6374", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not start with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_45", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending without a vowel", "source": "word that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words does not have   abc  at its end", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_193", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt start with any letter", "source": "number that not starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_212", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not stop after a lowercase letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_363", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not end with abc", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_366", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_397", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that dont stop with any letters", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_473", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_482", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word does not end with abc", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_637", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_644", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number does not end with a letter", "source": "number that not ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_662", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not stop after 123", "source": "word that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_754", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that doesnt start with some lowercase letter", "source": "number that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_985", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that does not have  a small letter at the beginning", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1064", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not conclude in the number sequence 123", "source": "number that not ends with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1283", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word that doesnt start with abc", "source": "word that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1327", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number does not end with a capital letter", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1348", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not begin with a lowercase letter", "source": "word that not starts with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1353", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a capital letter number or character", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1388", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not ending with lowercase letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1446", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that has a digit before a vowel at the end", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_7", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with a capital letter after a digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_82", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line ends with a capital letter and comes before a number", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_106", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  123  after digit", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_346", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with abc before a number", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_390", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has abc at its end before a number", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_516", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a digital followed by a letter", "source": "line that ends with letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_535", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with capital letter after digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_572", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with character after digit", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_736", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line ends with a letter before a digit", "source": "line that ends with letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_819", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that contains a digit and ends with a vowel", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_850", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with vowel after digit", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_882", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with a digit followed by a lowercase letter", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_914", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a digit and then a character", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_941", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with a letter after any digit", "source": "line that ends with letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_1044", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with vowels before digits", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1199", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a lowercase letter and then a digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1214", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line stops with some digit then abc", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_1233", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "which lines terminate with a abc and then a number", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1274", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line with a digit followed by 123", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_1371", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with capital letters then digits", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1490", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with lowercase letter after digit", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_1917", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that conclude with a character directly after the digit", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_1955", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines where lowercase letters appear after a number", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_2059", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with 123 after a digit", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_2090", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends letter digit in sequence", "source": "line that ends with letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_2182", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with a capital letter followed by a digit", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_2222", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that ends with any character after a digit", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_2319", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that finishes with a lowercase letter after a digit", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_2493", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that a digit followed by a lowercase letter", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_2620", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  123  before digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_2705", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with a digit followed by a lowercase letter", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_2791", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a digit and then 123", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_2824", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a digit followed by a letter", "source": "line that ends with letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_3004", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  123  before a digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3037", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has 123 at the end before a number", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3106", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with lowercase letter before digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3125", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that finishes with a letter before a digit", "source": "line that ends with letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3204", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  abc  before digit", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3371", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what is a line that ends with abc coming after the digit", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_3601", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that has 123 at the end and following the digit", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_3791", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with a character after a digit", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_3826", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with a digit followed by a vowel", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_3939", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with digit followed by abc", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_3960", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that conclude with the letter sequence abc after any digit", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_4043", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with a character before a digit", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4091", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a number followed by a capital letter", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_4107", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what is a line that ends with a capital letter that comes before a digit", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4192", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with capital letter before digit", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4203", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that comes to an end with a number after a character", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4326", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  abc  after digit", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_4409", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that terminates with a vowel then a digit", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4421", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that finishes with abc prior to a digit", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4676", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that stops with a vowel after any digits", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_4769", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line ends in 123 that comes after a digit", "source": "line that ends with `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))))", "qid": "regex_train_5149", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with capital letter before digit", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5330", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that ends with a lowercase number that comes before a digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5412", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has a capital letter and digit at the end", "source": "line that ends with capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5418", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line ends with a capital letter that comes after a digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_5542", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a letter preceding a digit", "source": "line that ends with letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5675", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with lowercase letter after digit", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_5934", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with 123 before a digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5978", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has a lowercase letter and digit at the end", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_6044", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with a digit preceded by a character", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_6045", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line finishing off with a digit followed by a letter", "source": "line that ends with letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_6094", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that begins with a capital letter that is after a digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_6180", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a lowercase letter followed by a digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_6338", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what shows a digit before ending with a vowel", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_test_71", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a digit before a vowel on a line", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_test_113", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that includes a number after a small letter", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_187", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "which line ends with 123 before the digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_208", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ended by 123 and a digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_245", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with any digit predicated by a vowel", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_275", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with capital letter after digit", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_test_417", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with vowel before digit", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_603", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that finishes with a character before a digit", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_706", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that terminate with abc directly before a digit", "source": "line that ends with `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_729", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a digit followed by a character", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_test_892", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line concludes wcharacter then digit", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_1084", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with vowel before digit", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_1294", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with a vowel before a digit", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_1296", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with a capital letter after a number", "source": "line that ends with capital letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_test_1404", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
