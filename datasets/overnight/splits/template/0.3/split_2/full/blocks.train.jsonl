{"paraphrased": "find me all 3 inch high special blocks", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_392", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a 3 inch long special block", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_454", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which one is a 3 inch special block", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_510", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that is special and whose length is 3 inches", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_542", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch wide special block", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_792", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all special 3 inch long blocks", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_938", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all special blocks that are 3 inches wide", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1368", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all the special blocks that are 3 inches long", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1488", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "is  there a special block with a height that is only 3 inches", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1536", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which special block is 3 inches wide", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1548", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all special blocks with length less than 3 inches", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_188", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that is special and whose height is 3 inches", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_277", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the 3 inch tall special block", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_297", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block above the least blocks", "source": "block that the least number of block is below", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string below)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_3", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick that is to the furthest left", "source": "block that the most number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_43", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block has the largest number of blocks to its left", "source": "block that the most number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_57", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block to the right of the least amount of blocks", "source": "block that the least number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_181", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "locate the block with the least amount of blocks beside it on the left", "source": "block that the least number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_198", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the single block that is located to the right of the largest number of blocks", "source": "block that the most number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_396", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick with the least number of blocks to the left of it", "source": "block that the least number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_460", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is to the left of the most blocks", "source": "block that the most number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_497", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above least number of blocks", "source": "block that the least number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_559", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick at the very right", "source": "block that the most number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_572", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that the most number of block is left of", "source": "block that the most number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_663", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is to the left of the least blocks", "source": "block that the least number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_714", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that the least number of block is above", "source": "block that the least number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_760", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the left most block", "source": "block that the most number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_783", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is to the right of the least blocks", "source": "block that the least number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_833", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that the most number of block is below", "source": "block that the most number of block is below", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string below)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_951", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is below the most populated bricks", "source": "block that the most number of block is below", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string below)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_993", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block is closest to the bottom", "source": "block that the most number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_996", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block which is at the right of most number of blocks", "source": "block that the most number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1111", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block that is above the smallest group of blocks", "source": "block that the least number of block is below", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string below)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1164", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is farthest to the left", "source": "block that the least number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1174", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is below the most blocks", "source": "block that the most number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1186", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block has the highest number of blocks below it", "source": "block that the most number of block is below", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string below)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1191", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that the least number of block is right of", "source": "block that the least number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1267", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that the least number of block is left of", "source": "block that the least number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1326", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block that has the most blocks to its right", "source": "block that the most number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1370", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block with the least number of blocks below it", "source": "block that the least number of block is below", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string below)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1381", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick with the least blocks above it", "source": "block that the least number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1451", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block is at the very bottom", "source": "block that the least number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1581", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is left of the least number of blocks", "source": "block that the least number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1591", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block that is above the most blocks", "source": "block that the most number of block is below", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string below)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_31", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is to the right of the most blocks", "source": "block that the most number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_65", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block buried under the smallest number of other blocks", "source": "block that the least number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_160", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick with the most blocks above it", "source": "block that the most number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_287", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick with the least number of blocks to the right", "source": "block that the least number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_336", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is below the fewest blocks", "source": "block that the least number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_371", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is above the most bricks", "source": "block that the most number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_391", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block thats the same width as block 1", "source": "block whose width is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_4", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at most height of block 1", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_6", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks with a smaller width than the length of block 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_8", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is smaller than length of block 1", "source": "block whose height is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks shorter than block 1", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_12", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block at most as tall as block 1s width", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_13", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with a width that is less than the height of block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_19", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a length shorter than the length of brick 1", "source": "block whose length is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_67", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block taller or same height as the width of block 1", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_77", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a brick that is at least as wide as brick 1 is long", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_78", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block more wider than length of block 1", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_98", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is at least height of block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is at least height of block 1", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_119", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is bigger than block 1", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_149", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no wider than brick 1 is long", "source": "block whose width is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block that is shorter than block 1", "source": "block whose length is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block that is shorter than block one", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "is there a block with a length whose measurement is equivalent to that of  block 1s height", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_183", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block with equal or less width than block 1", "source": "block whose width is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is taller than block 1", "source": "block whose height is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_206", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks as high as block 1 is long", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is minimum the height of block 1", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block wider than block 1 is tall", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block has height less than or equal to the length of block 1", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_239", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks as long as block 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_243", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at least width of block 1", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_249", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is smaller than length of block 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_255", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what brick is at least as high as brick 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at most as long as block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_308", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks wider than the height of block 1", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_314", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is at least as high as block 1 is wide", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_317", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block taller than block 1 is wide", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block wider than block 1", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_353", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is longer than block 1 is wide", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_357", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks as wide or wider than block 1", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_385", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a brick that is no higher than brick 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block that is no taller in inches than the width of block 1", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_428", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is smaller than height of block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_438", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is at least the length of block 1", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_462", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as tall as block 1 is long", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_472", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is longer than brick 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_477", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the block that is shorer than block 1", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_487", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks  longer than the width of block 1", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_491", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block as wide as block 1 or wider", "source": "block whose width is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_493", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at most length of block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_499", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with a length greater than block 1 is tall", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_532", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select the blocks that have a height less than or equal to block 1s length", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_536", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "is there a block shorter in height than block 1 is wide", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_548", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block that block 1 is longer than", "source": "block whose length is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_550", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is longer than block 1 is wide", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_554", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is higher than brick 1 is long", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_557", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what blocks width is less than or equal to block 1s height", "source": "block whose width is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_564", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is wider than brick 1 is wide", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks as wide as block 1 is long", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_571", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks shorter than the width of block 1", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_573", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as long as brick 1 is wide", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_582", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose blocks wider than block 1s height", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_587", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks taller than block 1", "source": "block whose height is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_594", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate a block that is no wider than the height of block 1", "source": "block whose width is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_601", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what blocks length is smaller than block 1s width", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks taller than block 1", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_613", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is shorter than block 1", "source": "block whose height is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_616", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is as thick as block 1 is long", "source": "block whose width is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_629", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at least length of block 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_633", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is wider than block 1 is long", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_640", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "bloch longer than the length of block 1", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_648", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks that is at least as long as block 1 is tall", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_673", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block of height not more than width of block 1", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_682", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select brick whose length is more than the width of block 1", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_684", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is shorter then block 1 is long", "source": "block whose height is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_699", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the block with a length shorter than that of block 1", "source": "block whose length is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_743", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a height measurement that equals at minimum the length of block 1", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_755", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is the same height as block 1", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_756", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block that is at least the same height as block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_772", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block taller than block 1 is long", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_774", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block that is wider than block 1", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_793", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is shorter than brick 1 is high", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_795", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with a diameter that does not surpass the height of block 1", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_798", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block skinnier than block 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_834", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks as tall as the width of block 1", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_838", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "the block that is equal to the length of block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_846", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block longer than width of block 1", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_851", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find blocks that are at least as tall as block 1 is wide", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_863", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a width less than the length of brick 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_865", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is longer than block 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_894", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks wider than the width of block 1", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_900", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the block that has a height that does not surpass the height of block 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_906", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks shorter than block 1", "source": "block whose height is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_909", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks at most as long as the width of block 1", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_911", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no higher than brick 1 is wide", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_966", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find all blocks that are as long as or longer than block 1", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_995", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks at most as tall as block 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1011", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a brick whose length is at least the width of block 1", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1046", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as tall as block 1 is wide", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1069", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks longer than block 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1077", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is less thick than block 1", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1090", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is shorter than block 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1097", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a length that exceeds the width of block 1", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block has width less than or equal to block 1s length", "source": "block whose width is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1130", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no wider than brick 1", "source": "block whose width is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is larger than width of block 1", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks with a smaller width than block 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find blocks that are taller than block 1 is long", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a width smaller than the height of brick 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1195", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at least the same height as block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1204", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks taller than the length of block 1", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1218", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no longer than brick 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1220", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is taller than brick 1 is high", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1234", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as high as brick 1 is long", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1249", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is at least as wide as block 1 is tall", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1259", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks with a length shorter than the width of block 1", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1278", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block whose height is smaller than the length of block 1", "source": "block whose height is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is skinnier than the height of block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1284", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block with height less than block 1", "source": "block whose height is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1298", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block has a length smaller than block 1s width", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1306", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks whose width is shorter than the height of block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1327", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block has less than or equal length then block 1 has width", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1343", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is larger than width of block 1", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks shorter than block 1 is long", "source": "block whose height is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at most as tall as block 1", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1356", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a diameter less than that of block 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1361", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is thinner then block 1 is long", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1427", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is smaller than block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1430", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is taller than brick 1", "source": "block whose height is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1433", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block that has a width that is the same width of block 1", "source": "block whose width is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1445", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "is there a block that is taller than block 1", "source": "block whose height is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1458", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is larger than height of block 1", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1478", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is not as thick as block 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1481", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block with a length larger than the length of block 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1484", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as long as block 1s height", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1486", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block who has width greater than or equal to block 1s height", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1495", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no longer than brick 1 is wide", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1518", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks at least as long as block 1 is wide", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1519", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block shorter than the width of block 1", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1532", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks at least as wide as block 1 is tall", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1556", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at most as wide as block 1", "source": "block whose width is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1562", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at most width of block 1", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1573", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a wider block than block 1", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1582", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a brick that is wider than brick 1 is high", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1593", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is at most width of block 1", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_6", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a height that equals more than the width of block 1", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_10", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is not as long as block 1 is tall", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_13", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block as long or longer then block 1 is wide", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_17", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at most as wide at block 1 is tall", "source": "block whose width is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_24", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block taller than the width of block 1", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks taller than the width of block 1", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_38", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is at leas the length of block 1", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_40", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select the block that is equal or bigger than block 1", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_42", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is bigger than block 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_47", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no taller than brick 1 is long", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_49", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a height that is equal to or greater than the height of block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what blocks length is less than or equal to block 1s height", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_97", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block with width equal or greater than block 1 is long", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_101", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block as long or longer than block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_121", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as long as brick 1 is tall", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is the same or below brick 1", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with width less than or equal to block 1", "source": "block whose width is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no longer than brick 1 is high", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_157", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks taller than the length of block 1", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block less wider than the length of block 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a width smaller than the width of brick 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_165", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with a height smaller than the height of block 1", "source": "block whose height is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is at least the width of block 1", "source": "block whose width is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_181", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a smallest block than block 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no wider than brick 1 is tall", "source": "block whose width is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_196", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as long as brick 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block thicker than the length of block 1", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_225", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a length shorter than the height of brick 1", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_252", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block not longer than block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_261", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what blocks have a width larger than the height of block 1", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_265", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is the same length as block 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as wide as brick 1", "source": "block whose width is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_278", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select all which is less than the width of block 1", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_308", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is not more than block 1", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_323", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is longer than brick 1 is tall", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_332", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is less than width of block 1", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_340", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks at least as tall as block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_358", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as tall as block 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_361", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate a block that is longer tha block 1 is tall", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_367", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as long as block 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "left of special block", "source": "block that block that is special is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_23", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block above special block", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_50", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that are special", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me a block that has a special block to its right", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_336", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block below special block", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_393", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which is the block to the right of special block", "source": "block that block that is special is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_415", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks left of something", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_650", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the block above special block", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_672", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "right of special block", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1088", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks that are above", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1215", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks that is below", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "below special block", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_5", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the block on the left side of the special block", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks right of something", "source": "block that block that is special is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_342", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the block to the right of the block that is to the left of block 1", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_38", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks 2 below block 1", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_88", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is to the left of the block that block 1 is above", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is right of the block which block 1 is right of", "source": "block that is right of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_167", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of that block 1 is above", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_209", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is to the right of the block that block 1 is below", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_231", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is to the left of the block that block 1 is below", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below and two left of block 1", "source": "block that is below block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_325", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me a block that block 1 is to the left of", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block left and below block 1", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two above block 1", "source": "block that is above block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_400", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "see block above block 1 and get block left of that one", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_411", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "two blocks right of block 1", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_494", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is right and below block 1", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_496", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2nd left of block 1", "source": "block that is left of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_503", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block which is at the left of the block below block 1", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_590", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of the block that block 1 is above", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_602", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above the block at right of block 1", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_626", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is below the block that block 1 is below", "source": "block that is below block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_662", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block up and left from block 1", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "second left of block 1", "source": "block that is left of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_686", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is 2 blocks below block 1", "source": "block that is below block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_727", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above that block 1 is below", "source": "block that is above block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_766", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block is at the second left of block 1", "source": "block that is left of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_829", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is to the right of the block that block 1 is above", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_930", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is above the block that is to the left of block 1", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_953", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks which is left and above block 1", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_970", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what blocks are above the block that is to the right of block 1", "source": "block that is above block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1033", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is below the block that is below block 1", "source": "block that is below block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1059", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of that block 1 is below", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1096", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is below the block which block 1 is above", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is above the block of block1 ", "source": "block that is above block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1152", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks over that block 1 is above", "source": "block that is above block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1153", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is above the block that is below block 1", "source": "block that is above block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks right of block 1", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1247", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is below a block that block 1 is to the right of", "source": "block that is below block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1264", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is above the block that block 1 is below", "source": "block that is above block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block right of block 1", "source": "block that is below block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks over that block 1 is left of", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1320", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the left of a block that block 1 is left of", "source": "block that is left of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1332", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "see block below block 1 and choose the one left of it", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1338", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is below the block that block 1 is to the left of", "source": "block that is below block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1388", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block below the block under block 1", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is below which block 1 is right of", "source": "block that is below block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above that block 1 is right of", "source": "block that is above block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1431", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of the block that block 1 is to the right of", "source": "block that is right of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1439", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two up from block 1", "source": "block that is above block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1442", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block right of the block below block 1", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the left of the block that block 1 is below", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1506", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "above block 1 to the left", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1528", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below and to right of block 1", "source": "block that is below block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1552", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of the block that block 1 is below", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1564", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right to whatever block 1 is left of", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1576", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is left of the block that block 1 is right of", "source": "block that is left of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_11", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is below the block that block 1 is to the right of", "source": "block that is below block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_18", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is above the block that block 1 is to the right of", "source": "block that is above block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_44", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks 2 left of block 1", "source": "block that is left of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_test_55", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "get me the blocks to the left of the block above block 1", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_test_170", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find a block that is below block 1", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_test_186", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "above block to right of block 1", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_test_219", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks below block 1", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_test_335", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of what block 1 is right of", "source": "block that is left of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "how wide is block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_39", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what color is block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_train_86", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what color is brick 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_train_106", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what shape is block 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_train_115", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "height of block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_176", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "find me all blocks with the shape of block 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_train_248", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of block 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_train_389", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the height of brick 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_468", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how tall is block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_509", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "describe the shape of block 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_train_599", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of block 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_train_638", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the width of block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_644", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the color of block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_train_726", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the height of block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_843", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "select all blocks of length 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_train_883", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the color of block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_train_884", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of block 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_train_1169", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "width of block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_1262", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how tall is block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_1273", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what shape is brick 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_train_1314", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how wide is block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_1357", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the height of block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_1367", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the width of block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_1578", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the shape of block 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_test_113", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the color of block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_test_207", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of brick 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_test_208", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the width of block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_test_248", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "color of block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_test_263", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the blocks height", "source": "total height of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_130", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the total height of the blocks", "source": "total height of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_142", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "average height of block", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_263", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average width of the blocks", "source": "average width of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_457", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the average height of a block", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_473", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the width of the block", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_498", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average width of the bricks", "source": "average width of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_545", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total length of the blocks", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_552", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average length of the bricks", "source": "average length of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_574", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me a block with average length", "source": "average length of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_618", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total width of the blocks", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_688", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the length of the block", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_737", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total width of the brick", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_804", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the height of an average block", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_847", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how long is the block", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_1056", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "total length of block", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_1093", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the height of the block", "source": "total height of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1144", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total height of the blocks", "source": "total height of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1256", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total width of the block", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_1323", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average height of a brick", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1402", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average block width", "source": "average width of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_1429", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average height of the blocks", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1475", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average height of the bricks", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1490", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "total width of blocks", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_1575", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average width of a block", "source": "average width of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_test_214", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "average length of block", "source": "average length of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_test_280", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average length of a block", "source": "average length of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_test_303", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total length of the brick", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_test_349", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block above and left of block 1", "source": "block that is above block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_37", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks to the right and left of block 1", "source": "block that is left of block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_40", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that has a shape of a pyramid and is to the right of block 1", "source": "block whose shape is a pyramid and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_48", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the left of block 1", "source": "block that is left of block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_147", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block on the right side of block 1", "source": "block that is right of block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_174", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below that block 1 is above", "source": "block that is below block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_212", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the right and above block 1", "source": "block that is right of block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_229", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is above and to the left of block 1 ", "source": "block that is above block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_267", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and rigth from block 1", "source": "block that is right of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_296", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the right and above block 1", "source": "block that is right of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_301", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the pyramidshaped block below block 1", "source": "block whose shape is a pyramid and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_365", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right of block 1", "source": "block that is right of block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_377", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks right of block 1 that is above it", "source": "block that is right of block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_407", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is below block 1", "source": "block that is below block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_421", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below and to the right of block 1", "source": "block that is below block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_440", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is to the left of the block that block 1 is above", "source": "block that is left of block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_476", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks which block 1 is right of", "source": "block whose shape is a pyramid and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_478", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above block 1", "source": "block that is above block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_519", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block below block 1", "source": "block that is below block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_527", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above and to the right of block 1", "source": "block that is above block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_541", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that is left of block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_546", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is in the shape of a pyramid that block 1 is to the right of", "source": "block whose shape is a pyramid and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_622", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above block one and to the right", "source": "block that is right of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_687", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "below and right of block 1", "source": "block that is right of block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_712", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block below and to left of block 1", "source": "block that is below block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_735", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks right of block 1", "source": "block that is right of block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_738", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block below block 1", "source": "block that is below block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_799", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramid blocks are above block 1", "source": "block whose shape is a pyramid and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_800", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that is left of block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_801", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above block 1", "source": "block that is above block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_803", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that has block 1 above and left", "source": "block that is right of block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_810", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks left and above block 1", "source": "block that is left of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_819", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks to the right and above block 1", "source": "block that is right of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_922", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block below block 1", "source": "block whose shape is a pyramid and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_959", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block left of block 1", "source": "block that is left of block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1060", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and to the left of block 1", "source": "block that is left of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1131", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below which block 1 is right of", "source": "block that is below block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1132", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block left of and below block 1", "source": "block that is left of block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1165", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below block 1 which block 1 is also below", "source": "block that is below block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1200", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "get me a block above and to the left of block 1", "source": "block that is left of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1303", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block left and above block 1", "source": "block that is left of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1359", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block left and above block 1", "source": "block that is right of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1393", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks on the right of and below block 1", "source": "block that is right of block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1450", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 at its left and right", "source": "block that is right of block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1544", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above that is left of block 1", "source": "block that is left of block 1 and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1551", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block to left of block 1", "source": "block whose shape is a pyramid and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_12", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select block that is below block 1 and block that is above block 1", "source": "block that is below block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_53", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is to the right of block 1", "source": "block that is right of block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_59", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the left and above block 1", "source": "block that is above block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_77", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is below and to the left of block 1 ", "source": "block that is below block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_87", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the left of the block that block 1 is to the right of", "source": "block that is left of block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_98", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid shaped block left of block 1", "source": "block whose shape is a pyramid and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_127", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks right of block 1 which block 1 is left of", "source": "block that is right of block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_156", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is left of block 1", "source": "block that is left of block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_233", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 above and below", "source": "block that is below block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_298", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "below and to the right of block 1", "source": "block that is below block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_307", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "look left for block 1 and get the pyramid block", "source": "block whose shape is a pyramid and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_394", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what blocks are special and are below block 1", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_134", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that block 1 is under", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_153", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a special block below block 1", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_230", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "special block to right of block 1", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_313", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks  below block 1", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_322", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that block 1 is right of", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_458", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that are below block 1", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_645", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find special blocks with block 1 above them", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_837", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the special block in the left of block 1", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_882", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is special and has block 1 on its right", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1031", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the special block above block 1", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1418", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "look right of block 1 and get the special block", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1434", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "special block left of block 1", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_23", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that are to the right of block 1", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_96", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a special block above block 1 ", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_206", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is special and left of block 1", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_275", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is special and is to the left of block 1", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_282", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "number of block", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_417", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of bricks", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_544", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many blocks are there", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_723", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of blocks", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_963", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of the block", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1118", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "tell me the number of blocks", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1355", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the longest brick", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_train_28", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "choose the brick with the smallest width", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_125", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the shortest block", "source": "block that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string length))))", "qid": "blocks_train_137", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the block with the biggest width", "source": "block that has the largest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string width))))", "qid": "blocks_train_168", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what block has the greatest height", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_188", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block has the shortest length", "source": "block that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string length))))", "qid": "blocks_train_284", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the widest block", "source": "block that has the largest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string width))))", "qid": "blocks_train_300", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what block is not longer than any other", "source": "block that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string length))))", "qid": "blocks_train_448", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the shortest block", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_465", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block is the tallest", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_504", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "block that has the smallest width", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_619", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "block that has the smallest height", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_637", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the skinniest block", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_643", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block is the smallest", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_658", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the block that has the smallest length", "source": "block that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string length))))", "qid": "blocks_train_666", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the shortest block", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_910", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block is the shortest", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_1042", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the longest block", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_train_1159", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "block with lowest width", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_1168", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the tallest block", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_1237", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block has the largest height", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_1341", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "block that has the largest height", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_1426", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find me the block with the smallest width", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_1441", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what block is the longest", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_train_1444", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "choose the brick that is the least thick", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_1487", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the longest block", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_test_70", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the tallest block", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_test_193", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which brick is the widest", "source": "block that has the largest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string width))))", "qid": "blocks_test_296", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the widest block", "source": "block that has the largest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string width))))", "qid": "blocks_test_302", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block has the largest length", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_test_346", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "choose the block that has the same width as block 1 has height", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find the block with the same length as block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_34", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose length is length of block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_61", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks with the same shape as block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_71", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find the block that is the same height as block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_75", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what brick is as wide as brick 1 is long", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_84", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose length is width of block 1", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_129", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which block is the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_144", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks as tall as block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_186", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select a block that has the same width and height", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what brick is as long as brick 1 is wide", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_204", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "choose a block that is the same width as block 1s length", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_245", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what block is as tall as block 1 is wide", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_277", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks as tall as block 1 is long", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_328", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks with the same width as block 1", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me a block with the same width as block 1s length", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_434", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks with the same width as the length of block 1", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_482", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "is there a block with the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_495", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select a block with equivalent width to block 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_515", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select all blocks with height equal to the length of block 1", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_581", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block with the same height as block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_588", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose height is height of block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_624", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "choose a block that looks just like block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_630", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block with height equal to block 1s length", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_717", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose width is width of block 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_768", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block with same width that of block 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_796", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks as long as block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_849", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select a block with a height of 1 block width", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_881", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block as long as block 1 is wide", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_889", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find blocks with the length of block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_913", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select all bricks with length of 1", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_978", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block with same color as of block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_986", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what block is as long as block 1 is wide", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1010", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_1017", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block the same shape as block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_1099", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "choose a block which is as long as block 1 is wide", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1223", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which brick is the same shape as brick 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_1276", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which block is the same height as block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1334", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which block is the same length as block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_1375", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block as long as the height of block 1", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1406", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what block has the same width as block 1s height", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which blocks have a height equal to the width of block 1", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1483", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks as tall as block 1 is wide", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1511", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which brick is as long as brick 1 is tall", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1520", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "bricks that are the same size as brick 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1579", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find the block with the same shape as block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_1584", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose height is length of block 1", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_test_7", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks with the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_test_36", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which block is as wide as block 1 is high", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_76", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me a block with length equal to block 1s height", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_78", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select all blocks with the same width as block 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_test_126", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block with the same length as block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_test_180", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which brick is the same width as brick 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_test_264", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that is as long as block 1 is tall", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks as wide as block 1 is tall", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose shape is shape of block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_test_351", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block that has the length of block 1", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_test_382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "is there a block that is as long as block 1 is high", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_386", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block as wide as height of block 1", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "left of block 3", "source": "block that block 1 or block 2 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_49", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what block is block 1 or 2 to the right of", "source": "block that block 1 or block 2 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_64", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that blocks 1 or 2 is below", "source": "block that block 1 or block 2 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find the block that is left of block 1 or block 2", "source": "block that block 1 or block 2 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_196", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find blocks above block 1 or block 2", "source": "block that block 1 or block 2 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_289", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "select the block below block 1 and block 2", "source": "block that block 1 or block 2 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_553", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "get a block to the left of block 1 or block 2", "source": "block that block 1 or block 2 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_989", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block left of blocks 1 and 2", "source": "block that block 1 or block 2 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1038", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "right of block 1 and block 2", "source": "block that block 1 or block 2 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1084", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks below blocks 1 or 2", "source": "block that block 1 or block 2 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1091", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block that has block 1 or block 2 at right", "source": "block that block 1 or block 2 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1230", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what block is above block 2 or block 1", "source": "block that block 1 or block 2 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1269", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block below block 1 and block 2", "source": "block that block 1 or block 2 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1421", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of blocks 1 or 2", "source": "block that block 1 or block 2 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1423", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "select the blocks above block 1 and 2", "source": "block that block 1 or block 2 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1449", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "above block 1 or block 2", "source": "block that block 1 or block 2 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1452", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of block 1 or 2", "source": "block that block 1 or block 2 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_112", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block below blocks 1 and 2", "source": "block that block 1 or block 2 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_171", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "blocks that have block 1 or block 2 at left", "source": "block that block 1 or block 2 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_182", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me any pyramidshaped block", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_55", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks not right of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_train_109", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the blocks not below block 1", "source": "block that not is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "qid": "blocks_train_135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks not left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_train_136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block located to the left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_train_250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks to the left of block 1", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_321", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the pyramid blocks", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_432", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is not to the left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_train_470", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above block 1", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_train_575", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is not right of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_train_592", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is to the left of brick 1", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_635", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose shape is a pyramid", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_718", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select all pyramid blocks", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_814", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks below block 1", "source": "block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1))", "qid": "blocks_train_828", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which block is to the left of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_train_866", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the blocks right of block 1", "source": "block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1))", "qid": "blocks_train_870", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is not below brick 1", "source": "block that not is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "qid": "blocks_train_926", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the blocks that is not a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1003", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that has block 1 to its right", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1112", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a block that is not a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1115", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is left of block 1", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1138", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is not to the left of brick 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_train_1163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is not pyramid shaped", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1171", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block shaped like a pyramid", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is above block 1", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1202", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that is not above block 1", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_train_1226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is above brick 1", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select all blocks above block 1", "source": "block that not is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "qid": "blocks_train_1379", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "locate the block that has a shape other than that of a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1383", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is below brick 1", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_train_1412", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block to the right of block 1", "source": "block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1456", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks not above block 1", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_train_1460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose shape is not a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1470", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block piled on top of block 1", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1474", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is not below it", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_train_1589", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is not left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_test_32", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is right of block 1", "source": "block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1))", "qid": "blocks_test_35", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is not to the right of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_test_85", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which blocks are not above block 1", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_test_108", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that not is left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_test_227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is not shaped like a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_test_268", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that is not below block 1", "source": "block that not is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "qid": "blocks_test_290", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a block with block 1 above it", "source": "block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1))", "qid": "blocks_test_324", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block with block 1 below it", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_test_325", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the blocks that are not to the right of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_test_392", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the right of block 1 and has a length of 3 inches", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_0", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block right of block 1", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_2", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block to the left of block 1 thats 3 inches wide", "source": "block that block 1 is left of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_7", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "are there any 3inch long blocks to the right of block 1", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_41", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that block 1 is above with a width of 3 inches", "source": "block that block 1 is above and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_44", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block right of block 1 which is 3 inches high", "source": "block that block 1 is right of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_60", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block left of block 1", "source": "block that block 1 is right of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_150", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block whose width is three inches that block 1 is to the right of", "source": "block that block 1 is right of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_152", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch long blocks  that block 1 is left of", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_275", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch tall blocks which block 1 is above", "source": "block that block 1 is above and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_286", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select a block above block one that is 3 inches long", "source": "block that block 1 is above and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_299", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me the block that block 1 is below and that has a length of 3 inches", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_394", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch wide blocks above block 1", "source": "block that block 1 is below and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_409", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which is the 3 inches tall block at the left of block 1", "source": "block that block 1 is right of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_514", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a block with a width of three inches that block 1 is below", "source": "block that block 1 is below and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_562", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch long block below block 1", "source": "block that block 1 is above and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_565", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch wide block below block 1", "source": "block that block 1 is above and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_661", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inches long block at the left of block 1", "source": "block that block 1 is right of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_729", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch tall bock below block 1", "source": "block that block 1 is above and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_750", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch long blocks below block 1", "source": "block that block 1 is above and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_773", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block that is to the right of block 1 with a width of 3 inches", "source": "block that block 1 is right of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_820", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which 3 inches long block is above block 1", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_875", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inches long block which has block 1 at left", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_937", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that block 1 is to the left of and that has a height of 3 inches", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_942", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch tall blocks that block 1 is right of", "source": "block that block 1 is right of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_954", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is to the right of block 1 and has a width of 3 inches", "source": "block that block 1 is left of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1004", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is to the left of block 1 and has a total height of 3 inches", "source": "block that block 1 is right of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1055", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block below block 1 which is 3 inches long", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1062", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is below block 1 and has a height of 3 inches", "source": "block that block 1 is below and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1105", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch high block above block 1", "source": "block that block 1 is below and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1117", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch wide blocks that block 1 is above", "source": "block that block 1 is above and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1175", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is to the left of block 1 and that has a length of 3 inches", "source": "block that block 1 is right of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is above block 1 and has a height of 3 inches", "source": "block that block 1 is above and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1253", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch wide block above block 1", "source": "block that block 1 is below and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1260", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that has a width of 3 inches and is below block 1", "source": "block that block 1 is below and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1293", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which block is 3 in height and has block 1 on its left", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1318", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block has a length of 3 inches and block 1 above it", "source": "block that block 1 is above and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1335", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which block that is 3 in height has block 1 below it", "source": "block that block 1 is below and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1453", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch tall blocks that block 1 is left of", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1485", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block below block 1 and 3 inches in height", "source": "block that block 1 is above and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_141", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block above block 1", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_258", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find 3 inch block left of block 1", "source": "block that block 1 is right of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_273", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch long blocks that block 1 is below", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_300", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is 3 inches and is left of block 1", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_316", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch long block that is left of block 1", "source": "block that block 1 is right of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_364", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block right of block 1", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the 3 inch long block", "source": "block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_52", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick is 3 inches wide", "source": "block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_56", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inches long block", "source": "block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_124", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "choose a block that is not 3 inches", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_182", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block that is 3 inches long", "source": "block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_203", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what blocks have a height not equal to 3 inches", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "locate a 3inch lwide block", "source": "block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_398", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block without a length of 3 inches", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_520", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "gather all the blocks that are not 3 inches long", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_762", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose length is 3 inches", "source": "block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_808", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch tall block", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_832", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the blocks that is not 3 inches long", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_885", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block with 3 inches of height", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1000", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose length is not 3 inches", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1015", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what blocks height is not 3 inches", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1076", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose height is not 3 inches", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1142", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch high blocks", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1199", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks not 3 inches high", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick is not 3 inches long", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1395", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all the blocks that are shorter or longer than 3 inches", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1410", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select all bricks that are not 3 inches wide", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick is not 3 inches wide", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1554", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inches high block", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1590", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks not 3 inches wide", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_test_45", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select all blocks that dont have a width of 3 inches", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_test_116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is 3 inches wide", "source": "block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_175", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block that is not 3 inches wide", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_test_315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose height is 3 inches", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_343", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose width is 3 inches", "source": "block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_357", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block near top", "source": "block that block whose height is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_21", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me the block that has a length of 3 inches", "source": "block that block whose length is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_24", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find a block to the right of a block 3 in height", "source": "block that block whose height is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_29", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the blocks that are 3 inches wide", "source": "block that block whose width is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_31", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all 3 inch tall blocks", "source": "block that block whose height is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_45", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks that is above 3 inch tall blocks", "source": "block that block whose height is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_46", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block below three inch block", "source": "block that block whose height is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_53", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is above a block that is three inches in height", "source": "block that block whose height is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_73", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks right of 3 inch tall blocks", "source": "block that block whose height is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "get me a block to the right of a 3inch block", "source": "block that block whose length is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_213", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "above block at least 3 inches long", "source": "block that block whose length is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_295", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me the block that has a height of 3 inches", "source": "block that block whose height is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_370", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block that is left to the block of 3 inches ", "source": "block that block whose width is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_481", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block that has a length of two inches above another block", "source": "block that block whose length is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_558", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block above 3 inch block", "source": "block that block whose length is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_620", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block that is on the left side of the block that is 3 inches in length", "source": "block that block whose length is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_742", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block below 3 inches wide block", "source": "block that block whose width is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_748", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block above 3 inch tall block", "source": "block that block whose height is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_770", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all 3 inch long blocks", "source": "block that block whose length is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_784", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the blocks that are 3 inches long", "source": "block that block whose length is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_871", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block left from 3 inch block", "source": "block that block whose width is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_947", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks left of 3 inch wide blocks", "source": "block that block whose width is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_949", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block right of 3 inch wide block", "source": "block that block whose width is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_968", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block that is left of a block that is 3 inches", "source": "block that block whose height is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1013", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block whose width is 3 inches", "source": "block that block whose width is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1087", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block of 3 inches height and placed in left ", "source": "block that block whose height is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1128", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block above 3 inches long block", "source": "block that block whose length is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1160", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is at right of 3 inches long block", "source": "block that block whose length is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block above 3 inch block", "source": "block that block whose height is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1193", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "right of 3 inch block", "source": "block that block whose height is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1316", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block with 3 inches in length", "source": "block that block whose length is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1403", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is to the right of the block that is three inches wide", "source": "block that block whose width is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1522", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is left of a 3 inch block", "source": "block that block whose height is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1529", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block that is below the block with a width of 3 inches", "source": "block that block whose width is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1538", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks above 3 inch wide blocks", "source": "block that block whose width is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_48", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block left of 3 inch block", "source": "block that block whose height is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_test_50", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block left of 3 inch block", "source": "block that block whose width is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_132", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "left of 3 inch block", "source": "block that block whose height is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_test_202", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me a block that is below any block that is 3 inches", "source": "block that block whose height is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_test_232", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block block a 3 inch long block", "source": "block that block whose length is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_test_237", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me the block that has a height of 3 inches", "source": "block that block whose height is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_test_253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block below the block that is 3 inches in width", "source": "block that block whose width is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_267", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block above 3 inch wide block", "source": "block that block whose width is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_377", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks that above and below block 1", "source": "block that block 1 is above and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_66", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that has block 1 in the right and left", "source": "block that block 1 is left of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_72", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is below", "source": "block that block 1 is below and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_90", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is below and above", "source": "block that block 1 is below and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_102", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is left and right of block 1", "source": "block that block 1 is left of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_121", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is below and right of", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is block 1 below and to the left of", "source": "block that block 1 is below and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_201", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block in block 1", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_312", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that block 1 is right of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_330", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is below block 1", "source": "block that block 1 is below and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_359", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right and below block 1", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_429", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the blocks to the right and left of block 1 ", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_445", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right and below block 1", "source": "block that block 1 is above and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_508", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "above and left of block 1", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_636", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that block 1 is to the left of and above", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_646", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is above and to the left of block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_670", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above the right", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_685", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that block 1 is above and to the left of", "source": "block that block 1 is above and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_705", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the left of the block that is to the right of block 1", "source": "block that block 1 is left of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_734", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is to the left and below", "source": "block that block 1 is left of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_862", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block on the left side of block 1", "source": "block that block 1 is right of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_880", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block to the right of block 1 and above it", "source": "block that block 1 is left of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_924", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block below and left from block 1", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_933", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block under and to the right of block 1", "source": "block that block 1 is above and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_965", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and under", "source": "block that block 1 is left of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_980", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the left of block 1", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1007", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the left and below block 1", "source": "block that block 1 is right of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1025", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right of block 1", "source": "block that block 1 is left of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1079", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above 1 block and left of 1 block", "source": "block that block 1 is above and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1082", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above and to the left of block 1", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1100", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block below the one on the right", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1194", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks left of and above block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1216", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is one to the left of another block", "source": "block that block 1 is left of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1217", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above block 1 and on the left side", "source": "block that block 1 is right of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1222", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks below and to the left of block 1", "source": "block that block 1 is below and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1232", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find blocks to the left and above block 1", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1239", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is below and above", "source": "block that block 1 is below and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1282", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and right of", "source": "block that block 1 is left of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1299", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is above block 1 ", "source": "block that block 1 is above and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1321", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "below and left of block 1", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1358", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block left and above block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1385", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is block one above and to the right of", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1468", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block aboe and left of block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1482", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block which has block 1 at left and above", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1531", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above 1 block and below 1 block", "source": "block that block 1 is above and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_62", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block at the right of block 1", "source": "block that block 1 is left of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_75", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks 1 is right and above", "source": "block that block 1 is right of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_122", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is right and left of", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_142", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right of and above block 1", "source": "block that block 1 is below and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_221", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is above block 1", "source": "block that block 1 is above and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_244", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the right of block 1", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_321", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and above of", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_348", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and left from block 1", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_365", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks right and below block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_370", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 below and to the left", "source": "block that block 1 is below and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_379", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that is above block 1", "source": "block that block that is above block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_10", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the right and below block 1", "source": "block that block that is right of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_16", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select all blocks that are in the shape of a pyramid", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_74", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2nd block right of block 1", "source": "block that block that is right of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_222", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above pyramid blocks", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "left of block below block 1", "source": "block that block that is below block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_287", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks below which block 1 is above", "source": "block that block that is below block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_311", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of pyramid blocks", "source": "block that block whose shape is a pyramid is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_316", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is left of the block that block 1 is to the right of", "source": "block that block that is left of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_352", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is above block 1", "source": "block that block that is above block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_362", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks below block 1", "source": "block that block that is below block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_483", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all pyramid blocks", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_513", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above pyramid block", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_555", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks below that block 1 is right of", "source": "block that block that is below block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_568", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks below that block 1 is left of", "source": "block that block that is below block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_691", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "get a block above any pyramid block", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_697", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is above and to the right of block 1", "source": "block that block that is above block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_701", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is left of the block above block 1", "source": "block that block that is left of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_706", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block right of pyramid block", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_709", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block above the block to the right block 1", "source": "block that block that is left of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_761", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is above block 1", "source": "block that block that is above block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_775", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of a pyramidshaped block", "source": "block that block whose shape is a pyramid is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_818", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above and right of block 1", "source": "block that block that is right of block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_844", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the left of block 1", "source": "block that block that is left of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_855", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right and below block 1", "source": "block that block that is right of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_867", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that is on the right side of the block on the left side of block 1", "source": "block that block that is left of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_905", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what blocks are below block 1", "source": "block that block that is below block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_992", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is right of block 1", "source": "block that block that is right of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_998", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above a pyramid block", "source": "block that block whose shape is a pyramid is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1045", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the left of pyramid block", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1072", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above pyramid", "source": "block that block whose shape is a pyramid is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1094", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two right from block 1", "source": "block that block that is right of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1125", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block left of pyramid", "source": "block that block whose shape is a pyramid is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two above block 1", "source": "block that block that is above block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1182", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks 2 below block 1", "source": "block that block that is below block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1183", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block to the left of the block above block 1", "source": "block that block that is above block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1211", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right and below block 1", "source": "block that block that is right of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1221", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the blocks that are to the left of block 1 ", "source": "block that block that is left of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the brick that is below and to the left of block 1", "source": "block that block that is below block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1241", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above block 1", "source": "block that block that is above block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1245", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "left of and below block 1", "source": "block that block that is below block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that block 1 is above and right of", "source": "block that block that is above block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1302", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block one", "source": "block that block that is below block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block to the right of the block left of block 1", "source": "block that block that is right of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1328", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the pyramidshaped blocks", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1345", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above and right from block 1", "source": "block that block that is left of block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1389", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block left of block above block 1", "source": "block that block that is left of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left and above block 1", "source": "block that block that is left of block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_test_26", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is to the right of block 1", "source": "block that block that is right of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_39", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is below to the right of block 1 ", "source": "block that block that is right of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_91", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block with pyramid shape", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_102", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of which block 1 is below", "source": "block that block that is left of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_test_155", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block whose shape is a pyramid", "source": "block that block whose shape is a pyramid is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_191", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of block 1", "source": "block that block that is left of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_test_256", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that is right of the block that block 1 is to the left of", "source": "block that block that is right of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_289", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block has below it a block in the shape of a pyramid", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_310", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks at block 1", "source": "block that block that is right of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_317", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is below the block that block 1 is above", "source": "block that block that is below block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is below and to the right of block 1", "source": "block that block that is below block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_380", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the special 3 inch tall block", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_202", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me a special 3 inch long block", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_347", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find the 3 inch wide special block", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which special brick is 3 inches wide", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_525", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what brick is both unique and 3 inches", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_600", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the unique 3 inch wide block", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_901", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find the special block that is 3 inches", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_917", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me all 3 inch tall special blocks", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_1225", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what special blocks have a length of 3 inches", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_1248", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which special block is 3 inches high", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_1329", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me all the 3 inch long special blocks", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_test_86", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "block whose length is 3 inches and that is special", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_test_124", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a special 3 inch high block", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_test_146", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find the 3 inch long block to the left of block 1", "source": "block that is left of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_112", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which block is below block 1 that is at least 3 inches high", "source": "block that is below block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_120", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is to the right of block 1 and has a height of 3 inches", "source": "block that is right of block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_139", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "choose the block below block 1 that is 3 inches long", "source": "block that is below block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_158", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block underneath block 1 that is also 3 inches long", "source": "block that is below block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_246", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is 3 inches in length and is above block 1", "source": "block that is above block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_247", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is to the left of block 1 and has a width of 3 inches", "source": "block that is left of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_252", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch wide blocks that is right of block 1", "source": "block that is right of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_283", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block three inches in width is left of block 1", "source": "block that is left of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_293", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block right of block 1", "source": "block that is right of block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_354", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what 3 inch brick is to the left of brick 1", "source": "block that is left of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_412", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that is right of block 1 and whose length is 3 inches", "source": "block that is right of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_425", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose shape is a pyramid and whose width is 3 inches", "source": "block whose shape is a pyramid and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_539", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block that has a width of 3 inches and is above block 1", "source": "block that is above block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_556", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a block with a pyramid shape and has a length of 3 inches", "source": "block whose shape is a pyramid and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_566", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which block of 3 width is to the right of block 1", "source": "block that is right of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_583", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a pyramidshaped block with a 3 inch height", "source": "block whose shape is a pyramid and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_627", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is above block 1 with a length of 3 inches", "source": "block that is above block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_656", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what 3 inch brick is to the right of brick 1", "source": "block that is right of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_692", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "locate the block beneath block 1 that also has a width of 3 inches", "source": "block that is below block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_749", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select me the block that is above block 1 and has a height of 3 inches", "source": "block that is above block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_751", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what 3 inches long block is above block 1", "source": "block that is above block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_854", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch blocks left of block 1", "source": "block that is left of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_891", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "choose a 3 inch block under block 1", "source": "block that is below block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_920", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me the block that is to the left of block 1 with a height of 3 inches", "source": "block that is left of block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_925", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block 3 inched high to the right of block 1", "source": "block that is right of block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_991", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block below block 1 that is 3 inches high", "source": "block that is below block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1030", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch tall blocks right of block 1", "source": "block that is right of block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1039", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block above block 1", "source": "block that is above block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1123", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which pyramidshaped brick is 3 inches high", "source": "block whose shape is a pyramid and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1206", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the 3inch long block which is located to the right of block 1", "source": "block that is right of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1210", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that is below block 1 and whose width is 3 inches", "source": "block that is below block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1229", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a 3 inch tall pyramidshaped block", "source": "block whose shape is a pyramid and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1231", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "choose a 3 inch block that is left of block 1", "source": "block that is left of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1240", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block that is right of block 1 and has a width of 3 inches", "source": "block that is right of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1258", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the 3 inch tall pyramid bricks", "source": "block whose shape is a pyramid and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1300", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is on the left of block 1 and is 3 inches in width", "source": "block that is left of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1301", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block of 3 height above block 1", "source": "block that is above block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1307", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "pyramid block 3 inches wide", "source": "block whose shape is a pyramid and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1317", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a 3 inch wide pyramidshaped block", "source": "block whose shape is a pyramid and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1351", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the 3 inch long pyramidshaped block", "source": "block whose shape is a pyramid and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1416", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name a block of 3inch width above block 1", "source": "block that is above block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1419", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a 3 inch brick that is shaped like a pyramid", "source": "block whose shape is a pyramid and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1432", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch tall block below block 1", "source": "block that is below block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1459", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block right of block 1 that is 3 inches tall", "source": "block that is right of block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1491", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a 3inch wide block to the right of block 1", "source": "block that is right of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1594", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a pyramid block that is 3 inches tall", "source": "block whose shape is a pyramid and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_1", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "get a 3inch block above block 1", "source": "block that is above block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_4", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that is below block 1 and whose length is 3 inches", "source": "block that is below block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_56", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is below block 1 and 3 inches long", "source": "block that is below block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_89", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is 3 inches long and has block 1 on its left", "source": "block that is right of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_173", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch tall block under first block", "source": "block that is below block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_178", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what 3inch wide brick is pyramidshaped", "source": "block whose shape is a pyramid and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_204", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch long blocks above block 1", "source": "block that is above block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_211", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block right of 3 inches long block 1", "source": "block that is right of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_216", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch wide blocks left of block 1", "source": "block that is left of block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_243", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block left of block 1 thats 3 inches high", "source": "block that is left of block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_254", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block above block 1", "source": "block that is above block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_283", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch long blocks right of block 1", "source": "block that is right of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_309", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a 3inch long block located to the left of block 1", "source": "block that is left of block 1 and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_318", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which 3 inch brick is below brick 1", "source": "block that is below block 1 and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_329", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the 3 inch wide block below block 1", "source": "block that is below block 1 and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_383", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "choose a brick 3 inches long that is shaped like a pyramid", "source": "block whose shape is a pyramid and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_398", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is unique and shaped like a pyramid", "source": "block that is special and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_26", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what special blocks are above block 1", "source": "block that is special and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "qid": "blocks_train_122", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which special brick is to the right of brick 1", "source": "block that is special and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))", "qid": "blocks_train_126", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is special and that is right of block 1", "source": "block that is special and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))", "qid": "blocks_train_351", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which special brick is above brick 1", "source": "block that is special and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "qid": "blocks_train_452", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which special block is to the left of brick 1", "source": "block that is special and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "qid": "blocks_train_467", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is special and that is left of block 1", "source": "block that is special and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "qid": "blocks_train_710", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all special blocks below block 1", "source": "block that is special and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string below) (string =) en.block.block1))", "qid": "blocks_train_757", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks above block 1", "source": "block that is special and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "qid": "blocks_train_764", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special pyramid blocks", "source": "block that is special and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_921", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a special block that is below block 1", "source": "block that is special and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string below) (string =) en.block.block1))", "qid": "blocks_train_969", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the special block that is to the left of block 1", "source": "block that is special and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1064", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a special block to the left of block 1", "source": "block that is special and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1065", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a special block whose shape is pyramid", "source": "block that is special and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1139", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what special block is above block 1", "source": "block that is special and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1228", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the special blocks right of block 1", "source": "block that is special and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1313", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the special block to the right of block 1", "source": "block that is special and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1349", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks above block 1", "source": "block that is special and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1374", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what special blocks are left of block 1", "source": "block that is special and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1587", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which pyramidshaped block is special", "source": "block that is special and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_66", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the special block to the right of block 1", "source": "block that is special and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string right) (string =) en.block.block1))", "qid": "blocks_test_195", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a special pyramidshaped block", "source": "block that is special and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_215", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is special and whose shape is a pyramid", "source": "block that is special and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_249", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks below block 1", "source": "block that is special and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string below) (string =) en.block.block1))", "qid": "blocks_test_314", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a special block", "source": "block that is special and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string is_special)))", "qid": "blocks_train_809", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "block that is special and that is special", "source": "block that is special and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string is_special)))", "qid": "blocks_train_827", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "choose a block that is special", "source": "block that is special and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string is_special)))", "qid": "blocks_test_133", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "3 inches tall block at the right of block 1", "source": "block whose height is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_54", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the 3 inch long bricks left of block 1", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_62", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the 3 inch wide pyramidshaped block", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_99", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the 3 inch wide blocks below block 1", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_195", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select all which is 3 inches in width and pyramid in shape", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_333", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch long block above block 1", "source": "block whose length is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_343", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inches high block below block 1", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_349", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what blocks are left of block 1 and 3 inches in height", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_350", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a 3 inch block to the right of block 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_386", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has a width of 3 inches and is above block 1", "source": "block whose width is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_424", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose the brick below brick 1 that is 3 inches long", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_449", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a three inches block at the left of block 1", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_451", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select blocks that have a height of 3 inches and are to the right of block 1", "source": "block whose height is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_479", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block below block 1 is 3 inches wide", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_492", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks 3 inch long right of block 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_608", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch wide block to the right of block 1", "source": "block whose width is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_612", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block located beneath block 1 that has a 3 inch diameter", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_617", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch tall blocks left of block 1", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_674", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has a width of 3 inches and is to the left of block 1", "source": "block whose width is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_732", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that has a width of 3 inches and is to the right of block 1", "source": "block whose width is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_790", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks with height equal to 3 inches", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_807", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select a block to the left of block 1 that is 3 inches long", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_826", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is 3 inches wide and to the right of brick 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_830", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a pyramidshaped block 3 inches long", "source": "block whose length is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_841", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block above block 1", "source": "block whose width is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_878", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramidshaped brick is 3 inches long", "source": "block whose length is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_892", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the 3 inch long block to the right of block 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_918", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch wide pyramid blocks", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_932", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block that is to the left of block 1 that is also 3 inches in length", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_983", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block underneath block 1 that is 3 inches long", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_985", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the 3 inch wide block left of block 1", "source": "block whose width is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1012", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is 3 inches in height and is on the right side of block 1", "source": "block whose height is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1024", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch tall block  above block 1", "source": "block whose height is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1058", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block above block 1", "source": "block whose height is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1085", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which pyramidshaped block is 3 inches wide", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1092", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch wide blocks right of block 1", "source": "block whose width is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1102", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the 3 inch block below block 1", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1134", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose length is 3 inches and whose shape is a pyramid", "source": "block whose length is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1167", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is 3 inches tall and pyramidshaped", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1180", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose height is 3 inches and that is below block 1", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1213", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the blocks who have a height of 3 inches are are to the left of block 1", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1304", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block with a length of 3 inches that is above block 1", "source": "block whose length is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1310", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose the brick that is 3 inches high below brick 1", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1325", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the 3 inch tall block below block 1", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1362", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above block 1 that is 3 inches wide", "source": "block whose width is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1400", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "get the block that is 3 inches tall found left of block 1", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1428", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block three inches in height is above block 1", "source": "block whose height is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1457", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is 3 inches and shaped like a pyramid", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1498", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select a block below block 1 that is 3 inches long", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1545", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block which is right to block 1 with 3 inches", "source": "block whose width is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1571", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose height is 3 inches and whose shape is a pyramid", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_2", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose width is 3 inches and that is below block 1", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_test_8", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all 3 inch pyramid blocks", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_107", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is to the left of brick 1 that is at least 3 inches long", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_test_117", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inches long pyramid shaped block", "source": "block whose length is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_149", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "beneath block 1 is a block with a height of 3 inches find it", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_test_150", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block above block 1", "source": "block whose length is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_test_164", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the 3 inch tall pyramid blocks", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_209", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is 3 inches long and to the right of block 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_test_222", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is 3 inches wide and below brick 1", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_test_255", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that has a height of 3 inches and is above block 1", "source": "block whose height is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_test_281", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the 3 inches long blocks and below block 1", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_test_374", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch tall block left of block 1", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_test_375", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose height is 3 inches and whose width is 3 inches", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_205", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a block that is 3 inches long", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_259", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "the 3x3 inch block", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_310", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block that is 3 inches tall", "source": "block whose height is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_339", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block 3 inches high and long", "source": "block whose height is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_363", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what brick is 3 inches wide and 3 inches high", "source": "block whose width is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_381", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block with 3 inch height and 3 inch wide", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_427", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the 3 inch long blocks", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_522", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the 3 inch wide blocks", "source": "block whose width is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_632", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the blocks that is 3 inches wide and long", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_740", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block with equal height and width measurements specifically 3 inches", "source": "block whose width is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_824", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block whose length and height is 3 inches", "source": "block whose length is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_835", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "is there a block whose diameter and length is an equal 3 inches in both those directions", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_972", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select all blocks that are 3 inches long", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1034", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select a block that has width and height of 3 inches each", "source": "block whose width is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1114", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose length is 3 inches and whose length is 3 inches", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1135", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch wide and long blocks", "source": "block whose width is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1184", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a 3 inch long block", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1244", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block with a length and width of 3 inches each side", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1271", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks with height and width equal to 3 inches", "source": "block whose height is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1333", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select all 3 inch high blocks", "source": "block whose height is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1398", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the blocks with length and height of 3 inches ", "source": "block whose length is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1523", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick is 3 inches wide and 3 inches high", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1583", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "identify a block with a width of 3 inches", "source": "block whose width is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_14", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the 3 inch wide and tall blocks", "source": "block whose width is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_21", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks 3 inches tall", "source": "block whose height is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_119", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is 3 inches wide by 3 inches tall", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_169", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block with a height and length of 3 inches", "source": "block whose height is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_213", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose width is 3 inches and whose length is 3 inches", "source": "block whose width is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_220", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch high and 3 inch wide blocks", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_224", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block that is 3 inches wide", "source": "block whose width is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_229", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is 3 inches wide and 3 inches tall", "source": "block whose width is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_239", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose length is 3 inches and whose width is 3 inches", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_306", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what brick is 3 inches long and 3 inches wide", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_341", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me the block that is to the right of two or more blocks", "source": "block that is right of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_27", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is above less than two bricks", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_70", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block below two other blocks", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_89", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks underneath at least 2 blocks", "source": "block that is below more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_95", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks left of more than 2 blocks", "source": "block that is left of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_127", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block to left of two or more blocks", "source": "block that is left of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_131", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block to right of two or more blocks", "source": "block that is right of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_143", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is above two blocks", "source": "block that is above two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_161", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is right of at most one block", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_162", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block is to the left of no more than two blocks", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_169", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is above at most two block", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_217", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks above at most 2 blocks", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_221", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me the block that is below two or more blocks", "source": "block that is below more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_251", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block below 2 blocks", "source": "block that is below two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_270", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has at most two blocks above it", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_276", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above two or more blocks", "source": "block that is above more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_279", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is below no more than two blocks", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_304", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is to the left of more than two blocks", "source": "block that is left of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_306", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the blocks below block 2", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_319", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is below less than two bricks", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_356", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block right of block 2", "source": "block that is right of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_431", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is to the left of less than two bricks", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_450", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is to the right of two blocks", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_490", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above more than 2 blocks", "source": "block that is above more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_517", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block to right of two others", "source": "block that is right of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_518", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has no more than two blocks to its left", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_535", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block left from two others", "source": "block that is left of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_538", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block piled on any other block but only one", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_580", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is right of at most two block", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_598", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is above less than two block", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_702", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above less than two blocks", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_744", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block that is to the right of more than 2 blocks", "source": "block that is right of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_767", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select a block with two blocks below it", "source": "block that is above at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_778", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block to the right of at least 2 blocks", "source": "block that is right of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_797", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is right of less than two block", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_842", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks at least 2 blocks below", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_858", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which blocks are left of singleorfewer blocks", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_859", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block that is to the left of two or less blocks", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_908", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block on bottom", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_931", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that has at most 2 blocks to the right of it", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_962", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block left of 2 blocks", "source": "block that is left of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1037", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks below two block", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1053", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the blocks to the right of greater that two blocks", "source": "block that is right of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1116", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is below two blocks ", "source": "block that is below two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1120", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has less than two blocks to the left of it", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1127", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks 2 blocks from the right", "source": "block that is right of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1157", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the bricks below at most 2 blocks", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1203", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block with at most two blocks to the left of it", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1251", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block right of at least two block", "source": "block that is right of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1261", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks below at most 1 blocks", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1286", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block with less that two blocks above it", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1336", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block left of more than 2 blocks", "source": "block that is left of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1348", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks below 2 blocks", "source": "block that is below two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1353", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with at least 2 blocks to the right", "source": "block that is left of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1360", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above two others", "source": "block that is above two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1364", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that has at most 2 blocks to the left", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1391", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me the block that is left of two blocks", "source": "block that is left of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1399", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with at most two blocks to the left", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1407", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks that is right of more than 2 blocks", "source": "block that is right of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1411", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block below two or more blocks", "source": "block that is below more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1417", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks left of 2 blocks", "source": "block that is left of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1507", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find all blocks above 2 or fewer blocks", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1515", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has less than two blocks to the right of it", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1537", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find that block that is to the left of just one other block", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1541", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block that is to the left of two or more blocks", "source": "block that is left of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1542", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is below no more than two bricks", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1546", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block that has only one block to the left of it", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1557", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that has at most two blocks to its left", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1568", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block below block 2", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_46", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is above at least two other blocks", "source": "block that is above at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_64", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks that has less than 2 blocks to the left", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_183", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block with at most two blocks below it", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_194", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is no higher than 2 blocks", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_205", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks above 2 blocks", "source": "block that is above two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_212", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block under one or two blocks at most", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_218", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block on the left corner", "source": "block that is left of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_231", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is to the right of less than two bricks", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_241", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is below two or more blocks", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_272", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what blocks are above more than two blocks", "source": "block that is above more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_292", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is left of at most two block", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_299", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is above two other blocks", "source": "block that is above two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_339", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is above at two or more blocks", "source": "block that is above at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_356", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has less than two blocks below it", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_359", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with more than 2 blocks to its left", "source": "block that is right of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_396", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block to the left of the special block", "source": "block that is left of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_63", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "choose a block to the left of the special brick", "source": "block that is left of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_184", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which brick is to the left of the special brick", "source": "block that is left of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_191", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block that is right of block that is special", "source": "block that is right of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_244", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all blocks below the special blocks", "source": "block that is below block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_260", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block that is above block that is special", "source": "block that is above block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_560", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me the special block on top of the block", "source": "block that is above block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_653", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block at the right of a special block", "source": "block that is right of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_667", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which brick is to the right of the special brick", "source": "block that is right of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_721", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks left of special blocks", "source": "block that is left of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_752", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block below a special block", "source": "block that is below block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_753", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which brick is below the special brick", "source": "block that is below block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_802", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what block is below the special block", "source": "block that is below block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_957", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me the block above the special block", "source": "block that is above block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1270", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me the block that is to the right of the special block", "source": "block that is right of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1275", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the block located on the left side of the special block", "source": "block that is left of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1324", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the block below the special block", "source": "block that is below block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1550", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find a block with a special block to the left of it", "source": "block that is right of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_41", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks above special blocks", "source": "block that is above block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_79", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which block is above the special block", "source": "block that is above block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "choose the block to the right of the unique block", "source": "block that is right of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_327", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what block is two blocks to the left of block 1", "source": "block that is left of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_30", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find a block below and to the right of block 1", "source": "block that is right of block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "get the second block above block 1", "source": "block that is above block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_79", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks right of block 1", "source": "block that is left of block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_94", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all the blocks left and below block 1", "source": "block that is left of block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_101", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the brick below and to the right of block 1", "source": "block that is below block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_123", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all the blocks right of the pyramid block", "source": "block that is right of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is left of block that is left of block 1", "source": "block that is left of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_232", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is right of block that is above block 1", "source": "block that is right of block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_258", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is to the right of the pyramidshaped brick", "source": "block that is right of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_297", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block that is above block 1", "source": "block that is below block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_309", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "cannot paraphase", "source": "block that is left of block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks below pyramid blocks", "source": "block that is below block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_332", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find all blocks that are to the left of a pyramid block", "source": "block that is left of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_334", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is below block that is below block 1", "source": "block that is below block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "bock right of block that is right of block 1", "source": "block that is right of block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_340", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks and and over block 1", "source": "block that is left of block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_380", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks 2 blocks below block 1", "source": "block that is below block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_419", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all the blocks below and to the left of block 1", "source": "block that is below block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_433", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "is there a block to the right of the block that is underneath block 1", "source": "block that is right of block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_456", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is above the block that is above block 1", "source": "block that is above block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_464", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block up 1 and right 1 of block 1", "source": "block that is above block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_466", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the blocks that are to the right of pyramid blocks", "source": "block that is right of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select a brick to the right of the brick directly below brick 1", "source": "block that is right of block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_500", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the left of the block above block 1", "source": "block that is left of block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_502", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block at the left of pyramid shaped block", "source": "block that is left of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_507", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block left of a block that is left of block 1", "source": "block that is left of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_523", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find a block with a pyramidshaped block below it", "source": "block that is above block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_533", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is below the brick to the right of brick 1", "source": "block that is below block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_549", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block with pyramid shape at the right of block", "source": "block that is right of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_597", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block a above block that is above block 1", "source": "block that is above block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_654", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all the blocks two blocks left of block 1", "source": "block that is left of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_694", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that is below the block to the right of block 1", "source": "block that is below block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_708", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the brick two bricks left of brick 1", "source": "block that is left of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_733", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks at block 1", "source": "block that is left of block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_763", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "choose the brick that is above the brick to the left of brick 1", "source": "block that is above block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_780", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "choose block underneath block under block 1", "source": "block that is below block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_781", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is above block which is right of block 1", "source": "block that is above block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_805", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is below block that is left of block 1", "source": "block that is below block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_823", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "choose a block to the left of block 1", "source": "block that is above block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_848", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "choose a block that is the right of the furthest block to the left", "source": "block that is right of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_897", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two spaces above block 1", "source": "block that is above block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_902", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "there is a block below block 1 and a block above that one find it", "source": "block that is above block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_904", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below a pyramid shaped block", "source": "block that is below block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_929", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is right of block that is right of block 1", "source": "block that is right of block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_936", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks 2 above block 1", "source": "block that is above block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_945", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is above the pyramidshaped block", "source": "block that is above block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_955", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is below the brick shaped like a pyramid", "source": "block that is below block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_956", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is above block 1", "source": "block that is left of block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_961", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is below block that is at the right of block 1", "source": "block that is below block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_971", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is above the brick to the right of brick 1", "source": "block that is above block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1020", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "choose block at right of block over block 1", "source": "block that is right of block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1035", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above block that is below block 1", "source": "block that is above block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1071", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block with the pyramidshaped block above it", "source": "block that is below block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1075", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the left of the block that is to the right of block 1", "source": "block that is left of block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1081", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find a block between block 1 and a block above block 1", "source": "block that is below block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1104", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "is there a block on top of the pyramidshaped block", "source": "block that is above block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1109", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is below the brick that is above brick 1", "source": "block that is below block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1208", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is on the other side of a block located to the left of block 1", "source": "block that is left of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1219", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "left of block over block 1", "source": "block that is left of block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1285", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block located beneath the second block that is located to the left of block 1", "source": "block that is below block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1294", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is 2 bricks to the right of brick 1", "source": "block that is right of block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1342", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "the third block to the right", "source": "block that is right of block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1346", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select block below and to the left of block 1", "source": "block that is below block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1365", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block below and to the left of block 1", "source": "block that is left of block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "choose a block that is below and to the left of block 1", "source": "block that is below block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block underneath the pyramidshaped block", "source": "block that is below block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1392", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is above block whose shape is a pyramid", "source": "block that is above block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1413", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is to the right of the brick to the left of brick 1", "source": "block that is right of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1496", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is between block 1 and a block to the left of block 1", "source": "block that is right of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1500", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block right of a block which is above block 1", "source": "block that is right of block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1514", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block right of block which is left of block 1", "source": "block that is right of block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1530", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of pyramid blocks", "source": "block that is left of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1549", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "choose the block that is below and to the left of block 1", "source": "block that is left of block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1555", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is left of block that is below block 1", "source": "block that is left of block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1560", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find a block to the right and above block 1", "source": "block that is above block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1580", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above a pyramid shaped block", "source": "block that is above block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_3", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find a block between block 1 and a block below block 1", "source": "block that is above block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_15", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the brick right and above block 1", "source": "block that is right of block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_test_57", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block to the left of the pyramidshaped block", "source": "block that is left of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_73", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of the pyramidshaped block", "source": "block that is right of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_95", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is above the brick that is below brick 1", "source": "block that is above block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_111", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is 2 blocks below block 1", "source": "block that is below block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_134", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that is above and right of block 1", "source": "block that is above block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_147", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the left of the pyramidshaped block", "source": "block that is left of block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "choose the brick to the right of the brick above brick 1", "source": "block that is right of block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_test_167", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is left of block which is below block 1", "source": "block that is left of block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is below block whose shape is a pyramid", "source": "block that is below block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_223", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which brick is below the brick below brick 1", "source": "block that is below block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block which is below block 1", "source": "block that is below block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_269", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks 2 blocks to the right of block 1", "source": "block that is right of block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_279", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks at the same level as block 1", "source": "block that is below block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_test_333", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me a block that is to the right of the block that is below block 1", "source": "block that is right of block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_338", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "are there any blocks whose height is that of either 3 inches or 6 inches at most", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_42", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "a brick which length is between 3 and 6 inches", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me a block at least 3 inches wide", "source": "block whose width is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_140", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me a block smaller than 6 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which block has a width of less than 3 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find those blocks with lengths that exceed either 3 or 6 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_175", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block at least 3 inches long", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_214", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block at least 3 inches wide", "source": "block whose width is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is no wider than 3 or 6 inches", "source": "block whose width is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_218", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks as wider than 3 inches", "source": "block whose width is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_228", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is no higher than 3 or 6 inches", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_234", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is higher than 3 or 6 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find blocks that are at least 3 inches wide or 6 inches wide", "source": "block whose width is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block shorter than 6 inches", "source": "block whose height is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_368", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block taller than 3 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_372", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick has a length smaller than 3 or 6 inches", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me a block at most 6 inches wide", "source": "block whose width is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_453", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks whose width is smaller than 6 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_475", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what block is 3 inches or taller", "source": "block whose height is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_489", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose width is smaller than 3 inches or 6 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_530", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is at most 3 or 6 inches long", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "choose a brick that is at least 3 inches wide", "source": "block whose width is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_603", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block 6 inches or shorter", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_628", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "select all blocks whose length at a maximum of 6 inches", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_711", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find the block with a height that does not surpass either 3 or 6 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_713", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks with a length longer than 3 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_776", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks at least 3 inch wide", "source": "block whose width is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_782", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "locate a block with a width that is more than either 3 or 6 inches", "source": "block whose width is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_789", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all the blocks at least 3 inches long", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_815", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "locate a block that is shorter than 3 inches or 6 inches", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_850", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find all blocks with height less than 6 inches", "source": "block whose height is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_869", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "select a block longer than 3 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_874", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "select bricks that are at least 3 inches high", "source": "block whose height is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_896", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "a brick between 3 and 6 inches", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_935", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block 6 inches or less long", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_958", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which block is at least 3 or 6 inches long", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1049", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose height is at most 3 inches or 6 inches", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1063", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "is there a block with a width that equals 3 or 6 inches maximum", "source": "block whose width is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1066", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block 6 inches long or less", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1070", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose length is larger than 3 inches or 6 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1107", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all the blocks taller than 3 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1143", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose length is at least 3 inches or 6 inches", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "is there a block no wider than 3 or 6 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "choose a block between 3 and 6 inches wide", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1187", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks at most 6 inches high", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "select the bricks that are less than 6 inches tall then select the bricks that are less than 3 inches tall", "source": "block whose height is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block that is at least 3 to 6 inches", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1242", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose length is at most either 3 inches or 6 inches", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1350", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "choose a block that is taller than 3 or 6 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find the block with maximum length of 6 inches", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what blocks length is greater than 3 to 6 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_230", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find blocks that are at least 3 inches high or 6 inches high", "source": "block whose height is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_260", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is longer than 3 or 6 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_276", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which block is wider than 3 or 6 inches", "source": "block whose width is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_326", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose length is smaller than 3 inches or 6 inches", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_352", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "above and left of block 1", "source": "block that block 1 is below and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_14", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the right of block 1", "source": "block that block 1 is left of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_36", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is right and below of", "source": "block that block 1 is right of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_58", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks that is left or right of block 1", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_105", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left and above block 1", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_113", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select blocks that are below and to the left of block 1", "source": "block that block 1 is below and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_179", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block right and up from block 1", "source": "block that block 1 is left of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_193", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is to the right and above", "source": "block that block 1 is above and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_208", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which block is above and to left of block 1 ", "source": "block that block 1 is left of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_264", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that block 1 is above", "source": "block that block 1 is above and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_375", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what blocks are to the left and below block 1", "source": "block that block 1 is above and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_401", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the right of block 1", "source": "block that block 1 is right of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_416", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is on the right side of block 1", "source": "block that block 1 is left of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_418", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 at right and left", "source": "block that block 1 is left of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_446", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and to right of block 1", "source": "block that block 1 is below and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_461", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is to ther right of and that has a shape of a pyramid", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_537", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block which has block 1s below and right", "source": "block that block 1 is below and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_579", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block above block 1", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_614", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block left of block 1", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_679", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that has block 1 above and below", "source": "block that block 1 is above and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_707", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the pyramid block that is to the right of block 1", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_719", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above which block 1 is right of", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_769", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "above and to the right of block 1", "source": "block that block 1 is below and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_822", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the pyramid shaped block below block 1", "source": "block that block 1 is above and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_825", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the left of block 1", "source": "block that block 1 is left of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_840", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block below block 1", "source": "block that block 1 is above and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_868", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the pyramid shaped block", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_895", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below and right of block 1", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_919", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block to the right of block 1 and to the left of block 1", "source": "block that block 1 is left of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_982", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the right of block 1 and is in the shape of a pyramid", "source": "block that block 1 is left of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_994", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks to the left of and above block 1", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1028", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below block 1", "source": "block that block 1 is below and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1067", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is right of and which is left of block 1", "source": "block that block 1 is right of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1098", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 above and left", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1129", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 on the right", "source": "block that block 1 is right of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1149", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a block with block 1 below and to the right", "source": "block that block 1 is below and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_1156", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 on its right and is pyramidshaped", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1170", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and below", "source": "block that block 1 is left of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1190", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above the left one", "source": "block that block 1 is above and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1198", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks that block 1 is below", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1212", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block right and below block 1", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1347", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is to the right of", "source": "block that block 1 is right of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1352", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block left of block one", "source": "block that block 1 is right of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1377", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select all the pyramidshaped blocks above block1", "source": "block that block 1 is above and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1401", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which block is above block 1", "source": "block that block 1 is above and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1437", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and right of", "source": "block that block 1 is left of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_1446", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is below", "source": "block that block 1 is below and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1461", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the right of block 1", "source": "block that block 1 is right of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_1464", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks above and below block 1", "source": "block that block 1 is below and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1493", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above block one", "source": "block that block 1 is below and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1512", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that is left of block 1", "source": "block that block 1 is left of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1570", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block on the right", "source": "block that block 1 is above and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_test_19", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is both above and to the right of block 1", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_test_20", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is below and right of", "source": "block that block 1 is below and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_test_68", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and below block 1", "source": "block that block 1 is below and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_test_104", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramid shaped block is at right of block 1", "source": "block that block 1 is left of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_140", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right of block one with pyramid shape", "source": "block that block 1 is left of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_236", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select block 1 and all of the blocks below it", "source": "block that block 1 is above and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_247", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that block 1 is below and that has a shape of a pyramid", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_284", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that is to the left and below block 1", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_330", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 below and left", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_test_372", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramid shaped block above block 1", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_393", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that block 1 is above", "source": "block that block 1 is above and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_138", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "select the special block to the right of block 1", "source": "block that block 1 is left of and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_148", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "select the block that is special and below block 1", "source": "block that block 1 is below and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_261", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "select the block that is special and that block 1 is above", "source": "block that block 1 is above and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_589", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "special block left of block 1", "source": "block that block 1 is right of and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_794", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me all special blocks that block 1 is below", "source": "block that block 1 is below and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_811", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "select the block 1", "source": "block that block 1 is above and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_950", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me all special blocks left of block 1", "source": "block that block 1 is right of and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1188", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me all special blocks that block 1 is left of", "source": "block that block 1 is left of and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1281", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "block that left of block one and special", "source": "block that block 1 is right of and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1308", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find a special block above block 1", "source": "block that block 1 is below and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1380", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me all special blocks that block 1 is below", "source": "block that block 1 is below and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_test_27", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me the block that is to the left of block 1 and special", "source": "block that block 1 is right of and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_test_245", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "select the block that is block 1 is left of and that is special", "source": "block that block 1 is left of and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string is_special)))", "qid": "blocks_test_286", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "locate the block that is special", "source": "block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)))", "qid": "blocks_train_241", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "a special block", "source": "block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)))", "qid": "blocks_test_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find me all the special blocks", "source": "block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)))", "qid": "blocks_test_246", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what block has the most blocks above it", "source": "block that is below the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_111", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "locate a block that is on the left side of the smallest number of blocks", "source": "block that is left of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_117", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block to the left of the largest number of blocks", "source": "block that is left of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_165", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is below the least number of block", "source": "block that is below the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_170", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick that has the least blocks to the right of it", "source": "block that is left of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_199", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has the most blocks below it", "source": "block that is above the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string above) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_219", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has the most blocks to the right of it", "source": "block that is left of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_282", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick at the very left", "source": "block that is left of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_315", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block located on top of the highest number of other blocks", "source": "block that is above the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string above) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_355", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick that has the least blocks to the left of it", "source": "block that is right of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_402", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick that is above the least number of blocks", "source": "block that is above the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string above) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_443", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me the block with the least number of blocks below it", "source": "block that is below the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_511", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block with the least blocks to the left of", "source": "block that is left of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_526", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me the block with the least blocks below it", "source": "block that is above the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string above) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_625", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is furthest to the left", "source": "block that is left of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_659", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block that is on top of the fewest number of other blocks", "source": "block that is above the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string above) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_660", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is below the most number of block", "source": "block that is below the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_700", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block with the fewest blocks to the left of it", "source": "block that is right of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_703", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is at the very top", "source": "block that is below the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_786", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block to the right of the most blocks", "source": "block that is right of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_852", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block that is beneath the smallest number of other blocks", "source": "block that is below the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_873", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block at the left of least number of blocks", "source": "block that is left of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_886", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block is farthest to the left", "source": "block that is right of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_974", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block above the least populated bricks", "source": "block that is above the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string above) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1074", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is at the right of most number of blocks", "source": "block that is right of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1121", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks that is to the right of the least number of blocks", "source": "block that is right of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1290", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above most number of blocks", "source": "block that is above the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string above) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1340", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is closest to the top", "source": "block that is below the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1372", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is closest to the bottom", "source": "block that is above the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string above) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1386", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block with the most blocks to the right of", "source": "block that is right of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1408", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is furthest to the right", "source": "block that is left of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1472", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks below the smallest numbers of blocks", "source": "block that is below the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1559", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "locate a block that is located to the right of the maximum number of blocks", "source": "block that is right of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_93", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is right of the least number of block", "source": "block that is right of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_118", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is under the most populous amount of blocks", "source": "block that is below the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_144", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block is furthest to the right", "source": "block that is right of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_203", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has the least blocks to the left of it", "source": "block that is right of the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string right) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_217", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is under the least number of bricks", "source": "block that is below the least number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string below) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_235", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block that to the left of the most blocks", "source": "block that is left of the most number of block", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string left) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_388", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
