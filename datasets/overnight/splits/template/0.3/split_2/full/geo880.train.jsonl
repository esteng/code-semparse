{"paraphrased": "what is the number of locations", "source": "number of place", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_548", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many rivers are here", "source": "number of river", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_570", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of mountains", "source": "number of mountain", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_601", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what number of states", "source": "number of state", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_775", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of cities", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_877", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "total number of rivers", "source": "number of river", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1117", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many rivers are there in the us", "source": "number of river", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1165", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the total number of mountains", "source": "number of mountain", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1219", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many mountains are there", "source": "number of mountain", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1413", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "research project", "source": "number of lake", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1990", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "count number of lakes", "source": "number of lake", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2085", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many rivers are there", "source": "number of river", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2202", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many places are there", "source": "number of place", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2225", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is number of mountain", "source": "number of mountain", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2512", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how  many states are there", "source": "number of state", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2920", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of cities", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2922", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "total number of states", "source": "number of state", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_29", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of the place", "source": "number of place", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_141", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of rivers", "source": "number of river", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_210", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the total number of cities", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_633", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many cities", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_662", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many rivers are there", "source": "number of river", "target": "(call listValue (call .size (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_681", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what are the main cities", "source": "city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)))", "qid": "geo880_train_293", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which lake is major", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_train_354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is a major lake", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_train_415", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "can i see a list of capital cities", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_train_701", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what rivers are considered major", "source": "river that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)))", "qid": "geo880_train_751", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what cities are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_train_968", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what are some major cities", "source": "city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)))", "qid": "geo880_train_1226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which lake is the largest", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_train_1994", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is the name of a large lake", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_train_2409", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what cities are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_train_2547", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what lakes are considered major", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_test_253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "where is a major city", "source": "city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)))", "qid": "geo880_test_382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "is this a major lake", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_test_460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what cities are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_test_493", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "cities that are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_test_504", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which state contains the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_256", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_503", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the state capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_1801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_2062", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state is the capital of california in", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_2373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state has the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_test_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the state capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_test_23", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state has the lowest number of capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_92", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which state has the most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_632", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the fewest capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_1142", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the least number of capital", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_1920", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "state with fewest capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_2321", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_2530", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the most capital", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_2693", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the least number of capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_2939", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the greatest number of capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_test_644", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "state with most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_test_719", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what lake is contained by a state that borders ca", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_49", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which mountains share the same state as sacramento", "source": "mountain that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_53", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which mountains are bordered by states that contain california", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_68", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which state borders the state with sacramento as its capital", "source": "state that borders state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_244", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states have a capital city the same as california", "source": "state whose capital is city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california)))", "qid": "geo880_train_254", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state has the capital city of california", "source": "state whose capital is city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california)))", "qid": "geo880_train_265", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lakes are in california border states", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river crosses the state that has sacramento as its capital", "source": "river that traverses state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_313", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is a city in a state bordering ca", "source": "city that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_314", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountain lies in the state whose capital is sacramento", "source": "mountain that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_381", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountain is contained by the state with the capital of sacramento", "source": "mountain that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_422", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what are some places in the state that has sacramento as a capital", "source": "place that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_442", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities are in the state whose capital is sacramento", "source": "city that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_450", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what place is contained by a bordering state of california", "source": "place that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_494", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state only borders the state next to california", "source": "state that borders state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_508", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river traverses a state that borders california", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_521", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what city is contained by a state bordering ca", "source": "city that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_541", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "cities in states bordering california", "source": "city that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_578", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "name a state that borders ca", "source": "state that borders state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_594", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "rivers traversing californias bordering states", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_621", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "places in states bordering california", "source": "place that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_626", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountains are part of the states that border california", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_698", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what rivers pass through states with the capital of sacramento", "source": "river that traverses state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_712", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountains are within the states bordering california", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_718", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which city is contained by the state whose capital is sacramento", "source": "city that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_723", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which lake is contained by california", "source": "lake that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_777", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what rivers run through states that border california", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_784", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states have capitals that are cities in california", "source": "state whose capital is city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california)))", "qid": "geo880_train_816", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river traverses the state whose capital is sacramento", "source": "river that traverses state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_894", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is a state that borders california", "source": "state that borders state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_906", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which mountains are in the states that border california", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_908", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river traverses a state bordering ca", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_917", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities are in the state with the capital of sacramento", "source": "city that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_937", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state borders the state with the capital of sacramento", "source": "state that borders state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_983", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what place is contained by sacramentos state", "source": "place that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_995", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which rivers cross through california", "source": "river that traverses state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_999", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states border the california border states", "source": "state that borders state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1039", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "mountain in a state bordered by california", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1063", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state borders the state where the capital is sacramento", "source": "state that borders state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1104", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state borders the state whose capital is sacramento", "source": "state that borders state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1140", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities are in neighboring states around california", "source": "place that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1143", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountains are in states bordering california", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1234", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state is next to the state next to california", "source": "state that borders state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1241", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lakes are in states that border california", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1252", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lake is contained by a state that is next to california", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1268", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river runs through california and a bordering state", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lake is contained by a state bordering california", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1296", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is a city in the state whose capital is sacramento", "source": "city that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which other city is contained by the same state in which sacramento is the capital", "source": "city that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1402", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "cities in california", "source": "city that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1547", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states border ca", "source": "state that borders state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1563", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountain is contained by the state whose capital is sacramento", "source": "mountain that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1565", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river goes through states that border california", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1645", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states capital is a city in california", "source": "state whose capital is city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1838", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "whats a mountain in that state with sacramento", "source": "mountain that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1848", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is a place in a bordering state of california", "source": "place that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1878", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river is contained by the state with sacramento as capital", "source": "river that traverses state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1891", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "name a lake in the state with capital city of sacramento", "source": "lake that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1918", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which lake is contained by the state that borders california", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1929", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is a place that borders california", "source": "place that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1960", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states border a state that borders california", "source": "state that borders state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2004", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lake is contained by the state with sacramento as its capital", "source": "lake that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2024", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what places are in the state whose capital is sacramento", "source": "place that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2032", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lake is contained by a state thats capital is sacramento", "source": "lake that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2038", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what locations are found in states with a capital of sacramento", "source": "place that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2075", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what place is contained by a state next to california", "source": "place that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2212", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "californias bordering state contains which mountain", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2221", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which rivers are in states proximate to california", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2231", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river is contained in the state whose capital is sacramento", "source": "river that traverses state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2245", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which mountain is contained by the state with capital sacramento", "source": "mountain that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2249", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which cities border california", "source": "city that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountains are found in the states that border california", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2272", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountain is located in the state bordering california", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2293", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lakes are located in states that border california", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2421", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which lake is contained by the state whose capital is sacramento", "source": "lake that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2473", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "lakes in the same state as sacramento", "source": "lake that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2493", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lake is within the borders of california", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2498", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what city is contained by a california border state", "source": "city that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2527", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what city is contained by a state whose capital is sacramento", "source": "city that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2535", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which city is contained by a state whose capital is sacramento", "source": "city that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2571", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which lake is contained by the state whose capital is sacramento", "source": "lake that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2625", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what placea are in the state whose capital is sacramento", "source": "place that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2652", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "rivers that flow through the state with the capital of sacramento", "source": "river that traverses state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2656", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which lake is contained by a state bordering ca", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2696", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities are in states that border california", "source": "city that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2814", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities are in states that border california", "source": "city that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2816", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what rivers run through californias border states", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2899", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountain is contained by sacramentos state", "source": "mountain that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2935", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which place is contained by a state next to california", "source": "place that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2980", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what places are in the state whos capital is sacramento", "source": "place that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2981", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountain is confined to a state that borders california", "source": "mountain that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_test_7", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lake is contained by sacramento", "source": "lake that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_test_8", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state shares a border with california", "source": "state that borders state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_test_64", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "name a state bordering the state which has sacramento as its capital city", "source": "state that borders state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_test_68", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which river traverses the states bordering california", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_test_105", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities border california", "source": "city that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_test_135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountains are found in the state whose capital is sacramento", "source": "mountain that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_test_305", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities are in the state whose capital is sacramento", "source": "city that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_test_331", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river travels threw sacramento", "source": "river that traverses state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_test_471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what river is contained by a state next to california", "source": "river that traverses state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_test_479", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lakes are in a state whose capital is sacramento", "source": "lake that is contained by state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_test_533", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "whats a lake somewhere around but not in california", "source": "lake that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_test_611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states border the state with sacramento as its capital", "source": "state that borders state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_test_675", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities are found in states that share borders with california", "source": "city that is contained by state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_test_684", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what major city is the capital of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_145", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "major city that is capital of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_290", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the capital of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_767", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is a major capital city of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_1299", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the major capital city of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_1595", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what city is the capital of ca", "source": "city that is capital of california and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string capital_city)))", "qid": "geo880_train_1872", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which important city is the capital of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_2228", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which city is californias capital", "source": "city that is capital of california and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string capital_city)))", "qid": "geo880_train_2905", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "capital of california", "source": "city that is capital of california and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string capital_city)))", "qid": "geo880_test_695", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is a major city that is californias capital", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_test_728", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what state is the capital of california", "source": "state whose capital is capital of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_8", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is a mountain that has the same elevation as mount whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_18", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which cities have areas the size of lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_75", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river has the same length as the colorado river", "source": "river whose length is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_82", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "note the city that has a density equal to that of california", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_83", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place is at the same height as mount whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_93", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountains have the same elevation of mount whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_97", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city is equal in population to sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_103", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what location has an elevation equal to the colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_112", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "places with elevations equal to mt whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_115", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which rivers length is equal to the length of colorado river", "source": "river whose length is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_160", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain has the same elevation as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "lakes similar to tahoe in size", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_169", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states have a population the same size as california", "source": "state whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_180", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what location is as elevated as death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_184", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river is the length of the colorado river", "source": "river whose length is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_217", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountains have the same elevation as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "whats the city with lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_270", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which lake is equal in area to that of lake tahoe", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_275", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has the same population as the city of sacramento", "source": "state whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_304", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same area as lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_331", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states have a capital of california", "source": "state whose capital is capital of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what location has an elevation equal to that of mount whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which states have a population equal to sacramentos", "source": "state whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_403", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states have similar density to california", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_440", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has the same capital as california", "source": "state whose capital is capital of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_448", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which places are at the same height above sea level as death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_465", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state has an area equal to californias", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_486", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which states have same density as california", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_491", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountains elevation is the length of the colorado river", "source": "mountain whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_507", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "states with similar areas to california", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_510", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has an area that is the same as california", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_532", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what places have an elevation similar to mount whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_544", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has the same land area as california", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_617", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is a lake whose area is the same as the area of lake tahoe", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_650", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which city has the area of california", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_653", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which states border lake tahoe area", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_654", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what citys area is the same as californias area", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_655", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river is as long as the colorado river", "source": "river whose length is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_745", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city is as big as lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_759", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city is the population of california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_778", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain has the same elevation as mount whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_790", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state has a population equal to the population of california", "source": "state whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_805", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain has the same elevation as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_821", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river has length that is the elevation of death valley", "source": "river whose length is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_831", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state is the area of lake tahoe", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_842", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake has the same area as lake tahoe", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_844", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same density as california", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_863", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has a population equal to sacramento", "source": "state whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_873", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has a population the same as sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_890", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "name a mountain as tall as the colorado river is long", "source": "mountain whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_899", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is a lake as big as lake tahoe", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_949", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which city has the same population as the state of california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_957", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountains have the same elevation as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_961", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states are as large as california by population", "source": "state whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_982", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same amount of residents as california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_988", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states have the same density as california", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_1003", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has the capital of california in it", "source": "state whose capital is capital of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_1042", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what cities have a population equal to california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_1046", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what rivers are as long as the colorado river", "source": "river whose length is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_1066", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain has an elevation equal to that of death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_1085", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "is there a place that has an elevation that is the length of the entire colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_1094", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has equal area with lake tahoe", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_1159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake has an area equal to the area of lake tahoe", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_1183", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what other mountains have the same elevation as mount whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_1238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is a lake that has the same area as lake tahoe", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_1240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is a mountain with an elevation equivalent to the length of the colorado river", "source": "mountain whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_1242", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which cities have the same population as california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_1262", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what rivers length is the same as the elevation of mount whitney", "source": "river whose length is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_1265", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what citys density is the same as that of california", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_1276", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake has an area equal to lake tahoe", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_1293", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place has an elevation equal to death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_1330", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has the same area as california", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_1331", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "where has an elevation equal to that of mount whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_1388", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same population as california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_1417", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake has the same area as california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_1428", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what location has the same elevation as mount whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_1437", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "state with same population as that of california", "source": "state whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_1463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has a population density equal to ca", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_1465", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake has the same area as california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_1469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain is equal in elevation to mt whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_1480", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state matches the density of california", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_1483", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same area as lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_1501", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lakes are the same size as lake tahoe", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_1523", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state has the area of lake tahoe", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_1572", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has a population equal to sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_1623", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place has the same elevation as death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_1624", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same population as sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_1660", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place has the save elevation as death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_1668", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what cities have the same area as california", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_1749", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which mountain has an elevation that is as long as the colorado river", "source": "mountain whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_1761", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "name a river that is as long as death valley is high", "source": "river whose length is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_1773", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states cover the same acreage as california", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_1791", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which mountain has the same altitude as that of death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_1800", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is a mountain with the same elevation as that of mount whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_1803", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place has an elevation that is the same length as the colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_1824", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same density as califronia", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_1833", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake has the same area as california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_1866", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what rivers are as long as death valleys elevation", "source": "river whose length is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_1868", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has an equal area to that of lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_1874", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river has a length the same as the colorado river", "source": "river whose length is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_1901", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state had the same population as sacramento", "source": "state whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_1902", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what rivers are as long as mount whitneys elevation", "source": "river whose length is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_1936", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake is same size as california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_1968", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the size of california", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_1977", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has a population equal to california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_1988", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which cities have the same population as sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_1996", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same population as sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_1999", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states have an area the same as lake tahoe", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_2012", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "who has the same elevation as death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_2013", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same population as california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_2065", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "river with same length as that of colorado river", "source": "river whose length is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_2094", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain has the same elevation of mount whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2152", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which city shares the same population as sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_2156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states have a population equal to california", "source": "state whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_2192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain has an elevation that is the same as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_2194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "place whose elevation is length of colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_2197", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what rivers length is the same as the elevation of death valley", "source": "river whose length is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_2213", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place has an elevation equivalent to the colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_2219", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same size as california", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2289", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what citys density is equal to the density of california", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_2319", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which mountain is as high in elevation as mt whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has an equal area to ca", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has equal population with california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_2346", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state is as large as lake tahoe", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_2357", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has an area equal to the area of california", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2395", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "name a city with the same population as ca", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_2408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states have the same population as california", "source": "state whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_2420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has the same density as california", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_2425", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what location has an elevation the same as death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_2427", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain as the same elevation as the length of the colorado river", "source": "mountain whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_2428", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain has an elevation that is the length of the colorado river", "source": "mountain whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_2432", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which lake has the same area as california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2453", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which locations have an elevation thats the same length as the colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_2463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what cities have a similar population to that of sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_2485", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same density as california", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_2510", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "list all lakes that are as big as california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain is as low as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_2569", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "name a mountain the same elevation as mt whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2581", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same area as lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_2593", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "lake whose area is same as lake tahoe", "source": "lake whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_2631", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states have a population equal to ca", "source": "state whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_2633", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "note the river that has a length equivalent to the height of mount whitney", "source": "river whose length is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2643", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "whats another place that has the same elevation of death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_2654", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain has an elevation equal to mount whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2662", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river length is the same as the elecation as mt whitney", "source": "river whose length is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which lakes area equals that of california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2687", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has an area equal to lake tahoe", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_2695", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place has the same elevation as death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_2706", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has a similar population density to california", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_2707", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which city has the same population as the entire state of california", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_2730", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which cities have the same area as california", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2733", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place has an elevation equal to mt whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2773", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is a mountain that has an elevation equal to that of mount whitney", "source": "mountain whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2783", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same area as california", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2786", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake has the same area as california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2859", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is a place with the same elevation as death vallely", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_2865", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which place s altitude is equal to the length of river colorado", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_2869", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what places elevation is as long as the colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_2872", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "place whose elevation is same as that of mount whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2892", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state is the same size as lake tahoe", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_2912", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has an area equal to the area of lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_2921", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has the same population as sacramento", "source": "state whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_test_18", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same area as california", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_test_30", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state has the same population density as ca", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_test_52", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same area as lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_test_87", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state have the same population as california", "source": "state whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_test_95", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "city with same density as of california", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_test_101", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which cities equal the population of sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_test_190", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what states equal the area of california", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_test_196", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river is the same length as the colorado river", "source": "river whose length is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_test_200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "river as long as elevation of death valley", "source": "river whose length is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_test_219", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has a density that is equal to california", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_test_232", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "wich lakes are in california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_test_274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "river with length sam as elevation of mount whitney", "source": "river whose length is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_test_291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the state capital of ca", "source": "state whose capital is capital of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_test_309", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lakes have an area the same as california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_test_310", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has same population as sacramento", "source": "state whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_test_314", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "is there another river that is just as long as the colorado river", "source": "river whose length is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_test_358", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which states have the same area as lake tahoe", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_test_371", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river is the same length as the height of mt whitney", "source": "river whose length is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_test_412", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountains elevation is equal to the length of the colorado river", "source": "mountain whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_test_428", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what cities are as dense as california", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_test_458", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has a population equal to california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_test_461", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "mountain as high as length of colorado river", "source": "mountain whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_test_468", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is an area with an elevation that is the length of the colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_test_475", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has the same population as california", "source": "state whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_test_513", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find the  river that has a length equivalent to the distance in inches that death valley is above sea level", "source": "river whose length is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_test_517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the size of lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_test_567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountain has the same elevation as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_test_586", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what rivers length is the same as the elevation of mount whitney", "source": "river whose length is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_test_589", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which mountains have the same elevation as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_test_716", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountains are as tall as the colorado rivers length", "source": "mountain whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_test_731", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "how high is death valley", "source": "elevation of death valley", "target": "(call listValue (call getProperty fb:en.place.death_valley (string elevation_place_length)))", "qid": "geo880_train_29", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how many people live in california", "source": "population of california", "target": "(call listValue (call getProperty fb:en.state.california (string population_state_count)))", "qid": "geo880_train_61", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is a geographical area in ca", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_67", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total area of california", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_106", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total population of california", "source": "population of california", "target": "(call listValue (call getProperty fb:en.state.california (string population_state_count)))", "qid": "geo880_train_114", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_218", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the density of california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_231", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "colorado rivers length", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_235", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "death valley elevations", "source": "elevation of death valley", "target": "(call listValue (call getProperty fb:en.place.death_valley (string elevation_place_length)))", "qid": "geo880_train_285", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of the colorado river", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_351", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how long is the colorado river", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_358", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "whats sacramentos population", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_413", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the elevation of mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_train_462", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how long is river colorado", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_551", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "whats the population density of california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_666", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_716", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population of ca", "source": "population of california", "target": "(call listValue (call getProperty fb:en.state.california (string population_state_count)))", "qid": "geo880_train_717", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "which city is the capital of the great state of california", "source": "capital of california", "target": "(call listValue (call getProperty fb:en.state.california (string capital_state_city)))", "qid": "geo880_train_748", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the size in area of lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_train_803", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "whats the population of california divided by the states total area", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_832", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the area of california", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_836", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is lake tahoes area", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_train_886", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the elevation of mt whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_train_905", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of the colorado river", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_921", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the area of lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_train_922", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the area of lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_train_1007", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "mt whitney elevation", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_train_1058", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the elevation in feet of death valley", "source": "elevation of death valley", "target": "(call listValue (call getProperty fb:en.place.death_valley (string elevation_place_length)))", "qid": "geo880_train_1086", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how dense is california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_1099", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how many residents are in sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_1115", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "number of people in california", "source": "population of california", "target": "(call listValue (call getProperty fb:en.state.california (string population_state_count)))", "qid": "geo880_train_1273", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the area of california", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_1279", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the density of california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_1305", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "whats the population living in the capital of california", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_1334", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the density of california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_1350", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how many people live in sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_1380", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total density of california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_1430", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "mount whitneys elevation", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_train_1449", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "californias capital city", "source": "capital of california", "target": "(call listValue (call getProperty fb:en.state.california (string capital_state_city)))", "qid": "geo880_train_1507", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the area of ca", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_1527", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the size of california", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_1550", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of the colorado river", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_1571", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total amount of area in california", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_1573", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how tall is mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_train_1635", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the density of california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_1638", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_1725", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the elevation of death valley", "source": "elevation of death valley", "target": "(call listValue (call getProperty fb:en.place.death_valley (string elevation_place_length)))", "qid": "geo880_train_1735", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total height of mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_train_1745", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total area of california", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_1762", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population density of california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_1807", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population of california", "source": "population of california", "target": "(call listValue (call getProperty fb:en.state.california (string population_state_count)))", "qid": "geo880_train_1953", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "size of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_2005", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how long is the colorado river", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_2008", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what are the areas of lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_train_2010", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "which is the capital of california", "source": "capital of california", "target": "(call listValue (call getProperty fb:en.state.california (string capital_state_city)))", "qid": "geo880_train_2101", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population density of california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_2108", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of the colorado river", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_2247", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the height of mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_train_2294", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_2347", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how high up is death vallety", "source": "elevation of death valley", "target": "(call listValue (call getProperty fb:en.place.death_valley (string elevation_place_length)))", "qid": "geo880_train_2451", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the size of california in area", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_2482", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total density of california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_2515", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "californias density", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_train_2555", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total area of lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_train_2726", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "whats the total coverage of lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_train_2739", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of the colorado river", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_2771", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the elevation in feet of mt whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_train_2839", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is mount whitneys elevation", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_train_2878", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how long is the colorado river", "source": "length of colorado river", "target": "(call listValue (call getProperty fb:en.river.colorado (string len_river_length)))", "qid": "geo880_train_2894", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the current capital of california", "source": "capital of california", "target": "(call listValue (call getProperty fb:en.state.california (string capital_state_city)))", "qid": "geo880_train_2975", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is californias population", "source": "population of california", "target": "(call listValue (call getProperty fb:en.state.california (string population_state_count)))", "qid": "geo880_train_2982", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total population of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_test_13", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the elevation of mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_test_43", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how large is lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_test_166", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total area of lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_test_229", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the elevation of mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_test_246", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how high is the peak at mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_test_317", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how high is mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_test_342", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how dense is california", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_test_348", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population of california", "source": "population of california", "target": "(call listValue (call getProperty fb:en.state.california (string population_state_count)))", "qid": "geo880_test_365", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total population of california", "source": "population of california", "target": "(call listValue (call getProperty fb:en.state.california (string population_state_count)))", "qid": "geo880_test_378", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is californias density", "source": "density of california", "target": "(call listValue (call getProperty fb:en.state.california (string density_state_count)))", "qid": "geo880_test_402", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the elevation of mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_test_415", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how high is mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_test_503", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how many people live in california", "source": "population of california", "target": "(call listValue (call getProperty fb:en.state.california (string population_state_count)))", "qid": "geo880_test_686", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the area of lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_test_734", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what state contains a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have major rivers within them", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_train_210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has major lakes", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_662", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_875", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states contain a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_1052", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what are the important cities in the state", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_1248", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has major cities", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_1457", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "whicht states have a major city", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_1514", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state contains major rivers", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_train_1617", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain capital cities", "source": "state that city that is a capital is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_1633", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have a major city", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_1726", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have major lakes in them", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_1772", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have a major river", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_train_1836", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_1972", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state contains a large lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_2109", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain major rivers", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_train_2178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a capital city", "source": "state that city that is a capital is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_2338", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which state has a major river going through it", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_train_2429", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states are traversed by major rivers", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_train_2456", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain major cities", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_2824", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "state with a capital city", "source": "state that city that is a capital is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_2923", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state is passed by a major river", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_train_2955", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have major rivers going through them", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_test_3", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states contain a capital city", "source": "state that city that is a capital is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_test_14", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain major lakes", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_test_194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major city", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_test_286", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major city in it", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_test_354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain major lakes", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_test_407", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states contain major rivers", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_test_445", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state contains a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_test_574", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states contain major cities", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_test_724", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which river traverses the most number of states", "source": "river that traverses the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_105", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "places in fewest states", "source": "place that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_194", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is contained by the least number of states", "source": "city that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_195", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountain is contained by the largest number of states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_208", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which lake is located in the fewest states", "source": "lake that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_226", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river traverses the least number of states", "source": "river that traverses the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_241", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what location contains the greatest number of states", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_292", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake appears in the lowest number of states", "source": "lake that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_325", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state shares borders with the most state", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_328", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is contained by the fewest states", "source": "city that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_376", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which place has the most number of states", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_408", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river traverses the fewest states", "source": "river that traverses the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_434", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountain lies in the greatest number of states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_485", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a mountain spanning the fewest states", "source": "mountain that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_511", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states bordering fewest other states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_523", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state borders the least amount of states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_528", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states borders the most other states", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_590", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "a place that has a high number of people in the state", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_600", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river crosses through the fewest states", "source": "river that traverses the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_618", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state borders the least number of surrounding states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_628", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what rivers go through the greatest number of states", "source": "river that traverses the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_733", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state who has border with least number of states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_776", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which river traverses most number of states", "source": "river that traverses the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_792", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is contained by the least number of states", "source": "lake that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_810", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what place is contained by the lowest number of states", "source": "place that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1005", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which lake is contained by the least number of states", "source": "lake that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1068", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is contained by the fewest total states", "source": "lake that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1072", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders the least number of other states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1101", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which river spans the fewest states", "source": "river that traverses the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1207", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "lake in the most states", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1230", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what places fall into the fewest states", "source": "place that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1286", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what place is contained by the fewest states", "source": "place that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1313", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state borders the most number of states", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1422", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the name of a place that is contained by the highest number of states", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1453", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "mountains in least states", "source": "mountain that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1478", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what location is contained by the most states", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1484", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is contained in the greatest number of states", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1603", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is found in the greatest number of states", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1631", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which mountain is contained by the most states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1651", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is contained by the most states", "source": "city that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1684", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which lake traverses most number of states", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1688", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which lake is contained by the highest number of states", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1692", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountain is contained by the most states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1702", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which city name is contained by the most states", "source": "city that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1705", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states have the least number of bordering states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1729", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which mountain sits in the most states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1750", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river goes through the smallest number of states", "source": "river that traverses the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1758", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river goes through the least states", "source": "river that traverses the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1767", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountain is contained by the fewest states", "source": "mountain that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1832", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "rivers in the fewest states", "source": "river that traverses the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1854", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which mountain passes through the most states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1856", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountain is located in multiple states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1867", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is located in the greatest number of states", "source": "city that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2029", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is contained by the least states", "source": "city that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2035", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a feature found in the fewest states", "source": "place that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2081", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders the fewest other states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2119", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river runs through the greatest number of states", "source": "river that traverses the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2142", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "city in most states", "source": "city that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2241", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is contained by the least number of states", "source": "city that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2296", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is contained by the most state territories", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2300", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "city in the fewest states", "source": "city that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2318", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders the least states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2384", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city appears in the lowest number of states", "source": "city that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2391", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least number of states bordering it", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2491", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is contained by the least number of states", "source": "lake that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2501", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a city name that is contained by the largest number of states", "source": "city that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2506", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what location is contained by the least states", "source": "place that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2531", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is contained by the most number of states", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2564", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what place is contained by the most states", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2574", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake runs through the least states", "source": "lake that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2599", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state borders the most other states", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2639", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "place in most states", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2649", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what locations are in the fewest amount of states", "source": "place that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2702", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "mountain that traverses most number of states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2748", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders the greatest amount of other states", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2750", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "mountain that traverses least number of states", "source": "mountain that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2793", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the most states touching the border", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2815", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the most common city name in the united states", "source": "city that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2915", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountains are in only one state", "source": "mountain that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2950", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which place is contained by the smallest number of states", "source": "place that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2952", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state borders the highest number of other states", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_47", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is contained by the lowest number of states", "source": "lake that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_54", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river doesnt cross many states", "source": "river that traverses the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_85", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is contained by the most states", "source": "city that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_90", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which lake is contained by the most number of states", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_220", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which mountain resides in the least number of states", "source": "mountain that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_226", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which river crosses the greatest number of states", "source": "river that traverses the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_257", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river goes through the least number of states", "source": "river that traverses the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_259", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a mountain spanning the most states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_311", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states have the most lakes", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_430", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what place is contained in the most number of states", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_483", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state shares a border with highest number of other states", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_496", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders the least number of other states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_508", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river traverses the greatest number of states", "source": "river that traverses the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_592", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which river traverses the most states", "source": "river that traverses the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_626", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which mountain is contained by the most states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_646", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most shared borders", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_654", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which lake is contained by the most number of states", "source": "lake that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (string loc_lake_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_667", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river passes through the greatest amount of states", "source": "river that traverses the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_742", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is contained by the highest number of states", "source": "city that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (string loc_city_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_744", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state capital", "source": "state whose capital is city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a capital with the same name", "source": "state whose capital is city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_451", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the capital of the state", "source": "state whose capital is city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_573", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have a major city as their capital", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_690", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is a state whose capital city is also a major city", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_936", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states have a capital that are their major cities", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_972", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which state has a capital that is a major city", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_1367", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the capital of the state", "source": "state whose capital is city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_1811", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major capital city", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_1871", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have capital cities that are also major cities", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_2095", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major capital city", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_2177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "states with large capitals", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_2703", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states capital is a capital", "source": "state whose capital is city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_train_2934", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major capital", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_test_341", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major city as its capital", "source": "state whose capital is city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_test_690", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the length of the river", "source": "total length of river", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_2", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the area of the lake", "source": "total area of lake", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_3", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average river length", "source": "average length of river", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_25", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total elevation of a mountain", "source": "total elevation of mountain", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_37", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total density of city", "source": "total density of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_train_38", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the area of each state", "source": "total area of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_89", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how large is the lake", "source": "total area of lake", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_111", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how long is that river", "source": "total length of river", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_129", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average density of a city", "source": "average density of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_train_151", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the height of the mountain", "source": "total elevation of mountain", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_165", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average mountain elevation", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_177", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how large is each state", "source": "average area of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_182", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of the city", "source": "total area of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_183", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population size of the city", "source": "average population of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_252", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of a city", "source": "average population of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_266", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of the place", "source": "average elevation of place", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_316", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average length of a river", "source": "average length of river", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_344", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how long are most rivers", "source": "average length of river", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_372", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how many people live in a state", "source": "total population of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_398", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average length of a river", "source": "average length of river", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_400", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how big is a city", "source": "total population of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_457", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how large in area is the average state", "source": "average area of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_476", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is average elevation of this place", "source": "average elevation of place", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_500", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "whats the average number of people living in any given state", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_683", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average density of a city", "source": "average density of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_train_749", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the citys population", "source": "total population of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_757", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of the city", "source": "average area of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_762", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of each state", "source": "total area of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_764", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total density of a city", "source": "total density of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_train_787", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "whats the area of the average city", "source": "average area of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_791", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of the city", "source": "total area of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_857", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of the location", "source": "average elevation of place", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_874", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how populous is this state", "source": "total population of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_887", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of the city", "source": "total area of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_907", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "whats the average elevation of a mountain top", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_918", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a lake", "source": "average area of lake", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_963", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average city area", "source": "average area of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_996", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of the lake", "source": "total area of lake", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_1031", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average land area of the states", "source": "average area of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_1071", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "show me the average population by state", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_1076", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of this place", "source": "average elevation of place", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_1116", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total size in area of the state", "source": "total area of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_1131", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total population of the state", "source": "total population of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_1146", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "states by average density", "source": "average density of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_1157", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of the states", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_1206", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a city", "source": "average area of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_1222", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of a mountain", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_1235", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "state densities", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_1270", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total are of a state", "source": "total area of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_1295", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of the state", "source": "total area of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_1301", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how long is the river", "source": "total length of river", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_1308", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the river s average length", "source": "average length of river", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_1310", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of the city", "source": "average density of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_train_1316", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "wha is the average elevation of a location", "source": "average elevation of place", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_1319", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of the mountain", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_1323", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is a places total elevation", "source": "total elevation of place", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_1333", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the population density of the state", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_1337", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average city density", "source": "average density of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_train_1369", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how long is the river", "source": "total length of river", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_1382", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the population of state", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_1389", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total density of a state", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_1446", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a lake", "source": "average area of lake", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_1485", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total elevation", "source": "total elevation of place", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_1525", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how much total coverage do lakes have", "source": "total area of lake", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_1535", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of the cities in the us", "source": "average population of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_1581", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average density of the states", "source": "average density of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_1642", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the population total of the state", "source": "total population of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_1650", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the lakes area", "source": "total area of lake", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_1667", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a lake", "source": "average area of lake", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_1670", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of a mountain", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_1687", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "mean state population", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_1689", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total elevation of a mountain", "source": "total elevation of mountain", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_1696", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the averge density of a state", "source": "average density of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_1697", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "average length of river", "source": "average length of river", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_1708", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of the lake", "source": "total area of lake", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_1709", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the land area of this state", "source": "total area of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_1731", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the population of the city", "source": "total population of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_1733", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "state populations", "source": "total population of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_1748", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "average city population", "source": "average population of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_1847", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how dense is the city", "source": "total density of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_train_1861", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is average population of state", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_1883", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average lake area", "source": "average area of lake", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_1894", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is a rivers total length", "source": "total length of river", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_1932", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total density of texas", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_1970", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total elevation", "source": "total elevation of place", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_1992", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area for lakes", "source": "average area of lake", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_2121", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of this state", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_2129", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the states population", "source": "total population of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_2144", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area all the states", "source": "average area of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_2160", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the states total population", "source": "total population of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_2165", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "whats the average population of a city", "source": "average population of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_2220", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the population density of the state", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_2257", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total population of a certain city", "source": "total population of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_2288", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the elevation of that particular place", "source": "total elevation of place", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_2305", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total elevation height of the mountain", "source": "total elevation of mountain", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_2334", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total density of a state", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_2340", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the size of the city by area", "source": "total area of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_2394", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the population of each state", "source": "total population of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_train_2398", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average length of rivers", "source": "average length of river", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_2410", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "total length of river", "source": "total length of river", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_2471", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average mountain height", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_train_2480", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a city", "source": "average area of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_2483", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of the city", "source": "total area of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_2488", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of this area", "source": "average elevation of place", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_2552", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average city population", "source": "average population of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_2614", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total elevation at the location", "source": "total elevation of place", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_train_2618", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is a total city population", "source": "total population of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_2642", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a city", "source": "average area of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_2736", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of a city", "source": "average population of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_2740", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of the state", "source": "total area of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_2796", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of a city", "source": "average population of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_train_2798", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how long is the river", "source": "total length of river", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_train_2848", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average size in area of the city", "source": "average area of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_2851", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of the city", "source": "total area of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_2875", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total density of the state", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_train_2885", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average size of a lake", "source": "average area of lake", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_train_2904", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a state", "source": "average area of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_train_2937", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a city", "source": "average area of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_train_2986", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average size in area of this state", "source": "average area of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_test_4", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total population density of that state", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_test_21", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population density of the state", "source": "average density of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_test_25", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average density of a state", "source": "average density of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_test_55", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average size of a state", "source": "average area of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_test_92", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of the mountain range", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_test_107", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "average place elevations", "source": "average elevation of place", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_test_133", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of the mountains", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_test_157", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average density of the state", "source": "average density of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_test_159", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a state", "source": "average area of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_test_176", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of a state", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_test_250", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of each state", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_test_263", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average density of the state", "source": "average density of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_test_270", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of a lake", "source": "average area of lake", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2))))", "qid": "geo880_test_280", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "cities by land area", "source": "total area of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_test_290", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the highest point of the place", "source": "total elevation of place", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_test_292", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population density of the city", "source": "average density of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_test_304", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of mountains", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_test_327", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "show the total population of city", "source": "total population of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_test_328", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area of the cities", "source": "average area of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2))))", "qid": "geo880_test_330", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population of cities", "source": "average population of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_test_366", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total density for all cities", "source": "total density of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_test_397", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average density of a city", "source": "average density of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_test_416", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how big is the average state as far as total area", "source": "average area of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2))))", "qid": "geo880_test_441", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "whats the average population of a state", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_test_453", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the highest elevation of any mountain", "source": "total elevation of mountain", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_test_464", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the elevation", "source": "total elevation of place", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_test_474", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "total density of city", "source": "total density of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_test_484", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total population of each state", "source": "total population of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_test_571", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total elevation of mountain", "source": "total elevation of mountain", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_test_583", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average density of a state", "source": "average density of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_test_595", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average height of a particular place", "source": "average elevation of place", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_test_619", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average length of a river", "source": "average length of river", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length))))", "qid": "geo880_test_632", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of the location", "source": "average elevation of place", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length))))", "qid": "geo880_test_639", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "average density of city", "source": "average density of city", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count))))", "qid": "geo880_test_669", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average elevation of all mountains", "source": "average elevation of mountain", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length))))", "qid": "geo880_test_680", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average population size of the state", "source": "average population of state", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string population_state_count))))", "qid": "geo880_test_694", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the population of the city", "source": "total population of city", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count))))", "qid": "geo880_test_707", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total density of the state", "source": "total density of state", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton fb:en.state) (string !type)) (string density_state_count))))", "qid": "geo880_test_725", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what river is not in california", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_train_16", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what cities are not in california", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_train_57", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what lakes are contained with california", "source": "lake that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_59", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has sacramento as the capital", "source": "state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_78", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name a city in ca", "source": "city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_125", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what cities are not in california", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_train_162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what mountains are found in california", "source": "mountain that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_train_200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a city that is not in california", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_train_211", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a state that does not border california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_train_301", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name some states other than california", "source": "place that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string !=) fb:en.state.california))", "qid": "geo880_train_496", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "mountain out of california", "source": "mountain that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string !=) fb:en.state.california))", "qid": "geo880_train_542", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what river does not go through california", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_train_562", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states do not border ca", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_train_576", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento for its capital", "source": "state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_702", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a city that is contained by california", "source": "city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_709", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states dont have a capital of sacramento", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_725", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "places outside california", "source": "place that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string !=) fb:en.state.california))", "qid": "geo880_train_728", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "state with the capital of sacramento", "source": "state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_753", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what lake is not in ca", "source": "lake that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string !=) fb:en.state.california))", "qid": "geo880_train_779", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what mountains are not in california", "source": "mountain that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string !=) fb:en.state.california))", "qid": "geo880_train_780", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states do not have sacramento as the capital", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_835", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what river travels through california", "source": "river that traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_858", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what cities are in california", "source": "city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_871", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states are connected to california", "source": "state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_888", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a river found in california", "source": "river that traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_989", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "places located in california", "source": "place that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california))", "qid": "geo880_train_1011", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what place is not in california", "source": "place that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1134", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what rivers do not traverse california", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1148", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "states that are distant from california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1223", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state is next to california", "source": "state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1236", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name a state whose capital is something other than sacramento", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_1244", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a city in ca", "source": "city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1247", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a bordering state of california", "source": "state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what are the states other than california", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_1346", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which cities are contained within california", "source": "city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1481", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which mountain is contained by california", "source": "mountain that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_train_1519", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name a state that does not border california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1600", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a lake not found in ca", "source": "lake that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1626", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what mountains are not in california", "source": "mountain that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1647", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what cities are in california", "source": "city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1706", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is not in california", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1775", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the name of a lake that is contained by california", "source": "lake that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_1793", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what river does not go through california", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1794", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is contained by california", "source": "city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1796", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a lake that is contained by california", "source": "lake that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_1797", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states do not border california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1831", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which mountains are not in california", "source": "mountain that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1877", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what lakes are outside of california", "source": "lake that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1907", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what cities are in california", "source": "city that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1913", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what rivers pass through californias borders", "source": "river that traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_1971", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name a city not in ca", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2033", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what mountain is not located in california", "source": "mountain that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2048", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "research project", "source": "place that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2070", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which locations are no in california", "source": "place that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2071", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state doesnt border california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which mountains are in california", "source": "mountain that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_train_2263", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which lake is not in california", "source": "lake that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2333", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not border california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2364", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what rivers cross california", "source": "river that traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_2371", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which mountain is contained by california", "source": "mountain that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_train_2399", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what lake is not in california", "source": "lake that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2505", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states do not have a capital of sacramento", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_2525", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what lake does not go through california", "source": "lake that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2601", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is not in california", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2616", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what rivers dont go through california", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2621", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is not in ca", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2661", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a mountain that is not in california", "source": "mountain that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2692", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name a mountain in another state besides ca", "source": "mountain that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2701", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "whos state capital is not sacramento", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_2767", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what location is not in california", "source": "place that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2791", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what places are located in california", "source": "place that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california))", "qid": "geo880_train_2820", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a state whose capital city is not sacramento", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_2825", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what river traverses california", "source": "river that traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_2843", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not have sacremento as a capital", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_2870", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has a capital of sacramento", "source": "state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2871", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what location is not california", "source": "place that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string !=) fb:en.state.california))", "qid": "geo880_train_2914", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is not sacramento", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_2917", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a capital that is not sacramento", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_2947", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a river not found in ca", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_test_19", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not border california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_test_34", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what mountain is not in california", "source": "mountain that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string !=) fb:en.state.california))", "qid": "geo880_test_50", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what rivers run through states that arent california", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_test_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "cities outside of california", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_test_123", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what places are in california", "source": "place that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california))", "qid": "geo880_test_228", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a mountain in ca", "source": "mountain that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_test_244", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which mountains are in california", "source": "mountain that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_test_282", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "rivers in the state of california", "source": "river that traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_test_306", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which lakes are not in california", "source": "lake that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string !=) fb:en.state.california))", "qid": "geo880_test_336", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what has sacramento as the capital", "source": "state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_339", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states dont border california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_test_345", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "lakes outside of california", "source": "lake that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string !=) fb:en.state.california))", "qid": "geo880_test_356", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is not in california", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_test_442", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "a location in california", "source": "place that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california))", "qid": "geo880_test_546", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a place that is not in california", "source": "place that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string !=) fb:en.state.california))", "qid": "geo880_test_554", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a mountain not in ca", "source": "mountain that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string !=) fb:en.state.california))", "qid": "geo880_test_577", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a lake located in ca", "source": "lake that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_test_588", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has as its capital sacramento", "source": "state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_612", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "a river that flows outside of california", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_test_629", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is not in california", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_test_638", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a place in california", "source": "place that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california))", "qid": "geo880_test_647", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "rivers not in california", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_test_652", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "states not bordering california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_test_673", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what significant lakes are found in california", "source": "lake that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_676", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city has a capital in california", "source": "city that is a capital and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_719", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name a large city in ca", "source": "city that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_731", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major river passes california", "source": "river that is major and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_1016", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major city is not california", "source": "city that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1156", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major river flows through califronia", "source": "river that is major and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_1173", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which is a major city in california", "source": "city that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1314", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major city is contained by california", "source": "city that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1497", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city in california is a capital", "source": "city that is a capital and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1666", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a major city in california", "source": "city that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1784", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what are the main rivers that pass through california", "source": "river that is major and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_1950", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major river is in california", "source": "river that is major and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_2090", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major lakes are in california", "source": "lake that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_2172", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the capital city in california", "source": "city that is a capital and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_2299", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major cities are not in california", "source": "city that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_2412", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "major rivers traverse california", "source": "river that is major and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_2459", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which major lakes are in california", "source": "lake that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_2635", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the capital city of ca", "source": "city that is a capital and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_2651", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is californias major lake", "source": "lake that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_2901", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a major lake in ca", "source": "lake that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_2985", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which major cities are in california", "source": "city that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_test_108", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major city is contained by california", "source": "city that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_test_177", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a major city in california", "source": "city that is major and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_test_293", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major river crosses california", "source": "river that is major and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_test_433", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the capital of california", "source": "city that is a capital and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_test_710", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what mountain has the lowest elevation", "source": "mountain that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_7", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the greatest land area", "source": "state that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_60", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the lake with the smallest area", "source": "lake that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_84", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state has the most area", "source": "state that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_143", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the least amount of area in it", "source": "city that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_174", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what location has the lowest elevation", "source": "place that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_179", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "shortest length", "source": "river that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_192", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what lake has the greatest area", "source": "lake that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_220", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "tallest mountain", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_230", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the least amount of area", "source": "state that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_236", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state has the smallest population", "source": "state that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_253", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the shortest river", "source": "river that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_255", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the least residents", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_278", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which area has the highest elevation", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_305", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain has the tiniest elevation", "source": "mountain that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_323", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the city with the least density", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_327", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what river is the longest", "source": "river that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_410", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain has the lowest elevation", "source": "mountain that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_431", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the most dense city", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_432", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the biggest lake of all", "source": "lake that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_445", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "state that has most population per sq meter", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_458", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the largest area", "source": "state that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_519", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what river has the longest length", "source": "river that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_547", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which mountain has the lowest elevation", "source": "mountain that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_568", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain has the greatest amount of elevation", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_579", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city is smallest in population", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_595", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the shortest river", "source": "river that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_598", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "name the state with the largest population density", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_616", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain has the lowest elevation", "source": "mountain that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_642", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which one the largest state", "source": "state that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_661", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "most populated state", "source": "state that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_663", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which states is smallest in area", "source": "state that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_696", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the lowest population density", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_699", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city is smallest in population", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_737", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the smallest area", "source": "state that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_781", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the largest density", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_795", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the smallest area", "source": "city that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_865", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city is greatest in population density", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_882", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what cities have the greatest amount of area", "source": "city that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_903", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the lowest population", "source": "state that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_923", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain has the largest elevation", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_945", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what lake covers the most area", "source": "lake that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_976", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain is the smallest by elevation", "source": "mountain that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_990", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "city with smallest populations", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_1001", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the greatest density", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_1019", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the smallest river", "source": "river that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_1059", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the smallest density", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_1079", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city is the most populated", "source": "city that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_1089", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what location has the highest elevation", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_1127", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountains elevation is the lowest", "source": "mountain that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_1147", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the most people", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_1160", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is a lake that has the smallest size in area", "source": "lake that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_1166", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the smallest area", "source": "state that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_1176", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city has the smallest total area", "source": "city that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_1185", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the largest city by area", "source": "city that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_1221", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "name the largest lake", "source": "lake that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_1249", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the largest lake", "source": "lake that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_1259", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the largest area", "source": "state that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_1278", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the least population", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_1285", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what place has the highest elevation", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_1297", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the smallest density", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_1322", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is longest river", "source": "river that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_1374", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the largest density", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_1450", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what lake has the smallest area", "source": "lake that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_1473", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "smallest state by population", "source": "state that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_1475", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city is smallest in area", "source": "city that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_1482", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what states has the lowest population", "source": "state that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_1541", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what location has the highest elevation", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_1568", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "in what state will i find the fewest people per square mile", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_1652", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain has the highest elevation", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_1656", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what has the largest density", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_1657", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what place has the highest elevation", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_1701", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain has the highest elevation", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_1716", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what river has the largest length", "source": "river that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_1720", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the smallest lake", "source": "lake that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_1730", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "city with largest density", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_1736", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the shortest river", "source": "river that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_1742", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "where is the lowest place", "source": "place that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_1747", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what place has the lowest elevation", "source": "place that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_1751", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the most residents", "source": "state that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_1756", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the smallest state by population", "source": "state that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_1780", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which lake is smallest", "source": "lake that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_1802", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which is the lowest mountain", "source": "mountain that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_1804", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the largest state by density", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_1835", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the highest population density", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_1858", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city covers the biggest area", "source": "city that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_1935", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "city with larges land area", "source": "city that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_1945", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "whats the lowest place in elevation", "source": "place that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_1949", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the least area", "source": "city that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_1955", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city is the least populated", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_1995", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which is the most thinly populated city", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_2001", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which location has the smallest elevation", "source": "place that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_2011", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the lowest mountain", "source": "mountain that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_2017", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "city with smallest density", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_2018", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the fewest people", "source": "state that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_2040", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "highest mountain", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_2047", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the largest population", "source": "state that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_2067", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what location has the highest elevation", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_2068", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "whats the biggest city sizewise", "source": "city that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_2097", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which river is the shortest", "source": "river that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_2155", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which is the smallest lake by area", "source": "lake that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_2180", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the smallest density", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_2181", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the greatest area", "source": "city that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_2182", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "city with the most population", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_2187", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the smallest density", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_2244", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city has the smallest density", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_train_2255", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state has the lowest population density", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_2268", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the largest lake by area", "source": "lake that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_train_2339", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which river is the longest", "source": "river that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_2348", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city is least populous", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_2361", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city has the largest population", "source": "city that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_2368", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the greatest area", "source": "city that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_2419", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the smallest area", "source": "city that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_2447", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what place has the lowest elevation", "source": "place that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_2449", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state has the largest density", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_2450", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain reaches the highest elevation", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_2489", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the largest state by density", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_2511", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the lowest population", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_2544", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the highest population", "source": "state that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_2546", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what place has the highest elevation", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_2592", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the greatest population", "source": "city that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_2602", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the smallest city by population", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_2623", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the smallest land area", "source": "city that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_2630", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "city with smallest land area", "source": "city that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_train_2657", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the least dense state", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_2660", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "name the shortest river", "source": "river that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_train_2671", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the most dense state", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_2684", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what place has the highest elevation", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_2699", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what place has the highest elevation", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_2724", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the lowest density", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_train_2729", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what places have the least elevation", "source": "place that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_2732", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "city that has largest population", "source": "city that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_2737", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what mountain has the highest elevation", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_train_2738", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state has the smallest population", "source": "state that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_2753", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "state with largest population", "source": "state that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_2762", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state is largest by population size", "source": "state that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_2766", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the smallest area", "source": "state that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_2797", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the most people", "source": "city that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_2821", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the smallest area", "source": "state that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_train_2864", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the smallest population", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_train_2882", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what location has the least amount of elevation", "source": "place that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_train_2965", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state is smallest in population", "source": "state that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_train_2994", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the least density", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_test_17", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state has the largest density", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_test_56", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the smallest area", "source": "city that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_test_82", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what river is the longest", "source": "river that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_test_111", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the smallest density", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_test_114", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state is the smallest by area", "source": "state that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_test_118", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the shortest river", "source": "river that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_test_134", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the smallest lake by area", "source": "lake that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string min) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_test_170", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state has the lowest population density", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_test_231", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state has the highest population density", "source": "state that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_test_237", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the biggest lake by area", "source": "lake that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.lake) (string !type)) (string max) (call ensureNumericProperty (string area_lake_length^2))))", "qid": "geo880_test_240", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state is largest in size by area", "source": "state that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_test_255", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which mountain is highest in elevation", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_test_269", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city has the largest density", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_test_289", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city has the highest population", "source": "city that has the largest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_test_332", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the smallest density", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_test_335", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which city has the largest population", "source": "city that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_test_357", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the greatest amount of area", "source": "state that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_test_404", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "whats the biggest mountain by overall size", "source": "mountain that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (call ensureNumericProperty (string elevation_mountain_length))))", "qid": "geo880_test_410", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what are covers the least area", "source": "state that has the smallest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_test_443", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what cit is smallest in population", "source": "city that has the smallest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_test_451", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which is the most lengthy river", "source": "river that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_test_466", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "name the largest city by area", "source": "city that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string area_city_length^2))))", "qid": "geo880_test_492", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which site is the highest", "source": "place that has the largest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_test_526", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the greatest area", "source": "state that has the largest area", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string area_state_length^2))))", "qid": "geo880_test_568", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the least density", "source": "city that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call ensureNumericProperty (string density_city_count))))", "qid": "geo880_test_603", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what town has the smallest about of elevation", "source": "place that has the smallest elevation", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (call ensureNumericProperty (string elevation_place_length))))", "qid": "geo880_test_615", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what river has the shortest length", "source": "river that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.river) (string !type)) (string min) (call ensureNumericProperty (string len_river_length))))", "qid": "geo880_test_670", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what city has the greatest population", "source": "city that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call ensureNumericProperty (string population_city_count))))", "qid": "geo880_test_672", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the most population", "source": "state that has the largest population", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call ensureNumericProperty (string population_state_count))))", "qid": "geo880_test_699", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what state has the smallest density", "source": "state that has the smallest density", "target": "(call listValue (call superlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call ensureNumericProperty (string density_state_count))))", "qid": "geo880_test_746", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which state borders california and has sacramento as its capital", "source": "state that borders california and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_21", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name a state bordering ca", "source": "state that borders california and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_48", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a city in california", "source": "city that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_50", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "cities of california", "source": "city that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_149", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as a capital and borders on california", "source": "state whose capital is sacramento and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_203", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the name of a mountain in california", "source": "mountain that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_train_441", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california", "source": "state that borders california and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_497", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "states that border california", "source": "state that borders california and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_514", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what rivers cross through california", "source": "river that traverses california and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_530", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what mountain is entirely within california", "source": "mountain that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_train_705", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a mountain in california", "source": "mountain that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_train_785", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what lakes are in california", "source": "lake that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) fb:en.state.california) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_793", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states border scaramento california", "source": "state that borders california and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_849", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is sacramento and borders california", "source": "state that borders california and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_904", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as its capital and borders california", "source": "state whose capital is sacramento and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1081", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what river crosses through california", "source": "river that traverses california and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_1218", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is contained by california", "source": "city that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1338", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders v and has a capital of sacramento", "source": "state whose capital is sacramento and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1339", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the biggest city in california", "source": "city that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1397", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the name of a lake found in ca", "source": "lake that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) fb:en.state.california) (string loc_lake_state) (string =) fb:en.state.california))", "qid": "geo880_train_1504", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "mountain that is contained by california", "source": "mountain that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_train_1598", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the river that crosses california", "source": "river that traverses california and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_1605", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a captial of sacramento", "source": "state whose capital is sacramento and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1823", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name a river found in ca", "source": "river that traverses california and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_1857", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders ca", "source": "state that borders california and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1930", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states connect borders with california who also have a capital of sacramento", "source": "state that borders california and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2301", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with a capital of sacramento and borders california", "source": "state whose capital is sacramento and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2446", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state border california", "source": "state that borders california and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2481", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the state has sacramento as the capital", "source": "state that borders california and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2704", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states only share a border with california", "source": "state that borders california and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2770", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what place is contained by california", "source": "place that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california) (string loc_place_state) (string =) fb:en.state.california))", "qid": "geo880_train_2887", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what are californias mountains", "source": "mountain that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_test_164", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "state whose capital is sacramento", "source": "state whose capital is sacramento and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_180", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "mountains in california", "source": "mountain that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_test_184", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has sacramento as its capital and forms a border for california", "source": "state whose capital is sacramento and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_272", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has a capital of sacramento", "source": "state that borders california and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_283", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what rivers dont flow beyond california", "source": "river that traverses california and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_test_507", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as its capital and borders california", "source": "state whose capital is sacramento and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_530", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what river traverses ca", "source": "river that traverses california and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_test_566", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "how many cities are in california", "source": "city that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_test_609", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what rivers go through california", "source": "river that traverses california and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_test_631", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a broder with v and a capital of sacramento", "source": "state that borders california and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_634", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1345", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1411", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1420", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital of california", "source": "city that is a capital and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1486", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_2628", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital city of california", "source": "city that is a capital and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_2919", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_test_590", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders two others", "source": "state that more than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_39", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of at least 2 states", "source": "city that is capital of at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_69", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or fewer lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_73", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has only one of these places", "source": "state that less than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_85", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states with two or more cities", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_88", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has less than two locations", "source": "state that less than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_90", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has less than 2 cities", "source": "state that less than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_127", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "this state has two rivers that run through it", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_130", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or more rivers", "source": "state that at most two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_139", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states that two or more rivers flow through", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_140", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states with fewer than two rivers", "source": "state that less than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_164", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has less than two lakes in it", "source": "state that less than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_181", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has no more than two locations in it", "source": "state that at most two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_193", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains two places or more", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_197", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is home to at least two lakes", "source": "state that two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_215", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of less than two states", "source": "city that is capital of less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_261", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states have more than two rivers", "source": "state that more than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_267", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or more rivers passing through it", "source": "state that at least two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_272", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with two places", "source": "state that two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_287", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of two states", "source": "city that is capital of at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_300", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with more than two mountains", "source": "state that more than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_303", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains more than two state borders", "source": "state that more than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_309", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is contained by more than two places", "source": "state that more than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_333", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with at least two state borders", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_352", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states contain at least two places", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_353", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains fewer than two mountains", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_355", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "cities that are capitals of less than two states", "source": "city that is capital of less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_367", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states contain no more than two cities", "source": "state that at most two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_380", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states are traversed by more than two rivers", "source": "state that more than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_382", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains two mountains", "source": "state that two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_387", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has over two river traverses", "source": "state that more than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_389", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have at least two cities in them", "source": "state that at least two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_392", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has 2 mountains", "source": "state that two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_393", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is bordered by no more than two other states", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_406", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains two lakes or less", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_416", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has less than two state borders", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_417", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or more places in it", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_429", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a state with no more than two rivers", "source": "state that at most two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_430", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states are bordered by at least two states", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_435", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at most 2 lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_471", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of no more than two states", "source": "city that is capital of at most two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_475", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with two or more mountains", "source": "state that at most two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_480", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two lakes in it", "source": "state that two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_482", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or more places in it", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_489", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which city is the capital of more than one state", "source": "city that is capital of more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_501", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state that has two or fewer rivers", "source": "state that at most two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_524", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more than two cities in it", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_533", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is crossed by at least two rivers", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_540", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states contains two or more mountains", "source": "state that at least two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_549", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what capital city is in two states", "source": "city that is capital of two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_552", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which city is the capital of at least two states", "source": "city that is capital of at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_555", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states has two places", "source": "state that two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_565", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states borders fewer than two other states", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_592", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states contain at least two mountains", "source": "state that at least two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_606", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more than two rivers running through it", "source": "state that more than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_608", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has fewer than two major cities in it", "source": "state that less than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_619", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two lakes or less", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_629", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state that has two or more mountains", "source": "state that more than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_646", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have more than a single city", "source": "state that at least two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_651", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of over two states", "source": "city that is capital of more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_674", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at most 2 lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_680", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at least two major cities", "source": "state that at least two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_687", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of less than two states", "source": "city that is capital of less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_704", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at least two mountains in it", "source": "state that at least two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_710", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states contain two places or more", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_722", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at most 2 lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_741", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states with two or more borders", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_746", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with more than two rivers", "source": "state that at least two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_815", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has more than two lakes", "source": "state that more than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_838", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has only two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_872", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains more than two mountains", "source": "state that more than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_876", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or less lakes in it", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_895", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state  shares only two borders with other states", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_896", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states have more than two borders", "source": "state that more than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_897", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has fewer than two cities", "source": "state that less than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_914", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have two or more rivers flower through them", "source": "state that more than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_919", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states have more than two lakes in them", "source": "state that more than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_940", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of more than two states", "source": "city that is capital of more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_967", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have no more than two rivers", "source": "state that at most two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_985", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more than two rivers passing through", "source": "state that more than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1010", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states border less than two states", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1024", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at most two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1025", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of two or more states", "source": "city that is capital of at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1032", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has one or two cities", "source": "state that at most two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1033", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have at most two state borders", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1041", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have fewer than two cities in them", "source": "state that less than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1043", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at least two lakes in it", "source": "state that at least two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1055", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has under two places in it", "source": "state that less than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1064", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which is city is the capital of two states", "source": "city that is capital of two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1102", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two states bordering it", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1109", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders at least two states", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1137", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of three states or more", "source": "city that is capital of more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1155", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states has at least two lakes", "source": "state that two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1167", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has less than two traversing rivers", "source": "state that less than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1175", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have more than two cities", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1188", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state that only borders two other states at most", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1194", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders at least two states", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1198", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of greater than two states", "source": "city that is capital of more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1209", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state is traversed by two rivers", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1213", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is traversed by fewer than two rivers", "source": "state that less than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1239", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states contain at most two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1256", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has less than two mountains", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1261", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state is traversed by two rivers", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1272", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has only a single neighboring state", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1290", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states are bordered by two other states", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1292", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders only two states", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1302", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains fewer than two cities", "source": "state that less than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1307", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has fewer than two cities", "source": "state that less than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1317", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have more than two state borders", "source": "state that more than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1347", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have no more than two bordering states", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1349", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two lakes", "source": "state that two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1354", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is a capital of over two states", "source": "city that is capital of more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1355", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has only one lake", "source": "state that less than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1357", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has fewer than two mountains", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1377", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have two or more rivers flowing through them", "source": "state that at least two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1378", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has more than two lakes", "source": "state that more than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1385", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or more lakes located in it", "source": "state that at least two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1390", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two lakes", "source": "state that two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1407", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have exactly two mountains in them", "source": "state that two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1409", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what capital city is found in two ore more states", "source": "city that is capital of at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1433", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two places in it", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1441", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders two states", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1445", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states contain no more than two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1458", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains two cities", "source": "state that two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1461", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is also the capital of two states", "source": "city that is capital of less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1468", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has less than two rivers", "source": "state that less than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1494", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states that contain no more than two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1496", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have less than two mountains", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1499", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have two or more cities somewhere in them", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1512", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has only one state bordering it", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1526", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two cities in it", "source": "state that two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1546", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states are bordered by two states", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1554", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two lakes or fewer", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1577", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more than 2 places", "source": "state that more than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1675", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at least two places", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1676", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has less than two cities in it", "source": "state that less than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1679", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has fewer than two lakes in it", "source": "state that less than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1685", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state with two lakes", "source": "state that two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1699", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states contain three or more places", "source": "state that more than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1723", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at least two mountains or rivers", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1759", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at least 2 places", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1763", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states bordering two other states", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1783", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains more than two lakes", "source": "state that more than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1786", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains two lakes or less", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1788", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or less places in it", "source": "state that at most two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1815", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two rivers crossing through", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1870", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contain more than two cities", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1875", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has no more than two lakes", "source": "state that less than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1885", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states with less than two lakes", "source": "state that less than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1927", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of more than two states", "source": "city that is capital of more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1933", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have less than two rivers in it", "source": "state that less than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1941", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states with fewer than two places", "source": "state that less than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1964", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states have more than two cities", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1965", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1979", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have more than two lakes", "source": "state that more than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1985", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what cities are the capital of at most two states", "source": "city that is capital of at most two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2003", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states contain two or less lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2007", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has two mountains in it", "source": "state that two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2028", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at least two lakes", "source": "state that at least two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2036", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state is traversed by at most two rivers", "source": "state that at most two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2039", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two bordering states", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2055", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states contain portions of the same city", "source": "state that less than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2074", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has 2 cities", "source": "state that two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2113", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more then two cities", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2125", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a state containing fewer than two rivers", "source": "state that less than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2193", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at most two cities", "source": "state that at most two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2199", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with maximthaum two mountains", "source": "state that at most two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2211", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is traversed by no more than two rivers", "source": "state that at most two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2223", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state that has no more than two geographical features", "source": "state that at most two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2229", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is traversed by more than two rivers", "source": "state that more than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2242", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has at least two mountains", "source": "state that at least two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2298", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state that has only one mountain", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2303", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has more than two mountains", "source": "state that more than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2317", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has less than two lakes", "source": "state that less than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2323", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more than a lone lake", "source": "state that at least two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2325", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state that has at least two lakes", "source": "state that at least two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2330", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two rivers crossing it", "source": "state that at least two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2341", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with at most two state borders", "source": "state that more than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2369", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states are traversed by fewer than two rivers", "source": "state that less than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2397", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of two states", "source": "city that is capital of two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2411", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "list all states that contain at most two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2415", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state only has two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2422", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state that has less than two state borders", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2430", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state bordering more than two other states", "source": "state that more than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2465", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has a minimum of two cities", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2469", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two mountains", "source": "state that at most two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2478", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "this is nonsensical", "source": "state that two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2484", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states contains fewer than two lakes", "source": "state that less than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2486", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of no less than two states", "source": "city that is capital of at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2497", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has fewer than two places", "source": "state that less than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2500", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have no more than two mountains in them", "source": "state that at most two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2507", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at most 2 cities", "source": "state that at most two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2520", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains at least two cities", "source": "state that at least two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2528", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states contain no more than two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2529", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has greater than two cities in it", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2542", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have two locations", "source": "state that two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2553", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at least two cities", "source": "state that at least two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2565", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains one city", "source": "state that less than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2615", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or less states next to it", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2620", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at least two state borders", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2650", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city if the capital of two states", "source": "city that is capital of two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2666", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or fewer cities in it", "source": "state that at most two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2675", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has multiple lakes", "source": "state that more than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2718", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains more than two places", "source": "state that more than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2720", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has fewer than two mountains", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2757", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains no more than two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2758", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states with fewer than two mountains", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2805", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains at least two lakes", "source": "state that at least two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2836", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a capital of any one state", "source": "city that is capital of less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2854", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has two or more state borders", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2856", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of 2 states", "source": "city that is capital of two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2858", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have two lakes in them", "source": "state that two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2879", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have at least two cities", "source": "state that at least two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2883", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states contains more than two cities", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2893", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains no more than two cities", "source": "state that at most two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2907", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at least 2 places", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2916", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have fewer than two lakes", "source": "state that less than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2931", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of more than two states", "source": "city that is capital of more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2933", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have at least two state borders", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2941", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which city is the capital of two states", "source": "city that is capital of two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2974", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2993", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states have three or more borders with other states", "source": "state that more than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_22", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states are traversed by two rivers", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_31", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state containing no more than two mountains", "source": "state that at most two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_42", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or more mountains in it", "source": "state that at least two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_46", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more than two rivers that traverse it", "source": "state that more than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_67", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains two cities", "source": "state that two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_80", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or more mountains", "source": "state that at least two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_94", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states that have at least two places", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_112", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states bordering two or more others", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_122", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders at most two other states", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_127", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has fewer than two mountains in it", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_142", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a state that borders no more than two other states", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_148", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states contains more than two lakes", "source": "state that more than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_155", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is capital of two states", "source": "city that is capital of two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_158", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or more rivers crossing", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_160", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is a capital of at most two states", "source": "city that is capital of at most two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_183", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states only bordering two other states", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_188", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of fewer than two states", "source": "city that is capital of less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_191", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of two states", "source": "city that is capital of two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_193", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at most two locations", "source": "state that at most two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_199", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states contain atleast two rivers", "source": "state that more than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_213", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have less than two rivers", "source": "state that less than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_224", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states are bordered by only one or no states", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_230", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains two cities", "source": "state that two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_236", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has no more than two mountains in it", "source": "state that at most two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_238", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with fewer than two places", "source": "state that at most two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_264", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states have at most two mountains", "source": "state that at most two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_266", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at least two mountains", "source": "state that at least two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_267", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders at most two other states", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_271", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has two other states bordering it", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_275", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or fewer places", "source": "state that at most two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_322", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has within it no more than two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_346", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states are bordered by more than two states", "source": "state that more than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_355", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at most two rivers that traverse it", "source": "state that at most two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_374", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has over two mountains", "source": "state that more than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_381", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has less than two rivers crossing it", "source": "state that less than two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_388", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has two state borders", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_405", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of less than two states", "source": "city that is capital of less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_408", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has no more than two cities", "source": "state that at most two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_427", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains two or less lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_437", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is capital to more than one state", "source": "city that is capital of at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_447", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a state containing two rivers", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_469", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more than two locations", "source": "state that more than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_472", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at least two places", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_501", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of more than 2 states", "source": "city that is capital of more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_506", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states are traversed by at least two rivers", "source": "state that at least two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_515", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with more than two cities", "source": "state that more than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_523", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have fewer than two states bordering them", "source": "state that less than two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_524", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has at least two cities in it", "source": "state that at least two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_529", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two places in it", "source": "state that two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_532", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more than two lakes", "source": "state that more than two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string >) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_549", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has fewer than two mountains", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_558", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what two or less places in it", "source": "state that at most two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_560", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have more than two mountains", "source": "state that more than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_587", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two cities at the most", "source": "state that at most two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_598", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has more than two mountains in it", "source": "state that more than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string >) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_602", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at least two cities", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_605", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a state that borders at least two other states", "source": "state that at least two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_637", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "whats states have two state borders", "source": "state that two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_643", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states do have more than two places", "source": "state that more than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_691", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states are travered by at most two rivers", "source": "state that at most two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_693", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states are only crossed by two or fewer rivers", "source": "state that at most two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_697", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has only two lakes", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_698", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two and only two cities", "source": "state that two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_715", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of two or more states", "source": "city that is capital of at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_732", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains at least two rivers", "source": "state that at least two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_738", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has no more than two lakes in it", "source": "state that at most two lake is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_748", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state does the colorado or red river go through", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_train_19", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains sacramento or austin", "source": "state that sacramento or austin is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_62", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which states contain either sacramento or austin", "source": "state that sacramento or austin is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_190", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains mt whitney or mt rainier", "source": "state that mount whitney or mount rainier is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call concat fb:en.mountain.whitney fb:en.mountain.rainier)))", "qid": "geo880_train_212", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states do include aacramento or austin", "source": "state that sacramento or austin is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states do california or texas border", "source": "state that california or texas borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_539", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states have either death valley or the pacific ocean in them", "source": "state that death valley or pacific ocean is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call concat fb:en.place.death_valley fb:en.place.pacific_ocean)))", "qid": "geo880_train_550", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state have either the colorado river or the red river", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_train_609", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state has both death valley and the pacific ocean", "source": "state that death valley or pacific ocean is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call concat fb:en.place.death_valley fb:en.place.pacific_ocean)))", "qid": "geo880_train_688", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what are the capital cities of california or texas", "source": "city that is capital of california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_750", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state border either california or texas", "source": "state that california or texas borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_770", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which states contain either mt whitney or mt rainier", "source": "state that mount whitney or mount rainier is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call concat fb:en.mountain.whitney fb:en.mountain.rainier)))", "qid": "geo880_train_782", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what city is the capital of california or texas", "source": "city that is capital of california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_818", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which state contains both the colorado river and the red river", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_train_861", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states contains the colorado river", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_train_925", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state is bordered by either california or texas", "source": "state that california or texas borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_929", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which states contain death valley or the pacific ocean", "source": "state that death valley or pacific ocean is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call concat fb:en.place.death_valley fb:en.place.pacific_ocean)))", "qid": "geo880_train_960", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what city is the capital of either california or texas", "source": "city that is capital of california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_975", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which states have either lake tahoe or huron in them", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_train_1061", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states contain either mount whitney or mount rainier", "source": "state that mount whitney or mount rainier is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call concat fb:en.mountain.whitney fb:en.mountain.rainier)))", "qid": "geo880_train_1082", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which states are traversed by the colorado river or the red river", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_train_1224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what city is the capital of california or texas", "source": "city that is capital of california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1237", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state has either sacramento or austin", "source": "state that sacramento or austin is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_1356", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states does the colorado river or red river flow through", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_train_1368", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "capital city of either california or texas", "source": "city that is capital of california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1419", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains lake huron", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_train_1439", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states border either california or texas", "source": "state that california or texas borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1455", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state has death valley or the pacific ocean", "source": "state that death valley or pacific ocean is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call concat fb:en.place.death_valley fb:en.place.pacific_ocean)))", "qid": "geo880_train_1470", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains sacramento or austin", "source": "state that sacramento or austin is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_1491", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states do california or texas border", "source": "state that california or texas borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1503", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what city is the capital of either california or texas", "source": "city that is capital of california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1557", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which states contain either austin or sacramento", "source": "state that sacramento or austin is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_1558", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states border california for texas", "source": "state that california or texas borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1578", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state is lake tahoe or lake huron", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_train_2034", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which is the state that borders california or texas", "source": "state that california or texas borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2127", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states contain either mount whitney or mount rainier", "source": "state that mount whitney or mount rainier is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call concat fb:en.mountain.whitney fb:en.mountain.rainier)))", "qid": "geo880_train_2131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "state that either the colorado river or the red river traverses through", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_train_2141", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains the colorado river or the red river", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_train_2297", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains either mount whitney or mount ranier", "source": "state that mount whitney or mount rainier is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call concat fb:en.mountain.whitney fb:en.mountain.rainier)))", "qid": "geo880_train_2549", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what city is the capital of california or texas", "source": "city that is capital of california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2588", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state has lake tahoe or lake huron in it", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_train_2674", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains lake tahoe or lake huron", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_train_2686", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains lake tahoe or lake huron", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_train_2711", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states have both sacramento and austin", "source": "state that sacramento or austin is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_2713", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains death valley or the pacific ocean", "source": "state that death valley or pacific ocean is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call concat fb:en.place.death_valley fb:en.place.pacific_ocean)))", "qid": "geo880_train_2831", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state is passed by either colorado river or red river", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_train_2961", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which states contain lake tahoe or lake huron", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_test_2", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state is either mount whitney or mount rainier in", "source": "state that mount whitney or mount rainier is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call concat fb:en.mountain.whitney fb:en.mountain.rainier)))", "qid": "geo880_test_39", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which state has mount whitney and mount rainer in it", "source": "state that mount whitney or mount rainier is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call concat fb:en.mountain.whitney fb:en.mountain.rainier)))", "qid": "geo880_test_119", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains mount rainier", "source": "state that mount whitney or mount rainier is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call concat fb:en.mountain.whitney fb:en.mountain.rainier)))", "qid": "geo880_test_262", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states contain lake tahoe or lake huron", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_test_288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state borders california or texas", "source": "state that california or texas borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_test_344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states contain either sacramento or austin", "source": "state that sacramento or austin is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_test_367", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains either death valley or the pacific ocean", "source": "state that death valley or pacific ocean is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call concat fb:en.place.death_valley fb:en.place.pacific_ocean)))", "qid": "geo880_test_403", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains either death valley or the pacific ocean", "source": "state that death valley or pacific ocean is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call concat fb:en.place.death_valley fb:en.place.pacific_ocean)))", "qid": "geo880_test_420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "in which state is lake huron found", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_test_457", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state is contained by death valley or the pacific ocean", "source": "state that death valley or pacific ocean is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call concat fb:en.place.death_valley fb:en.place.pacific_ocean)))", "qid": "geo880_test_473", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states contains the colorado river and the red river", "source": "state that colorado river or red river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call concat fb:en.river.colorado fb:en.river.red)))", "qid": "geo880_test_494", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state is lake tahoe or lake huron in", "source": "state that lake tahoe or lake huron is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call concat fb:en.lake.tahoe fb:en.lake.huron)))", "qid": "geo880_test_512", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains sacramento or austin", "source": "state that sacramento or austin is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_test_570", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what city is a capital of california or texas", "source": "city that is capital of california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_test_575", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which state is either mount whitney or mount rainier home to", "source": "state that mount whitney or mount rainier is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call concat fb:en.mountain.whitney fb:en.mountain.rainier)))", "qid": "geo880_test_641", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state borders california and has the death valley within its borders", "source": "state that borders california and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_24", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state that contains the colorado river borders california", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_72", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has sacramento for its capital", "source": "state whose capital is sacramento and that california borders", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string next_to_state_state)) (string =) fb:en.state.california))", "qid": "geo880_train_133", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which bordering state of california had sacramento in it", "source": "state that borders california and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_138", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state next to californias capital is sacramento", "source": "state whose capital is sacramento and that california borders", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string next_to_state_state)) (string =) fb:en.state.california))", "qid": "geo880_train_237", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as the captial and contains lake tahoe", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_340", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains mt whitney and has sacramento as its capital", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_368", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a capital of sacramento and contains death valley", "source": "state whose capital is sacramento and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_379", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital of califronia", "source": "city that is contained by california and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_424", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains lake tahoe and has sacramento as a capital", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_425", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is sacaramento and is traversed by the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_452", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with a capital of sacramento and contains lake tahoe", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_536", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as its capital and also contains lake tahoe", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_556", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is sacramento and contains lake tahoe", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_580", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has lake tahoe within its borders", "source": "state that borders california and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_582", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has the capital of sacramento and death valley", "source": "state whose capital is sacramento and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_587", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains both sacramento and the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has the capital of sacramento and has borders", "source": "state whose capital is sacramento and that california borders", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string next_to_state_state)) (string =) fb:en.state.california))", "qid": "geo880_train_613", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has sacramento as its capital and has lake tahoe in it", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_620", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the name of californias capital city", "source": "city that is contained by california and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_715", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as the capital in it and also has the colorado river in it", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_986", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "state that has sacramento within it and borders california", "source": "state that borders california and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_993", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a capital of sacramento and death valley in them", "source": "state whose capital is sacramento and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_1023", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states border california", "source": "state that borders california and that california borders", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string next_to_state_state)) (string =) fb:en.state.california))", "qid": "geo880_train_1060", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a border with california and is passed by colorado river", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_1093", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state contains the city of sacramento and the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_1112", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the capital of california", "source": "city that is contained by california and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1493", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with a capital named sacramento borders california", "source": "state whose capital is sacramento and that california borders", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string next_to_state_state)) (string =) fb:en.state.california))", "qid": "geo880_train_1556", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states border california and have lake tahoe within them", "source": "state that borders california and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_1580", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state containing death valley has sacramento as a capital", "source": "state whose capital is sacramento and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_1648", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a capital city named sacramento", "source": "state whose capital is sacramento and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1662", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have borders with california and include death valley", "source": "state that borders california and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_1707", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is sacramento and contains mtwhitney", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_1722", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which bordering state of california has lake tahoe in it", "source": "state that borders california and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_1753", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "in what state is sacramento and death valley located", "source": "state whose capital is sacramento and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_1816", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "sacramentos capital", "source": "state whose capital is sacramento and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1914", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has sacramento as its capital and also had mount whitney in it", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_1917", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with the capital sacramento has the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_1939", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains mount whitney and has a captial named sacramento", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_1969", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states share a border with california and have a place called sacramento", "source": "state that borders california and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2087", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has lake tahoe in it", "source": "state that borders california and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_2175", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "the colorado river runs through what state with the capital of sacramento", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2227", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states contain death valley and border california", "source": "state that borders california and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_2256", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains the capital sacramento and the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2258", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with sacramento as the capital has death valley", "source": "state whose capital is sacramento and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_2281", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is sacramento and borders califronia", "source": "state whose capital is sacramento and that california borders", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string next_to_state_state)) (string =) fb:en.state.california))", "qid": "geo880_train_2310", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have the capital of sacramento and contains lake tahoe", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_2335", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state is traversed by the colorado river and borders california", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2353", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains lake tahoe and has a capital of sacramento", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_2407", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a capital of sacramento and the colorado river going through them", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2418", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with mount whitney in it is next to california", "source": "state that borders california and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_2443", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as its capital and is contained by", "source": "state whose capital is sacramento and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2457", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains the capital of sacramento and the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2462", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a capital of sacramento and mount whitney", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_2521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has the colorado river flowing through it", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2658", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has mount whitney", "source": "state that borders california and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_2715", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state bordering california contains lake tahoe", "source": "state that borders california and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_2721", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state borders california that has the colorado river in it", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2837", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states borders california and contains the colorado river", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2936", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a capital of sacramento and contains mt whitney", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_2970", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains sacramento as its capital", "source": "state whose capital is sacramento and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2989", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital of california", "source": "city that is contained by california and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_test_152", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has the capital of sacramento and contains death valley", "source": "state whose capital is sacramento and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_test_249", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and contains the colorado river", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_test_295", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which bordering state has death valley in it", "source": "state that borders california and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_test_321", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states share borders with california and contain mount whitney", "source": "state that borders california and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_test_376", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state next to california does the colorado river go through", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_test_438", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a capital of sacramento and passed by the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_test_476", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has the capital of sacramento and contains mount whitney", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_test_500", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a capital of sacramento and include lake tahoe", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_test_635", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what california bordering state is home to mount whitney", "source": "state that borders california and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_test_665", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state contains mount whitney and is bordered by california", "source": "state that borders california and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_test_718", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains sacramento and lake tahoe", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_test_721", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has the greatest number of cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_30", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most locations in it", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_47", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have the fewest lakes in them", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_118", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state that borders the most other states", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_171", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of the most states", "source": "city that is capital of the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_222", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the greatest number of mountains", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_258", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the most number of borders", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_264", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least cities", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_298", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states borders the fewest other states", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_299", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least number of border states", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_342", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with most number of places", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_361", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least number of mountains in it", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_386", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states with fewest lakes", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_396", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most places", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_405", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the greatest amount of mountains in it", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_407", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest borders", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_409", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest lakes", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_433", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states has the least number of cities", "source": "state that the least number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_437", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have the fewest cities in them", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_517", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest number of lakes in it", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_543", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most mountains", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_577", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state bordering fewest states", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_605", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains the most geographical features", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_675", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most mountains", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_681", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is bordered by the most other states", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_713", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least amount of lakes", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_729", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains the most mountains", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_768", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with most cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_808", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most states bordering it", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_840", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the most number of lakes", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_855", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_859", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest places", "source": "state that the least number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_931", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest lakes", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_933", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_966", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the fewest rivers coming through it", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1029", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least number of cities", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1037", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least number of rivers that traverse it", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1056", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the most cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1083", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the lowest number of rivers crossing it", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1108", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least number of river traverseas", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1110", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most locations", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1149", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the most number of lakes in it", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1271", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least rivers traversing it", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1312", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have the greatest number of states bordering them", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1321", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with border of least number of states", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1403", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states are not traversed by a river", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1434", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least number of cities", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1443", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least number of state borders", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1490", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state do the fewest rivers cross", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1509", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest locations in it", "source": "state that the least number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1521", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the most rivers crossing it", "source": "state that the most number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1544", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most lakes", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1562", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the fewest mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1588", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least amount of lakes", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1614", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which is the most sparse state", "source": "state that the least number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1671", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the greatest number of cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1771", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1821", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the greatest total number of mountains", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1828", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the most cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1908", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders the most states", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1910", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest places", "source": "state that the least number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1925", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1942", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most mountains", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1948", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the largest number of lakes", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_1952", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state borders the least number of other states", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1967", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what capital acts as capital for the fewest states", "source": "city that is capital of the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1998", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least number of rivers", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2060", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have the greatest number of locations in them", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2083", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least number of cities in it", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2138", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least amount of mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2174", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most amount of mountains in it", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2189", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the largest number of state borders", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2254", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state have the greatest number of lakes in it", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2274", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of the fewest states", "source": "city that is capital of the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2275", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains the most mountains", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_2283", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most lakes", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2290", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest lakes", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2308", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the leaste amount of state border", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2365", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has least number of cities", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2381", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is traversed by the greatest number of rivers", "source": "state that the most number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2440", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains the fewest lakes", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2467", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a state with the fewest cities", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2536", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with fewest cities", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2580", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state is traversed by the largest number of rivers", "source": "state that the most number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2609", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of the least states", "source": "city that is capital of the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2612", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least number of places", "source": "state that the least number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2632", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most states bordering it", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2659", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of the smallest state", "source": "city that is capital of the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2752", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of only one state", "source": "city that is capital of the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2788", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least number of traversing rivers", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2802", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the state with the highest number of rivers", "source": "state that the most number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2812", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with most number of cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2881", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which city is the capital of the most number of states", "source": "city that is capital of the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2971", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest number of mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_1", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most lakes", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_73", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state shares the fewest borders", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_140", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of the lowest number state", "source": "city that is capital of the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string min) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_145", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of the greatest amount of states", "source": "city that is capital of the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_187", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most lakes", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_206", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest number of mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_319", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most states bordering it", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_333", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains the most places", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_395", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with fewest mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_452", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most number of attractions", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_518", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_538", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains the fewest mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_test_555", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "city that is the capital of most states", "source": "city that is capital of the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_649", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states has the most lakes", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_650", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has most number of rivers", "source": "state that the most number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_668", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have the lowest number of state borders", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_685", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is traversed by the fewest rivers", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_687", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains the most lakes", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_711", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least amount of lakes", "source": "state that the least number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_test_741", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the most cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_743", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river is a major river", "source": "river that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string major_river)))", "qid": "geo880_train_121", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what lake is a major lake", "source": "lake that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string major_lake)))", "qid": "geo880_train_233", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what river is major", "source": "river that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string major_river)))", "qid": "geo880_train_234", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is the major city", "source": "city that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string major_city)))", "qid": "geo880_train_852", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "largest capitals", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_962", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is both a major city and a capital", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_987", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which is a major lake", "source": "lake that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string major_lake)))", "qid": "geo880_train_1152", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what are some major rivers", "source": "river that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string major_river)))", "qid": "geo880_train_1178", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what major city is also a capital", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_1255", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what are all the major cities that are capitals", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_1275", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "name a capital city", "source": "city that is a capital and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string capital_city)))", "qid": "geo880_train_1344", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is a major capital", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_1610", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is a major city that is also a capital", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_1658", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what cities are major capitals", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_1830", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "large capital cities", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2072", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is a large capital city", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2170", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which major metros are also state capitals", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_2302", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "whats is a major capital city", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_2320", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what major city is also the state capital", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_2400", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is a major city and a capital", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2557", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which is a major river", "source": "river that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string major_river)))", "qid": "geo880_train_2604", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what major cities are also a capital", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2627", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is major", "source": "city that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string major_city)))", "qid": "geo880_train_2653", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is the is also the state capital", "source": "city that is a capital and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string capital_city)))", "qid": "geo880_train_2680", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is a city that is a capital", "source": "city that is a capital and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string capital_city)))", "qid": "geo880_train_2983", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is the biggest lake", "source": "lake that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string major_lake)))", "qid": "geo880_test_265", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is the name of a major city that is also a state capitol", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_test_591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which cities are capitals of their states", "source": "city that is a capital and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string capital_city)))", "qid": "geo880_test_640", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which rivers are major", "source": "river that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string major_river)))", "qid": "geo880_test_655", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what capital city is also a major city", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_test_678", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which state has sacramento as its capital and which has lake tahoe in it", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_95", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains mount whitney and has borders within california", "source": "state that mount whitney is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_154", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is sacramento and contains mt whitney", "source": "state that mount whitney is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_163", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have death valley in them and a capital called sacramento", "source": "state that death valley is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_173", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento for its capital and the death valley within it", "source": "state that death valley is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_202", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state next to california has lake tahoe in it", "source": "state that lake tahoe is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_247", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has mount whitney and sacramento as the capital", "source": "state that mount whitney is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_321", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a capital of sacramento and mount whitney in them", "source": "state that mount whitney is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_326", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the state that contains sacramento", "source": "state that sacramento is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_338", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has sacramento as its capital", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_365", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state contains the colorado river and borders california", "source": "state that colorado river traverses and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_453", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has the colorado river passing through it and borders california", "source": "state that colorado river traverses and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_493", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains lake tahoe and has sacramento as capital", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_513", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states containing mount whitney borders california", "source": "state that mount whitney is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_581", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city in california is the capital of california", "source": "city that is capital of california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_615", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a capital named sacramento", "source": "state that sacramento is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_707", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has lake tahoe in it and has the capital of sacramento", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_732", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains mount whitney and has a capital of sacramento", "source": "state that mount whitney is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_854", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is sacramento in and borders california", "source": "state that sacramento is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1004", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state near california has lake tahoe", "source": "state that lake tahoe is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1017", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains death valley and the sacramento capital", "source": "state that death valley is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1034", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what bordering state of california has the capital of sacramento", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1048", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains lake tahoe and has borders", "source": "state that lake tahoe is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1050", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains sacramento and is sacramento the capital of", "source": "state that sacramento is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1067", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which is the bordering state of california that has colorado river in it", "source": "state that colorado river traverses and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1069", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states include sacramento and border california", "source": "state that sacramento is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1171", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with the capital sacramento contains lake tahoe", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1202", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains death valley and borders other states", "source": "state that death valley is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1216", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state borders california and is traversed by the colorado river", "source": "state that colorado river traverses and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1227", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is lake tahoe in that borders california", "source": "state that lake tahoe is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1245", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state contains mt whitney and borders california", "source": "state that mount whitney is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1260", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state borders california and contains mount whitney", "source": "state that mount whitney is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1282", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with a capital sacramento contains the colorado river", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1306", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has mount whitney in it", "source": "state that mount whitney is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1393", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a border with california and has a capital of sacramento", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1404", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state holds sacramento as its capital", "source": "state that sacramento is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1488", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state borders california", "source": "state that california borders and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1532", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is death valley in and has a capital of sacramento", "source": "state that death valley is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1559", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains mount whitney and borders california", "source": "state that mount whitney is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has a capital of sacramento and contains mount whitney", "source": "state that mount whitney is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1609", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states does the colorado river flow through who also have a capital of sacramento", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1613", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the state that borders california", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1659", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which of californias bordering states contains sacramento", "source": "state that sacramento is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1724", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has borders and contains sacramento as capital", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1810", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state is traversed by the colorado river and whose capital is sacramento", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1822", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is passed by colorado river and has a capital of sacramento", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1884", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains a capital named sacramento and a lake named lake tahoe", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1890", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains a capital of sacramento and the colorado river", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1892", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state contains the colorado river and has a capital of sacramento", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1962", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with capital sacramento is mount whitney in", "source": "state that mount whitney is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2078", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains both lake tahoe and whose capital is sacramento", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2106", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state with the capital sacramento contains death valley", "source": "state that death valley is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2224", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento and borders california", "source": "state that sacramento is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2234", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states capital is sacramento and contains lake tahoe", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2240", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states bordering california has a capital named sacramento", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2406", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as its capital and contains lake tahoe", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2417", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento for its capital and the colorado river running through it", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2490", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states are on the borders of california", "source": "state that california borders and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2519", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has death valley and whose capital is sacramento", "source": "state that death valley is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2522", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which bordering state of california is home to death valley", "source": "state that death valley is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2539", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is the capital of california", "source": "city that is capital of california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_2550", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains the death valley and sacramento", "source": "state that death valley is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2561", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states does the colorado river flow through that share borders with california", "source": "state that colorado river traverses and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2586", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have like tahoe in them and border california", "source": "state that lake tahoe is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2645", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital of ca", "source": "city that is capital of california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_2714", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is bordered by california and contains sacramento", "source": "state that sacramento is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2764", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is death valley in that borders california", "source": "state that death valley is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2800", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state whose capital is sacramento does the colorado river go through", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2992", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains the colorado river and the capital of sacramento", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_36", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is near california", "source": "state that california borders and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_48", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what are the states that have lake tahoe and a capital of sacramento", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_72", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what are the states that mount whitney resides and that also border california", "source": "state that mount whitney is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_126", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains both the colorado river and sacramento", "source": "state that colorado river traverses and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_175", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states share borders with california and have a capital of sacramento", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_214", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains lake tahoe and has a border with california", "source": "state that lake tahoe is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_221", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains a capital named sacramento", "source": "state that sacramento is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_277", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and contains the death valley", "source": "state that death valley is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_343", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states include death valley and border california", "source": "state that death valley is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_423", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has the colorado river in it", "source": "state that colorado river traverses and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_478", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and contains the capital sacramento", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state borders california and contains lake tahoe", "source": "state that lake tahoe is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_594", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state state contains lake tahoe and has the capital of sacramento", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_676", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what place has an elevation smaller than that of death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_5", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lakes have more area than lake tahoe", "source": "lake whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_11", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "place with elevation not more than elevation of mount whitney", "source": "place whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_13", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "where is smaller that death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_17", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a lake at least as large in area as lake tahoe", "source": "lake whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_23", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is bigger than california", "source": "city whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river that is longer than mount whitneys elevation", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_34", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has an area at least the size of lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_35", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is no taller than mt witney", "source": "mountain whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_42", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has an length equal to death valleys elevation", "source": "river whose length is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_44", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have a population density less than california", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_45", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a density that is at least that of california", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have a population larger than sacramento", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_55", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states are more populated than california", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_58", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river is longer in length than the elevation of mt whitney", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_64", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locations whose elevation is no more than that of death valley", "source": "place whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_70", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name the city that has a density that is less or equal to the density of california", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_71", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has a length that is at least mount whitneys elevation", "source": "river whose length is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_74", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a density as that of california", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_79", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is larger than the area of california", "source": "lake whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_81", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a smaller density than california", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_94", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city at least as great in area as lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_98", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has higher elevation than death valley", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_99", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is equal or more dense than california", "source": "state whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_102", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states has a population or more of california", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is smaller than the area of lake tahoe", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_117", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are longer than the elevation of death valley", "source": "river whose length is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_119", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountains are shorter or as tall as mount whitney", "source": "mountain whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_120", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is smaller then california", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_122", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a smaller area than california", "source": "city whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_123", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has a lower elevation than mount whitney", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_128", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is longer than the elevation of mount whitney", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_132", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which place has an elevation smaller than that of mount whitney", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_134", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is longer than the height of mount whitney", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain whose elevation is not less than mount whitney", "source": "mountain whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_142", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has a higher elevation than death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_147", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states cover more land than california", "source": "state whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_152", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is no longer than the colorado river", "source": "river whose length is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_155", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have elevations equal or less than the colorado river", "source": "place whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city has a larger population than sacramento", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys area is larger than the area of lake tahoe", "source": "city whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a place at least as great in elevation as death valley", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state not less than californias area", "source": "state whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_167", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes area is greater than that of california", "source": "lake whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_168", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population less than that of california", "source": "city whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the river with a length that is at least as long as that of the colorado river", "source": "river whose length is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_188", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has an elevation higher than mount whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_199", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city has an area less than that of california", "source": "city whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with larger area than lake tahoe", "source": "city whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a density no greater than california", "source": "state whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_209", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation smaller than that of death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_219", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a state at least as great in population density as ca", "source": "state whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_228", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has a smaller elevation than death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_229", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population at least as great as sacramento", "source": "state whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_239", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a river whose length is no greater than the elevation of death valley", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_259", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have a population at least as large as sacramento", "source": "state whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_260", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains elevation is at most the length of the colorado river", "source": "mountain whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_262", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population smaller than sacramento", "source": "state whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_271", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains have an elevation greater than that of mount whitney", "source": "mountain whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_273", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population as large as california", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_289", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain s altitude is lesser than  river colorado s length", "source": "mountain whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_295", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has fewer residents than california", "source": "city whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_296", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has smaller elevation then the length of the colorado river", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_302", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state has a population less than that of ca", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_308", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population tinyer than that of sacramento", "source": "city whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation greater than death valley", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is longer than the elevation of death valley", "source": "river whose length is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_330", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "cities with populations comparative with california", "source": "city whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_334", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is at least the elevation of death valley", "source": "river whose length is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_336", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has an elevation no higher than mount whitney", "source": "place whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_341", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation at least the size of mount whitney", "source": "place whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_343", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "place with elevation not more than length of colorado river", "source": "place whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_345", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a density equal to the state of california", "source": "state whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_346", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city with an area no greater than california", "source": "city whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_348", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is city is larger than california", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_349", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a place lower in elevation than mt whitney", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_364", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a larger population than california", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_366", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains elevation is larger than the length of the colorado river", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_374", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a river as long as mt whitney is high", "source": "river whose length is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_375", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is no longer than the elevation of mount whitney", "source": "river whose length is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_383", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which citys area is more the the area of lake tahoe", "source": "city whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_402", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is greater in population than ca", "source": "city whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_411", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city larger in population than sacramento", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_412", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is at least that of the colorado river", "source": "river whose length is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities match the population of sacramento california", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_421", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is the city in california with the least population", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_427", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places are lower than even death valley", "source": "place whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_438", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have a smaller population than sacramento", "source": "state whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_444", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is smaller than lake tahoe by area", "source": "city whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_454", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain that is taller than the colorado rivers length", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_455", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what population is larger than that of california", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_459", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a density more than that of california", "source": "state whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place is at the same elevation as death valley", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_468", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a state as big as california", "source": "state whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain whose elevation is not more than mount whitney", "source": "mountain whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_470", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is lower in elevation than mt whitney", "source": "mountain whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_474", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has a larger area than california", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_478", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state with population not less than california", "source": "state whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_481", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a mountain at least as high as the colorado river is long", "source": "mountain whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_483", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state  is thinly populated than sacramento s population", "source": "state whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_487", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have a smaler population than sacramento", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_488", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river s length  is equal to the altitude of death valley", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_492", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys density is greater than that of california", "source": "city whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_495", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has a lenth that is at most the length of the colorado river", "source": "river whose length is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_498", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population equal to or greater than that of ca", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_499", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a smaller population than sacramento", "source": "city whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_504", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a larger area than california", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_520", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is smaller than the elevation of mount whitney", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_525", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city with the same population of sacramento", "source": "city whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_535", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a density that is at most that of california", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_537", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has the most area in california", "source": "city whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_553", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have a larger area than california", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_557", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is at least as tall as mt whitney", "source": "mountain whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_558", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities have the area of lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_559", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river whose length is not more than colorado river", "source": "river whose length is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_571", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states cover less of america than california", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_572", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have populations as numerous as california", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_604", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city in california has the least density", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_607", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "is there a city as big as california", "source": "city whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is smaller in size than lake tahoe", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_622", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place is higher than mt whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_623", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with populant not less than that of sacramento", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_627", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountains taller than mt whitney", "source": "mountain whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_630", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains elevation is a least the length of the colorado river", "source": "mountain whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_635", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a density greater than california", "source": "state whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_638", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation that is at most the length of the colorado river", "source": "place whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_641", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountains have an elevation as least as long as colorado river", "source": "mountain whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_645", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city has a population smaller than californias", "source": "city whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_648", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lake has a smaller area than california", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_649", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city less populated than california", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_658", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states are bigger than the area of lake tahoe", "source": "state whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_660", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is at least as long as the elevation of death valley", "source": "river whose length is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_664", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains are as tall or shorter than the colorado rivers length", "source": "mountain whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_671", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states are bigger than lake tahoe", "source": "state whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_673", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain with maximum elevation of death valley", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_677", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is taller than mt whitney", "source": "mountain whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountains are higher in elevation than death valley", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_686", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have a population than sacramento or less", "source": "city whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_691", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is the total population of sacramento", "source": "city whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_694", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a lake no larger in area than lake tahoe", "source": "lake whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_700", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states are larger than lake tahoe", "source": "state whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_708", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have more people then sacramento", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_720", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is at least the length of the colorado river", "source": "river whose length is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_721", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population greater than sacramento", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_726", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is smaller than the state of california", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_730", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is higher than mt whitney", "source": "mountain whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_734", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys population is larger than californias", "source": "city whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_736", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "states more populated than sacramento", "source": "state whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_744", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is at least as big as california by area", "source": "state whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_754", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is no smaller than mount whitneys elevation", "source": "river whose length is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_755", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation no greater than mount whitney", "source": "mountain whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_763", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have the same elevation as death valley", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_769", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river not shorter than elevation of mount whitney", "source": "river whose length is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_772", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have higher elevations than the colorado rivers length", "source": "place whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_773", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountains taller than death valley", "source": "mountain whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_783", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lake has an area no greater than that of ca", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_786", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with larger area than california", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_788", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has an area small than that of california", "source": "city whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_789", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "place not less higher than mount whitney", "source": "place whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_794", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has a lenth long than the colorado river", "source": "river whose length is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_800", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a state which is larger in area than ca", "source": "state whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_802", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation equal to the colorado river", "source": "mountain whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_804", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which locations have an elevation thats at least as long as the colorado river", "source": "place whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_811", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have a population that is less than or equal to the population of california", "source": "state whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_814", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have higher elevation than mount whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_820", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain s elevation equals the length of colorado river", "source": "mountain whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_822", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is larger than the entire state of california", "source": "lake whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_824", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "states that are bigger then lake tahoe", "source": "state whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_826", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has less elevation than death valley", "source": "mountain whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_829", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has an area equal to or less than lake tahoe", "source": "lake whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_846", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has a equal or lesser elevation tan mt whitney", "source": "place whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_847", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city larger in area than lake tahoe", "source": "city whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_851", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has an area that is at least the area of lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_860", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain has a higher elevation than death valley", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_864", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has an area that is no greater than california", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_866", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is larger than the colorado river", "source": "river whose length is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_869", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are as long or longer than mount whitneys elevation", "source": "river whose length is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_883", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is smaller than california by area", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_891", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places elevation is no greater than the length of the colorado river", "source": "place whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_900", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation greater than mount whitney", "source": "mountain whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_910", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys area is at least the area of lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_913", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities are as dense or denser than californias", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_915", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city not larger than california", "source": "city whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_926", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are shorter than mount whitneys elevation", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_928", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is equal to or more than sacramento", "source": "state whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_930", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population density at least that of sacramento", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_932", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have a lower elevation than the colorado river is long", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_938", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains have a greater elevation than death valley", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_943", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is smaller than lake tahoe", "source": "city whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_946", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state is as large in area as ca", "source": "state whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_950", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is smaller than the elevation of death valley", "source": "river whose length is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_951", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has as low an elevation as death valley", "source": "place whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_954", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lake s area is almost equal to the area of california", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_955", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is denser in population than california", "source": "state whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_965", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have populations equal to or less than sacramento", "source": "state whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_974", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a higher population than ca", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_991", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a location lower in elevation than death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_994", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "lakes larger than tahoe", "source": "lake whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1000", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a place with a total elevation that makes it higher than the colorado river is long", "source": "place whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1002", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which place s altitude is greater than river colorado s length", "source": "place whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1009", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river s length is greater than the height of death valley", "source": "river whose length is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1012", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has a larger length than the colorado river", "source": "river whose length is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1013", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains are smaller than mount whitney", "source": "mountain whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1015", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is more dense than california", "source": "state whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1030", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a density at least as great as california", "source": "state whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1040", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities have an area larger than lake tahoe", "source": "city whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1045", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is at least as high in elevation as death vallely", "source": "mountain whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1053", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is the largest in california", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1065", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have lower elevations than the length of the colorado river", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1070", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains elevation is the same as or lower than death valley", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1074", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake covers more area than lake tahoe", "source": "lake whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1075", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what are places that are higher that the top of mount whitney", "source": "place whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1077", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state with more population than california", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1084", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation that is at least the same as the length of the colorado river", "source": "place whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1087", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has more residents than sacramento", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1092", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a higher density than california", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1098", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is at least as long as the elevation of mount whitney", "source": "river whose length is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1105", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has an elevation equal or greater to that of mount whitney", "source": "place whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1106", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has an elevation at least as high as mount whitney", "source": "place whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1107", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have a lower population density than ca", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1111", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lake is larger in area than lake tahoe", "source": "lake whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1113", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has elevation smaller than the elevation of death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1118", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the river that is less long than the colorado river", "source": "river whose length is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1122", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name an area whose elevation is no greater than the length of the colorado river", "source": "place whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1124", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states has a large population than that of sacramento", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1125", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes are smaller than california by area", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1126", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has the same or larger population as sacramento", "source": "state whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1130", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain with elevationn not less than length of colorado river", "source": "mountain whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is higher in elevation than mt whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "lake with area not less than california", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "place with elevation more than length of colorado river", "source": "place whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1174", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city  has a lower population than sacramento", "source": "city whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a lake that has an area larger than that of lake tahoe", "source": "lake whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1180", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lake is at least as great in area as ca", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1182", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state is larger in area than lake tahoe", "source": "state whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1184", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a smaller area than lake tahoe", "source": "city whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1186", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places are higher in elevation than mount whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1187", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation that is equal to or greater than death valley", "source": "mountain whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1189", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain with more elevation length of colorado river", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1191", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area greater than the area of california", "source": "state whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1196", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location is has a higher elevation than death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area no greater than california", "source": "state whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1204", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what locations elevation is larger than the length of the colorado river", "source": "place whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have an equal to or greater population than california", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river is as long as death valley is as high", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1211", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area smaller than lake tahoe", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1212", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city smaller in population than ca", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1215", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are as long or longer than the colorado river", "source": "river whose length is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a river at least as long as the colorado river", "source": "river whose length is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1243", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has a lower elevation than mount whitney", "source": "mountain whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1246", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains elevation is greater than colorado rivers length", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1251", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city at least the size of ca in area", "source": "city whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1258", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "cities larger than sacramento", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1263", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation at least the size of death valley", "source": "mountain whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1277", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city has california s area", "source": "city whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have population larger than californias", "source": "city whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1283", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is shorter than the elevation of death valley", "source": "river whose length is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1287", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have populations larger than the population of california", "source": "city whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1289", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes area is the same as that of california", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1300", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state has a smaller density than california", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1303", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states are smaller than ca", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1309", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has a length larger than the elevation of mt whitney", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1311", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is as big as lake tahoe", "source": "lake whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys area is the same as lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1324", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population larger than california", "source": "city whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1326", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state has the population of sacramento", "source": "state whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1327", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has the elevation or more of death valley", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states population is greater than that of california", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1353", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have the same elevaction of mount whitney", "source": "place whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1358", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river s length is lesser than mount whitney s altitude", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what locations elevation is at most the length of the colorado river", "source": "place whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1364", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state has less population than the city of sacramento", "source": "state whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1371", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains are taller than the colorado rivers length", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1386", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have at least the same area as lake tahoe", "source": "state whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1387", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city whose area is not less than area of lake tahoe", "source": "city whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1394", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have more people than sacramento", "source": "state whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1395", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with area not less than california", "source": "city whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1396", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is greater than death valleys elevation", "source": "river whose length is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1398", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river is shorter than the colorado river", "source": "river whose length is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1401", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is larger than the area of california", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has an area at least as big as california", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1410", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have a smaller area than california", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1416", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "lakes larger than lake tahoe", "source": "lake whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1418", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is at most as long as the colorado river", "source": "river whose length is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1421", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which locations have an elevation no higher than mount whitney", "source": "place whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1423", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with area not less than lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1424", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation lower than mount whitney", "source": "mountain whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area that is at most that of lake tahoe", "source": "state whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1429", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have a smaller land area than the area of lake tahoe", "source": "city whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1432", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a lake larger in area than ca", "source": "lake whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area equal to the area of lake tahoe", "source": "state whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river longer than colorado river", "source": "river whose length is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1438", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which citys population is more than that of sacramento", "source": "city whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1440", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a state that has the same population as california", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1442", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states area is at most the area of lake tahoe", "source": "state whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1452", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a density no larger than california", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1456", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is as dense or less than california", "source": "state whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a greater area than lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1464", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "places higher than death valley", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1479", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city whose population is at least that of ca", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1495", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the river that has a length less than or equal to the colorado river", "source": "river whose length is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1510", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has equal or more elevation as mount whitney", "source": "mountain whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1516", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are as long or shorter than mount whitneys elevation", "source": "river whose length is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys population is that of california or lower", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1518", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a density smaller than that of california", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1531", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have an area less than or equal to california", "source": "state whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have a population less than ca", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1536", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is longer than the colorado river", "source": "river whose length is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1538", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city that has the same area as lake tahoe", "source": "city whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1540", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have a smaller density than california", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1545", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities have an area at least as big as california", "source": "city whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1548", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is smaller in population than sacramento", "source": "city whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1549", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has an area at least as large as california", "source": "city whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1553", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is less in length than the height of mt whitney", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1566", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have a population lower than ca", "source": "city whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city the size of california", "source": "city whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1570", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation similar to death valley", "source": "place whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1579", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have a lower population than california", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1585", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a state with population density no greater than california", "source": "state whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1586", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has lower elevation than death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1587", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state whose population is not more than that of california", "source": "state whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1589", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is shorter than the elevation of mount whitney", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1592", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has equal or greater elevation as death valley", "source": "mountain whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1593", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has a length that is at most the elevation of mount whitney", "source": "river whose length is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1599", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys area is greater than that of lake tahoe", "source": "city whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1602", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which place s elevation has the length of colorado river", "source": "place whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1606", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state with no more population thjan sacramento", "source": "state whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1608", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have an area less than that of california", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation that is the same or greater than mount whitney", "source": "mountain whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1612", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is at most the elevation of death valley", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1616", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places are higher in elevation that death valley or at least match it", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1619", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city has a population at least the size of sacramento", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1620", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state is no more populous than sacramento", "source": "state whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1627", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a density equal to that of california", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1628", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state has an area that is at least the size of lake tahoe", "source": "state whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1632", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains are shorter than the colorado rivers length", "source": "mountain whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is longer than the colorado river", "source": "river whose length is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1640", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a river that is longer than death valley is high", "source": "river whose length is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1644", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city with a population at least as high as the population of sacramento", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1646", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places are at least as high as death valley", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1649", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is lesser than mount whitneys elevation", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1653", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city is no more in area than lake tahoe", "source": "city whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1655", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area as large as california", "source": "state whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1665", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain with elevation at most length of colorado river", "source": "mountain whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1674", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city whose population is greater than that of ca", "source": "city whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1677", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has the same elevation as the length of the colorado river", "source": "mountain whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "lakes smaller than tahoe", "source": "lake whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1681", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a smaller density than california", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1690", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has the same area as lake tahoe", "source": "state whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1691", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have a smaler population than california", "source": "city whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1695", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has less area than california", "source": "city whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1700", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have californias density or less", "source": "state whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1714", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a larger density than california", "source": "city whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1721", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is smaller than the length of the colorado river", "source": "river whose length is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1728", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is lesser than the elevation of death valley", "source": "river whose length is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1732", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "place with less elevation than length of colorado river", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1743", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state  is thickly populated than california", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1744", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys population is at least the same as california", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1755", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is less elevated than mount whitney", "source": "mountain whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1760", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is taller than the length of the colorado river", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1764", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city in california has the highest population", "source": "city whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1765", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes have an area less than that of california", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1769", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "lake with larger area than california", "source": "lake whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1777", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population size less than that of california", "source": "city whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1778", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a mountain lower in elevation than mt whitney", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1785", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what areas elevation is greater than that of colorado river", "source": "place whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1789", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountains have an elevation at least as high as mount whitney", "source": "mountain whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1792", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes area is less than that of lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1795", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a larger density than california", "source": "state whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1799", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have an area smaller than the area of lake tahoe", "source": "state whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1806", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "a mountain with more elevation than the length of the colorado river", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1808", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which place has an elevation which is equivalent to mt whitney", "source": "place whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1809", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have an area that is smaller than that of lake tahoe", "source": "state whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1812", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which locations have an elevation larger than the length of colorado river", "source": "place whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1814", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has a larger elevation than mount whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1820", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "note the river that is less or equivalent in length to the elevation of death valley", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1826", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population that is no more than that of sacramento", "source": "city whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1829", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes have a larger area than california", "source": "lake whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1834", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain as an elevation that is the same length as the colorado river", "source": "mountain whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1837", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has the same or less population as california", "source": "state whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1840", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is larger than the elevation of death valley", "source": "river whose length is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1841", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is smaller than the elevation of death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1845", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has an area smaller than lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1846", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name an area lower in elevation than the length of the colorado river", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1851", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain s altitude is equal to the height of the death valley", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1853", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states are at least the size of lake tahoe", "source": "state whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1864", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is smaller than the elevation of death valley", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1869", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population lower than ca", "source": "state whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1873", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation higher than that of mount whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1876", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city whose density is not more than california", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1879", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have the same or more area of lake tahoe", "source": "city whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1880", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities have an area that does not exceed lake tahoe", "source": "city whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1882", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is less populous than sacramento", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1887", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a mountain with an elevation that is less in inches than the total length of the colorado river", "source": "mountain whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1888", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name the river that is longer than mount whitney is tall", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1896", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is at least as long as the colorado river", "source": "river whose length is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1898", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states are lessdense than california in populations", "source": "state whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1899", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states are smaller by area than california", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1903", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain s altitude is greater than river colorado s length", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1904", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have a population that is greater than or equal to the population of sacramento", "source": "state whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1916", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a higher population than california", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1921", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is equal to or less than california", "source": "state whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1922", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has a smaller area than ca", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1924", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain with elevation more than elevation of death valley", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1926", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states area is lesser than lake tahoes area", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_1937", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains are smaller then mount whitney", "source": "mountain whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1938", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has at least as many people are california", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1940", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city in california has the most density", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_1944", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is at least the elevation of mt whitney", "source": "river whose length is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1954", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what area has the same length as the colorado river", "source": "place whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1958", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are shorter than the colorado river", "source": "river whose length is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1959", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is at least the area of california", "source": "city whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_1973", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has a length that is at least that of the colorado river", "source": "river whose length is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_1974", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a smaller population than sacramento", "source": "state whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_1976", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "states less populated than california", "source": "state whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_1982", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains have higher peaks than whitney", "source": "mountain whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_1983", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is at least as long as the elevation of death valley", "source": "river whose length is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_1991", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has equal or less residents than california", "source": "state whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2002", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has an elevation at least the length of the colorado river", "source": "place whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2006", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states population is larger than that of california", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2009", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has a length of mount whitneys elevation", "source": "river whose length is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2014", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is greater than the colorado river", "source": "river whose length is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2020", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is no greater than death valleys elevation", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2026", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name the state with a population less than that of sacramento", "source": "state whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2031", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountains are higher than death valley", "source": "mountain whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2046", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lake in california has the largest area", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2049", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain shorter than length of colorado river", "source": "mountain whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2054", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location is no taller than the length of the colorado river", "source": "place whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2057", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is at least the size of california", "source": "state whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2061", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the state with a total area making it smaller than lake tahoe", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2069", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state with smaller area than lake tahoe", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2073", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place is lower in elevation than mt whitney", "source": "place whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2077", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have elevations equal or greater than the colorado river", "source": "place whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2084", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain has the highest elevation in mount whitney", "source": "mountain whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2086", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what area is lower than mount whitney", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2096", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a larger density than california", "source": "city whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2102", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population no greater than california", "source": "state whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2103", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city area is greater than that of california", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2104", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation higher than death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which place s  altitude is lesser than the length of colorado river", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain has an elevation at most as long as colorado river", "source": "mountain whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2117", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has the most area in california", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2118", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains have an elevation less than that of mount whitney", "source": "mountain whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2128", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has population as least as great as ca", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2134", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state is no larger in area than ca", "source": "state whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city so population is equal to that of california", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2143", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has an area no larger than that of lake tahoe", "source": "city whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has a higher elevation than mount whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2147", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population smaller than california", "source": "city whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2149", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place is the same or higher elevation as mount whitney", "source": "place whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2150", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities population is smaller then sacramento", "source": "city whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation that is length of the colorado river", "source": "place whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have the same or lower density than california", "source": "state whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2168", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state has a density larger than californias", "source": "state whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2173", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities are denser than california", "source": "city whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2179", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what areas elevation is less than that of death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2186", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river with length at most elevation of mount whitney", "source": "river whose length is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2198", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population that is smaller than the population of california", "source": "city whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains have an elevation that is larger than the elevation of death valley", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has as many or more people than california", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2203", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is no greater in height than death valley", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2208", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation greater than the length of the colorado river", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2209", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river that is shorter than the elevation of mount whitney", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2214", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is equal to or less than mt whitney", "source": "mountain whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2217", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are longer than mount whitneys elevation", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2232", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a larger population than california", "source": "city whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2236", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river longer than elevation of mount whitney", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2237", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities have a population larger than sacramentos", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have a larger area than california", "source": "state whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2243", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "where is the elevation highest in death valley", "source": "place whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population equal to or more than that of california", "source": "state whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2260", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is larger than the area of lake tahoe", "source": "city whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2262", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is lesser than colorado rivers length", "source": "river whose length is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2264", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river s length is lesser than the altitude of death valley", "source": "river whose length is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2265", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is longer than the elevation of death valley", "source": "river whose length is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2269", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population less than that of california", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2270", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys population is greater than that of california", "source": "city whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2278", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has an area greater than the area of lake tahoe", "source": "lake whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have a lower elevation than mount whitney", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2282", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what other mountains are as tall as mount whitney", "source": "mountain whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2309", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city has a smaller area than lake tahoe", "source": "city whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2311", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river s length is greater than river colorado", "source": "river whose length is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city with a higher population than that of sacramento", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2313", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a land area larger than ca", "source": "state whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2316", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is bigger then california", "source": "state whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2328", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city smaller than california", "source": "city whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2332", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "states less dense than california", "source": "state whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2336", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what locations have a higher elevation than the length of the colorado river", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2350", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "states smaller than california", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2351", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has more people than california", "source": "city whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2352", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a smaller population than california", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes are smaller than lake tahoe or the same size", "source": "lake whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2356", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has an area less than that of california", "source": "city whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation that is at most the length of the colorado river", "source": "mountain whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is more dense than california", "source": "state whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2366", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have a smaller population than california", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2370", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has equal or less area than lake tahoe", "source": "lake whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2380", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a state smaller in area than lake tahoe", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is larger in population than sacramento", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2388", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "a mountain who is no taller than the colorado river is long", "source": "mountain whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2390", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is at a lower elevation than the length of the colorado river", "source": "mountain whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2396", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is at least as long as mt whitney is high", "source": "river whose length is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2404", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "colorado river is longer than the elevation of this mountain", "source": "mountain whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2423", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has an area smaller than lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2424", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "states as dense as california", "source": "state whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "a river thats shorter in length than mount whitneys elevation", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a lake that is at least as large as california", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2441", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state has a smaller denisty than that of california", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2454", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have areas larger than california", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2466", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population greater than california", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2470", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states areas are equal or less than the area of california", "source": "state whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2475", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is smaller in area than ca", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2487", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is larger than lake tahoe", "source": "state whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2494", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has an area at least the size of california", "source": "city whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2495", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have area equal or less than lake tahoes", "source": "state whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2496", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is equal to or less in elevation to mt whitney", "source": "mountain whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2499", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation less than the length of the colorado river", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2502", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city s area is greater than lake tahoe s area", "source": "city whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2504", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is no higher than death valley", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2516", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a state with a population density at least the size of the population density of california", "source": "state whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2524", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area no larger than the area of lake tahoe", "source": "state whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2533", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "largest city in california", "source": "city whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population at least the size of california", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2538", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city that has the same population of most of california", "source": "city whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2558", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is shorter in length than death valley is in height", "source": "river whose length is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2560", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city has a population equal to or less than ca", "source": "city whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2562", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a state that has an area at least the size of lake tahoe", "source": "state whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2563", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is smaller than the colorado river", "source": "river whose length is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2568", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have an elevation that is less than mount whitney", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2570", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a greater population than sacramento", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2576", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation no less than that of mount whitney", "source": "mountain whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2578", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has more residents than sacremento", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2579", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is smaller than death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2585", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "cities with a smaller are than california", "source": "city whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2590", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation at least that of death valley", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2594", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys area is at least the area of california", "source": "city whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2596", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "lakes near lake tahoe", "source": "lake whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2605", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a river which is at least as long as death valley is high", "source": "river whose length is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2606", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "a mountain with less elevation than death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2619", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with same population as that of california", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2629", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers have lengths equal or less than death valley", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2634", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have a population that is bigger than that of sacramento", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2636", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is shorter than the elevation of death valley", "source": "river whose length is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2644", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has an elevation smaller than death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2648", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities have less people than sacramento", "source": "city whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2663", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is smaller than the length of the colorado river", "source": "mountain whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2668", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a smaller area than ca", "source": "city whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2669", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population greater than sacramento ca", "source": "state whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2672", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are shorter than death valleys elevation", "source": "river whose length is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2673", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has the least area in california", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2683", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have at least as much population as california", "source": "city whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2688", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities have a population at least as larger as california", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2705", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a river shorter than the colorado river", "source": "river whose length is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2709", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes are smaller in area than lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2712", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lake is at least the size of lake tahoe by area", "source": "lake whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2716", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river shorter than the elevation of mount whitney", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2722", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is shorter than the colorado river", "source": "river whose length is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2723", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a lake smaller in area than lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2742", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is equal in area to lake tahoe", "source": "lake whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2744", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are shorter than the length of the colorado river", "source": "river whose length is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2745", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states area is more than lake tahoe", "source": "state whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2747", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city whose area is smaller than the area of california", "source": "city whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2754", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is the name of a place higher in elevation than death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2755", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state with more population than that of sacramento", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2759", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains are at least as tall as mount whitney", "source": "place whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2765", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has equal or more residents than sacramento", "source": "state whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2775", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "lake with smaller are than lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2779", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "note the river that is longer than the colorado river", "source": "river whose length is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2780", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city with a smaller population than sacramento", "source": "city whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2782", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have less people than sacramento", "source": "city whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2784", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain s altitude is same as the length of river colorado", "source": "mountain whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2785", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys area is greater than that of california", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2794", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what area is higher in elevation than the colorado river is long", "source": "place whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2799", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city s population is greater than that of california", "source": "city whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the river that is less than or equal to the height of mount whitney", "source": "river whose length is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2808", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "place higher than that of death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2809", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lake s area is lesser than that of lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2810", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "is there a river that is at least as long as the height of mount whitney", "source": "river whose length is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2811", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is a long as the elevation of mount whitney", "source": "river whose length is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2813", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a bigger area than california", "source": "state whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2819", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population at least as great as sacramento", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2823", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes have at least the same area as lake tahoe", "source": "lake whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2826", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have populations smaller than sacramentos", "source": "state whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2833", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities are at least the same size as lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2834", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "place with elevation same as length of colorado river", "source": "place whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2838", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lakes are larger in area than lake tahoe", "source": "lake whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2841", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which place s altitude is equal to river colorado s length", "source": "place whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2842", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city with a larger population than sacramento", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2850", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake equals the area of california", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2853", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "cities with populations smaller than california", "source": "city whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2860", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "where has an elevation larger than death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2862", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes are is smaller than california", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2863", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has an elevation that is the same or greater than death valley", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2866", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river whose length is not less than colorado river", "source": "river whose length is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2867", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation lower than the length of the colorado river", "source": "mountain whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2886", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a city with a smaller area than that of lake tahoe", "source": "city whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2888", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a state smaller in size by area than ca", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2891", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what other places are at the same elevation as mount whitney", "source": "place whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2895", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has equal or greater elevation than death valley", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2896", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are as long or shorter than the colorado river", "source": "river whose length is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2897", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a smaller number of people living in it than california", "source": "state whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2900", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population that is at least as much as california", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2903", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states population is lesser than that of sacramento", "source": "state whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2908", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population that is at most that of sacramento", "source": "state whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2910", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a state with a lower population than california", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2926", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a smaller population than california", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2927", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake in california has the largest area", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2938", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with not less density than california", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2940", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation less than that of mount whitney", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2944", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has an elevation greater than death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2945", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has a greater elevation than death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2946", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is smaller than the elevation of mt whitney", "source": "river whose length is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_train_2948", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a mountain no taller than the length of the colorado river", "source": "mountain whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_train_2949", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has a smaller area than lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2954", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a lake with an area larger than that of lake tahoe", "source": "lake whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2956", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "place with smaller elevation than elevation of death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_train_2958", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities have fewer residents than sacramento", "source": "city whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2960", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has an area larger than california", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2963", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a population no greater than that of california", "source": "city whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2966", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city with population no greater than ca", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_train_2968", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population greater than sacramento", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2973", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes area is larger than the area of california", "source": "lake whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2976", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area less than california", "source": "state whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_train_2977", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with more population than that of sacramento", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_train_2978", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a state with population no greater than ca", "source": "state whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_train_2979", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have an area that is greater than lake tahoe", "source": "state whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_train_2987", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city larger in area than ca", "source": "city whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_5", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is higher in elevation than the colorado river is long", "source": "mountain whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_11", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is the same as mount whitneys elevation", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_12", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have a larger area than lake tahoe", "source": "city whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_16", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river not shorter than elevation of death valley", "source": "river whose length is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_24", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name the mountain that has a height less than or equal to the number equaling the elevation of death valley", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_26", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is smaller than the length of the colorado river", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_32", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lakes are smaller than lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_33", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is equal or longer than the elevation of death valley", "source": "river whose length is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_37", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is greater in population than ca", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_test_40", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a state that is larger in area than california", "source": "state whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_58", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river longer than elevation of death valley", "source": "river whose length is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_66", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have population equal or larger than californias", "source": "city whose population is at least population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_test_69", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain has a larger elevation than mount whitney", "source": "mountain whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_71", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities are as populous as sacramento", "source": "city whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_76", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains have lower elevations than mount whitney", "source": "mountain whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_78", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "lake whose area is more than that of lake tahoe", "source": "lake whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_79", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river shorter than length of colorado river", "source": "river whose length is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_81", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the city with a larger density than the state of california", "source": "city whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_84", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a greater population than sacramento", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_88", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has a higher elevation that mount whitney", "source": "mountain whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_89", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities are less dense than california", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_91", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have at least the population density of california", "source": "state whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_96", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a larger density than california", "source": "state whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_100", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "cities smaller than sacramento", "source": "city whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_103", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have area equal or greater than californias", "source": "city whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_113", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a smaller area than lake tahoe", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_115", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has density smaller than california", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a larger area than lake tahoe", "source": "state whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_125", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place is at the same level as death valley", "source": "place whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_130", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state with less population than sacramento", "source": "state whose population is smaller than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have densities equal or less than california", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes have at most the same area as lake tahoe", "source": "lake whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_138", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the state with a population that is more than the total population of california", "source": "state whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_test_143", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have more area than california", "source": "state whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_144", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a state whose population is equal to or greater than that of sacramento", "source": "state whose population is at least population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_153", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what areas elevation is lesser than the length of the colorado river", "source": "place whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is the biggest in california", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is lower in elevation than mt whitney", "source": "mountain whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has the same elevation or higher as mount whitney", "source": "place whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_167", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a city smaller in area that lake tahoe", "source": "city whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_174", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city that is at least as dense as california", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_182", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is no higher than mt whitney", "source": "mountain whose elevation is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "is there a lake so big that its total area is more than that of the state of california", "source": "lake whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_197", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is no taller than the elevation of death valley", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_198", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states density is less than californias", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have a lower population density than california", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_202", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city has a larger population than sacramento", "source": "city whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation at least as high as death valley", "source": "mountain whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lakes area is more than the area of lake tahoe", "source": "lake whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_209", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "place whose elevation is less than mount whitneys elevation", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_211", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states area is smaller than the area of lake tahoe", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_212", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is equal to or smaller in population than ca", "source": "city whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_test_223", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what places have an elevation no higher than death valley", "source": "place whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_248", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river with length not more than elevation of death valley", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_256", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population at most the population of sacramento", "source": "state whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_258", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a river no longer than the colorado river", "source": "river whose length is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_261", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which locations have higher elevation that the colorado river", "source": "place whose elevation is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_273", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has the same population as sacramento or less", "source": "state whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_279", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "places higher than mt whitney", "source": "place whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_298", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state has a population smaller than californias", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_test_300", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "sacremento has a smaller population than that of which state", "source": "state whose population is larger than population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_301", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "lakes smaller than california", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_303", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains are as tall or shorter than death valleys elevation", "source": "mountain whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_308", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state s area is equal to that lake tahoe", "source": "state whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is at most the elevation of death valley", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_313", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is at least as large as lake tahoe by area", "source": "lake whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is lower in height than the colorado river is long", "source": "mountain whose elevation is smaller than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river s length is almost equal to the height of death valley", "source": "river whose length is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_347", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which river s length is greater than the altitude of mount whitney", "source": "river whose length is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_351", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is more than the area of california", "source": "state whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_352", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place is no greater in elevation than death valley", "source": "place whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_353", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which cities have a population larger than that of california", "source": "city whose population is larger than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_test_359", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lakes area is more than the area of california", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states are higher in density than california", "source": "state whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_379", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place is higher than death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_383", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation larger than the length of the colorado river", "source": "place whose elevation is larger than length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with less density than california", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_385", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "list of cities with smaller density than california", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_387", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has elevation smaller than the elevation of death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_390", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has an area smaller than california", "source": "lake whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_392", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "a river with length shorter than death valleys elevation", "source": "river whose length is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_393", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "where is the elevation larger than that of mount whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_394", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what cities have area equal to or greater than lake tahoe", "source": "city whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_399", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has the largest area in california", "source": "city whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_400", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains are taller than the length of the colorado river", "source": "mountain whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_409", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a lake bigger than lake tahoe", "source": "lake whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city with a smaller land coverage than lake tahoe", "source": "city whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_421", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state wwith area at most area of lake tahoe", "source": "state whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_422", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a density smaller than that of california", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lake as an area at least the size of california", "source": "lake whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_429", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population more than that of sacramento", "source": "state whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_431", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is greater than death valler by elevation", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_434", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state is smaller than california", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have less people than california", "source": "state whose population is smaller than population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string population_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_test_440", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains elevation is at least the same as the colorado river", "source": "mountain whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_444", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake is as large as california", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_454", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has equal or lesser residents compared to sacremento", "source": "city whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_455", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes have larger area than california", "source": "lake whose area is larger than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_459", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation greater than death valley", "source": "place whose elevation is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains are larger than mount whitney", "source": "mountain whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_477", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain has an elevation smaller than death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_482", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a land area that is equal to or greater than that of california", "source": "state whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_487", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area larger than lake tahoe", "source": "state whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_490", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "state not larger than california", "source": "state whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_495", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "cities smaller than lake tahoe", "source": "city whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_497", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has an area that is no bigger than lake tahoe", "source": "city whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_502", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is a populated as sacramento", "source": "city whose population is at most population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.city.sacramento_ca (string population_city_count)))))", "qid": "geo880_test_505", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what states have area less than lake tahoe", "source": "state whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_516", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city is thinly populated than california", "source": "city whose density is at least density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_522", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a mountain lower in elevation than death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_531", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys density is at most the same as california", "source": "city whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_536", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river that is shorter that the colorado", "source": "river whose length is at most length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_537", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what citys density is lesser than that of california", "source": "city whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_542", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "river that is shorter than death valleys elevation", "source": "river whose length is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_545", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "places lower than mt whitney", "source": "place whose elevation is smaller than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_551", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river has a length longer than death valleys elevation", "source": "river whose length is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_553", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain s altitude is lesser than the height of death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_561", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city is at most as big as california by area", "source": "city whose area is at most area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_562", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state is lower in density than california", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_564", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what area is at least as high in elevation as the colorado river is long", "source": "place whose elevation is at least length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.river.colorado (string len_river_length)))))", "qid": "geo880_test_565", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a larger area than lake tahoe", "source": "city whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_573", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "mountain with less elevation than elevation of death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_578", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has an area larger than lake tahoe", "source": "state whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_585", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a population density equal to or less than ca", "source": "state whose density is at most density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_593", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "city smaller than lake tahoe", "source": "city whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string area_city_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_600", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what city has a larger density than california", "source": "city whose density is larger than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string density_city_count)) (string >) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_613", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what location has a greater elevation than death valley", "source": "place whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_622", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain has an elevation that is larger than that of death valley", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_627", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have areas smaller than california", "source": "state whose area is smaller than area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_630", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "name a state whose area is no greater than lake tahoe", "source": "state whose area is at most area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string <=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_658", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what state has a lower population than california", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_659", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lake has a smaller area than lake tahoe", "source": "lake whose area is smaller than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string <) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_663", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which mountain is higher than mt whitney", "source": "mountain whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_666", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers are shorter than mount whitney is tall", "source": "river whose length is at most elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_674", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what river is at most as long as the elevation of death valley", "source": "river whose length is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_696", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountain is higher than death valley", "source": "mountain whose elevation is larger than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_700", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which location elevation is lesser than the altitude of death valley", "source": "place whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_702", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place has an elevation higher than mt whitney", "source": "place whose elevation is at least elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_703", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which state is at least the area of lake tahoe", "source": "state whose area is at least area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string area_state_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_704", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what rivers length is at least death valleys elevation", "source": "river whose length is at least elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (call ensureNumericProperty (string len_river_length)) (string >=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_708", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what place is no greater in elevation than death valley", "source": "place whose elevation is at most elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string <=) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_720", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what mountains elevation is smaller than that of death valley", "source": "mountain whose elevation is smaller than elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (call ensureNumericProperty (string elevation_mountain_length)) (string <) (call ensureNumericEntity (call getProperty fb:en.place.death_valley (string elevation_place_length)))))", "qid": "geo880_test_726", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which states have a smaller density than california", "source": "state whose density is smaller than density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call ensureNumericProperty (string density_state_count)) (string <) (call ensureNumericEntity (call getProperty fb:en.state.california (string density_state_count)))))", "qid": "geo880_test_727", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which lakes have an area at least as large as california", "source": "lake whose area is at least area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >=) (call ensureNumericEntity (call getProperty fb:en.state.california (string area_state_length^2)))))", "qid": "geo880_test_730", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what lakes are bigger than lake tahoe by area", "source": "lake whose area is larger than area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (call ensureNumericProperty (string area_lake_length^2)) (string >) (call ensureNumericEntity (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))))", "qid": "geo880_test_733", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is a place with a higher elevation than that of mount whitney", "source": "place whose elevation is larger than elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (call ensureNumericProperty (string elevation_place_length)) (string >) (call ensureNumericEntity (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))))", "qid": "geo880_test_736", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which city in california has the largest population", "source": "city whose population is at most population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call ensureNumericProperty (string population_city_count)) (string <=) (call ensureNumericEntity (call getProperty fb:en.state.california (string population_state_count)))))", "qid": "geo880_test_747", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty fb:ANON_ENTITY (ANON_STRING)))))"}
