{"paraphrased": "which state borders either ca or tx", "source": "state that borders california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_test_449", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which rivers traverses through california or texas", "source": "river that traverses california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what lakes are contained in california or texas", "source": "lake that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2433", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "lake either in california or texas", "source": "lake that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which river goes through either california or texas", "source": "river that traverses california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2448", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what is a lake in california or texas", "source": "lake that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_944", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states border california and texas", "source": "state that borders california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2789", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which states capitals are sacramento and austin", "source": "state whose capital is sacramento or austin", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_1179", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states share a border with either california or texas", "source": "state that borders california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_879", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what river goes through california or texas", "source": "river that traverses california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2146", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what is the capital of the state containing lake tahoe", "source": "city that is capital of state that lake tahoe is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe)))", "qid": "geo880_test_709", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the capital city of the state with sacramento", "source": "city that is capital of state that sacramento is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2349", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which city is the capital of california", "source": "city that is capital of state that sacramento is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_1754", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the capital city of a state bordering california", "source": "city that is capital of state that california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california)))", "qid": "geo880_train_2682", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states border the state that contains colorado river", "source": "state that state that colorado river traverses borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado)))", "qid": "geo880_test_83", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the capital of the state containing mount whitney", "source": "city that is capital of state that mount whitney is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_train_2374", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state is next to mount whitneys state", "source": "state that state that mount whitney is contained by borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_test_216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what are the capital cities of states that the colorado river goes through", "source": "city that is capital of state that colorado river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado)))", "qid": "geo880_train_1080", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which state borders the state containing death valley", "source": "state that state that death valley is contained by borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley)))", "qid": "geo880_train_2792", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the capital city of the states the colorado river crosses", "source": "city that is capital of state that colorado river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado)))", "qid": "geo880_train_2725", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "states that contain both mount whitney and lake tahoe", "source": "state that mount whitney is contained by and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_531", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states does the colorado river go through that also have lake tahoe", "source": "state that colorado river traverses and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_1790", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has both mount whitney and death valley in it", "source": "state that mount whitney is contained by and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_978", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains the colorado river and sacramento", "source": "state that colorado river traverses and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_717", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "state that has mount whitney in it and borders california", "source": "state that california borders and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_test_623", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have lake tahoe and death valley in them", "source": "state that lake tahoe is contained by and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_2967", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state contains both sacramento and the colorado river", "source": "state that colorado river traverses and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1477", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento and is passed by colorado river", "source": "state that sacramento is contained by and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_1694", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what are the states that contain sacramento or lake tahoe", "source": "state that sacramento is contained by and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_390", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state contains lake tahoe and is bordered by california", "source": "state that lake tahoe is contained by and that california borders", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (call reverse (string next_to_state_state)) (string =) fb:en.state.california))", "qid": "geo880_train_1957", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states does the colorado not traverse", "source": "state that colorado river not traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string !=) fb:en.river.colorado))", "qid": "geo880_train_1533", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is not a the california capital", "source": "city that is not capital of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string !=) fb:en.state.california))", "qid": "geo880_train_2230", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "state which colorado river traverses", "source": "state that colorado river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_667", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states is lake tahoe located in", "source": "state that lake tahoe not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string !=) fb:en.lake.tahoe))", "qid": "geo880_train_2401", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states contain death valley", "source": "state that death valley not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string !=) fb:en.place.death_valley))", "qid": "geo880_test_510", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state doesnt contain mount whitney", "source": "state that mount whitney not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string !=) fb:en.mountain.whitney))", "qid": "geo880_train_2543", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states do not contain mt whitney", "source": "state that mount whitney not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string !=) fb:en.mountain.whitney))", "qid": "geo880_train_2795", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states do not have sacramento in them", "source": "state that sacramento not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_2518", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states does the colorado river not traverse", "source": "state that colorado river not traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string !=) fb:en.river.colorado))", "qid": "geo880_train_567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not contain mount whitney", "source": "state that mount whitney not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string !=) fb:en.mountain.whitney))", "qid": "geo880_test_660", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "either death valley or the pacific ocean", "source": "death valley or pacific ocean", "target": "(call listValue (call concat fb:en.place.death_valley fb:en.place.pacific_ocean))", "qid": "geo880_train_2027", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "where are lake tahoe and lake huron", "source": "lake tahoe or lake huron", "target": "(call listValue (call concat fb:en.lake.tahoe fb:en.lake.huron))", "qid": "geo880_test_204", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "either california or texas", "source": "california or texas", "target": "(call listValue (call concat fb:en.state.california fb:en.state.texas))", "qid": "geo880_test_417", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "either mount whitney or mount rainier", "source": "mount whitney or mount rainier", "target": "(call listValue (call concat fb:en.mountain.whitney fb:en.mountain.rainier))", "qid": "geo880_test_297", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "is this the colorado river or the red river", "source": "colorado river or red river", "target": "(call listValue (call concat fb:en.river.colorado fb:en.river.red))", "qid": "geo880_test_320", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "show me mount whitney or mount rainier", "source": "mount whitney or mount rainier", "target": "(call listValue (call concat fb:en.mountain.whitney fb:en.mountain.rainier))", "qid": "geo880_train_1597", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "is it lake huron or lake tahoe", "source": "lake tahoe or lake huron", "target": "(call listValue (call concat fb:en.lake.tahoe fb:en.lake.huron))", "qid": "geo880_test_35", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "where is death valley", "source": "death valley or pacific ocean", "target": "(call listValue (call concat fb:en.place.death_valley fb:en.place.pacific_ocean))", "qid": "geo880_test_251", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "is this mt whitney or mt rainier", "source": "mount whitney or mount rainier", "target": "(call listValue (call concat fb:en.mountain.whitney fb:en.mountain.rainier))", "qid": "geo880_train_682", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "what state is larger california or texas", "source": "california or texas", "target": "(call listValue (call concat fb:en.state.california fb:en.state.texas))", "qid": "geo880_train_657", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "what mountain is in the same state as death valley", "source": "mountain that is contained by state that death valley is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley)))", "qid": "geo880_train_1229", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what place is in the same state as mount whitney", "source": "place that is contained by state that mount whitney is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_test_657", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state borders the state where sacramento is", "source": "state that borders state that sacramento is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_971", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what lakes are located in the state that contains mt whitney", "source": "lake that is contained by state that mount whitney is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_train_2167", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what location is in the state containing lake tahoe", "source": "place that is contained by state that lake tahoe is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe)))", "qid": "geo880_train_2393", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which river runs through the state containing mount whitney", "source": "river that traverses state that mount whitney is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_train_2774", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountain is in the same state as mount whitney", "source": "mountain that is contained by state that mount whitney is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_train_964", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what mountains are in the state containing mount whitney", "source": "mountain that is contained by state that mount whitney is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney)))", "qid": "geo880_train_2158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which lake is contained within the state that also contains death valley", "source": "lake that is contained by state that death valley is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley)))", "qid": "geo880_train_1376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which place in a state has death valley in it", "source": "place that is contained by state that death valley is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley)))", "qid": "geo880_train_1703", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what place is contained by over two states", "source": "place that is contained by more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2959", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is found in two ore more states", "source": "lake that is contained by at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2285", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what place is contained by more than two states", "source": "place that is contained by more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1981", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a state that borders two other states", "source": "state that borders two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2383", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is in two states", "source": "city that is contained by two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_36", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "place in only one state", "source": "place that is contained by less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2925", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountain is contained by located in fewer than two states", "source": "mountain that is contained by less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_322", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which places are in two states or fewer", "source": "place that is contained by less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1505", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which lakes are contained in less than two states", "source": "lake that is contained by less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_350", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river crosses two states", "source": "river that traverses two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_727", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two capitals", "source": "state that has two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (number 2)))", "qid": "geo880_train_1412", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what has only one capital", "source": "state that has less than two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string <) (number 2)))", "qid": "geo880_train_136", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what states have only one or zero capitals", "source": "state that has less than two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string <) (number 2)))", "qid": "geo880_train_2376", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what state has 2 capital cities", "source": "state that has two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (number 2)))", "qid": "geo880_train_2343", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what state has more than two capitals", "source": "state that has more than two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string >) (number 2)))", "qid": "geo880_test_369", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what state has over two capitals", "source": "state that has more than two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string >) (number 2)))", "qid": "geo880_test_401", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which state has more than two capitals", "source": "state that has at least two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string >=) (number 2)))", "qid": "geo880_train_1818", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which states have more than two capitals", "source": "state that has more than two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string >) (number 2)))", "qid": "geo880_train_817", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what states have more than two capitals", "source": "state that has more than two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string >) (number 2)))", "qid": "geo880_test_307", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which states have only one capital", "source": "state that has less than two capital", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string <) (number 2)))", "qid": "geo880_test_149", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what cities are contained by california", "source": "state that city that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1844", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state is within california", "source": "state that place that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california)))", "qid": "geo880_test_370", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which states border states that border california", "source": "state that state that borders california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_647", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the state capital of a state bordering california", "source": "city that is capital of state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2559", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state is in the same city as california", "source": "state that city that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2749", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which city is the capital of a state bordering california", "source": "city that is capital of state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2464", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state contains mountains that california has", "source": "state that mountain that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2112", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what city is the capital of a state whose capital city is sacramento", "source": "city that is capital of state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2768", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "which place in the state of california has a mountain in it", "source": "state that mountain that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1500", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what city is the capital of a california border state", "source": "city that is capital of state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2218", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "large cities in california", "source": "city that is contained by california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_588", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what major river runs through california", "source": "river that traverses california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string major_river)))", "qid": "geo880_test_326", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is a major city in california", "source": "city that is contained by california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_65", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what major river flows through california", "source": "river that traverses california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string major_river)))", "qid": "geo880_train_1782", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is a major city in ca", "source": "city that is contained by california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_test_439", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which major river crosses california", "source": "river that traverses california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string major_river)))", "qid": "geo880_train_1343", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is a large city in california", "source": "city that is contained by california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_2763", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which major city is contained by california", "source": "city that is contained by california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_714", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which city is the capital of california", "source": "city that is contained by california and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string capital_city)))", "qid": "geo880_train_436", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what major river is part of california", "source": "river that traverses california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string major_river)))", "qid": "geo880_test_563", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
