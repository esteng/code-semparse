{"paraphrased": "line that begins with a lowercase letter and a vowel", "source": "line that starts with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4160", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and terminating with a letter", "source": "line that starts with `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_4368", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending in lowercase and beginning with a vowel", "source": "line that ends with lowercase letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3107", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with  123  and that ends with  123 ", "source": "line that starts with `` 123 '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_test_1575", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with a special character but ends with the numbers 123", "source": "line that ends with `` 123 '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_5754", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with 123 and ends with a lowercase character", "source": "line that starts with `` 123 '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_5249", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a letter and abc", "source": "line that starts with letter and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_test_1127", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that starts with  123 ", "source": "line that ends with letter and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_604", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that starts with capital letter", "source": "line that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_270", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting off capitalized with abc as an ending word", "source": "line that ends with `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_test_572", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "word beginning with at least two characters", "source": "word that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3915", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with no more than two characters", "source": "number that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_18", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two vowel", "source": "word that starts with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2257", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a minimum of two characters in the beginning", "source": "word that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1182", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at least two character", "source": "word that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_610", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with two vowel", "source": "word that starts with two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_277", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at least two letter", "source": "word that starts with at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with two or more lowercase letters", "source": "word that starts with at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_453", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a number beginning with two lowercase letters at the most", "source": "number that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3169", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that begins with no more than two lowercase letters", "source": "number that starts with at most two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [a-z]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_411", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that include a character directly before the digit", "source": "line that contains character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3644", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains lowercase letter before digit", "source": "line that contains lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_1578", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains capital letter before digit", "source": "line that contains capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1325", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a lowercase letter after a digit", "source": "line that contains lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_6287", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that contains a vowel before a digit", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_2122", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line using a lowercase letter followed by a digit", "source": "line that contains lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4141", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses vowels before digits", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3782", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines where a letter appears before a number", "source": "line that contains letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3431", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has 123 before a digit", "source": "line that contains `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_833", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  123  after digit", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_5650", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "numbers that include no more than two characters", "source": "number that contains at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_738", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word has two characters in it", "source": "word that contains two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string .)) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1096", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using two digits or less", "source": "number that contains at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [0-9])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6141", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses at least two letters", "source": "word that contains at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3197", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains two vowel", "source": "word that contains two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4391", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a word that has at least two letters in it", "source": "word that contains at least two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_627", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains no more than two vowels", "source": "word that contains at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {0,) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1707", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses 2 vowels", "source": "word that contains two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [AEIOUaeiou])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2368", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words contain at least two lowercase letters", "source": "word that contains at least two lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [a-z])) (string \")\") (string {) (call .toString (number 2)) (string ,})) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1428", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains two letter", "source": "word that contains two letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"(\") ((lambda x (call + (string .*) (var x) (string .*))) (string [A-Za-z])) (string \")\") (string {) (call .toString (number 2)) (string })) (string \"))\\\\\\\\b\"))", "qid": "regex_train_995", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) ((lambda x (call + (ANON_STRING) (var x) (ANON_STRING))) (ANON_STRING)) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that has the word abc", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2820", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains the word  abc ", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4005", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and that includes the word abc", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4054", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains   abc ", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4061", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what number that contains  123  and that contains character", "source": "number that contains `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_552", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a vowel and a character", "source": "word that contains vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1532", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains  abc ", "source": "word that contains `` abc '' and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6217", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that contains  123 ", "source": "number that contains character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1752", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  and that contains  123 ", "source": "number that contains `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4386", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a character in a word containing abc", "source": "word that contains `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5935", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters", "source": "number that contains character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using both a vowel and a capital letter", "source": "word that contains vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3293", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that contains letter", "source": "word that contains lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5036", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains vowel and that contains capital letter", "source": "word that contains vowel and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_428", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that uses the number 123 or any digits", "source": "line that contains `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2526", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include a letter or a digit", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1561", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains any lowercase letter or a digit", "source": "line that contains lowercase letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_654", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains either 123 or a digit", "source": "line that contains `` 123 '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_101", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line using either a vowel or a digit", "source": "line that contains vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains letter or digit", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_166", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains vowel or digit", "source": "line that contains vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1100", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that includes a letter or a digit", "source": "line that contains letter or digit", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3670", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  or digit", "source": "line that contains `` abc '' or digit", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4286", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that utilize a vowel or a number", "source": "line that contains vowel or digit", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5624", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line commencing with a vowel or a digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_764", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with a character or a digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3535", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line begins with a letter or digit", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5821", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with either a capital letter in with a digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_1191", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel or digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_815", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that begins with a digit or abc", "source": "line that starts with `` abc '' or digit", "target": "(call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2495", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with letter or digit", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_5281", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter or digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1573", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with a capital letter or a digit", "source": "line that starts with capital letter or digit", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_22", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines starting 123 or another single digit", "source": "line that starts with `` 123 '' or digit", "target": "(call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2048", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "which number ends with 123 before a digit", "source": "number that ends with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2471", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that stops after 123 is behind any digits", "source": "number that ends with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123)))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_700", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that terminate with characters before a digit", "source": "number that ends with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_711", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that terminates with a digit followed by a character", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4022", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character before digit", "source": "number that ends with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2803", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number ending with any character followed by any digit", "source": "number that ends with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_585", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with a character after digit", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5121", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  after digit", "source": "number that ends with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2916", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with character after digit", "source": "number that ends with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .)))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4500", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with  123  before digit", "source": "number that ends with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9])))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3531", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what lines use lowercase letters but also start with a character", "source": "line that starts with character and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_921", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and had a vowel in the beginning", "source": "line that starts with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4633", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with letter and that contains vowel", "source": "line that ends with letter and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1937", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a lowercase letter at the end and also contains a character", "source": "line that ends with lowercase letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4819", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains lowercase letter", "source": "line that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 and using a lowercase letter", "source": "line that starts with `` 123 '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3706", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc and uses vowels", "source": "line that starts with `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_6151", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a character and using a vowel", "source": "line that starts with character and that contains vowel", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_199", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with a capital and containing a character", "source": "line that ends with capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1457", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains capital letter", "source": "line that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1907", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that not ends with lowercase letter", "source": "line that not ends with lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\"))", "qid": "regex_test_1458", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not start with a lowercase letter", "source": "line that not starts with lowercase letter", "target": "(call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_377", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with  abc ", "source": "line that not starts with `` abc ''", "target": "(call + (string \"~(\") (call + (string abc) (string .*)) (string \")\"))", "qid": "regex_train_1944", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that begins with anything other than a capitalized letter", "source": "line that not starts with capital letter", "target": "(call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_train_286", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have abc in the beginning", "source": "line that not starts with `` abc ''", "target": "(call + (string \"~(\") (call + (string abc) (string .*)) (string \")\"))", "qid": "regex_train_838", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that does not begin in abc", "source": "line that not starts with `` abc ''", "target": "(call + (string \"~(\") (call + (string abc) (string .*)) (string \")\"))", "qid": "regex_train_1407", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not start with a vowel", "source": "line that not starts with vowel", "target": "(call + (string \"~(\") (call + (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_1477", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "the line must end with a capital letter", "source": "line that not ends with lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\"))", "qid": "regex_train_637", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that doesnt end with abc", "source": "line that not ends with `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (string abc)) (string \")\"))", "qid": "regex_train_4625", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line beginning with a capital letter letter or a digit", "source": "line that not starts with lowercase letter", "target": "(call + (string \"~(\") (call + (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_test_1180", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that starts with at least two number", "source": "line that starts with at least two number", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3357", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with at a maximum of two capital letter", "source": "line that starts with at most two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_test_732", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line uses at most two capital letters at the beginning", "source": "line that starts with at most two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_617", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line begins with two letters", "source": "line that starts with at most two letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Za-z]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3529", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with at least two capital letter", "source": "line that starts with at least two capital letter", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [A-Z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_78", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with two or more words", "source": "line that starts with at least two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1113", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that begins with no fewer than two characters", "source": "line that starts with at least two character", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3621", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that begins with two vowels", "source": "line that starts with two vowel", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1202", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with two words", "source": "line that starts with two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_3274", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that begin with two or more words", "source": "line that starts with at least two word", "target": "((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_5042", "anonymized_target": "((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a word beginning with a lowercase letter and containing a capital letter", "source": "word that starts with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2395", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that end with a lowercase letter and have a capital letter", "source": "word that ends with lowercase letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6021", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that begins with a vowel and includes a character", "source": "word that starts with vowel and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3896", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that contains character", "source": "word that starts with lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2504", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that starts with a letter and contains a lowercase letter", "source": "word that starts with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4791", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending with and containing a letter", "source": "word that ends with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_97", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that contains lowercase letter", "source": "word that ends with letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_38", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with any character that has a vowel in it", "source": "word that ends with character and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1272", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  and that contains character", "source": "word that ends with `` abc '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_345", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with a vowel and have abc", "source": "word that starts with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3412", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is a line that ends with the word abc and also begins with the word abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2428", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with the word  abc ", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1245", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with abc and has abc repeated at the very end", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines beginning and ending with abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2097", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends and starts with abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1248", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with the word  abc ", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2976", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that has the word abc in it and also ends with a vowel", "source": "line that contains the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_987", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include the smaller word abc and begin with abc", "source": "line that contains the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_958", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with  123 ", "source": "line that contains the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_124", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains  abc  and starts with  abc ", "source": "line that contains the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_1784", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with  123 ", "source": "line that contains the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2207", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc and begins with 123", "source": "line that contains the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines where the word abc appears and ends with 123", "source": "line that contains the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_2109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that  has abc as its beginning and also includes the word abc", "source": "line that contains the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_158", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and that ends with a vowel", "source": "line that contains the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_test_228", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with capital letter", "source": "line that contains the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_5972", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc or 123", "source": "line that starts with `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5664", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  or the number  123 ", "source": "line that starts with `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4647", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with  abc  or the number  123 ", "source": "line that starts with `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_31", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with character or the number  123 ", "source": "line that starts with character or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5215", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with a letter or the number 123", "source": "line that starts with letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3007", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with 123123", "source": "line that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_889", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that starts with a character or 123", "source": "line that starts with character or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5590", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with 123 or 123", "source": "line that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_557", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line beginning with either a letter or 123", "source": "line that starts with letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5888", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with a character or the number  123 ", "source": "line that starts with character or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_279", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "number that contains  abc  or digit", "source": "number that contains `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1525", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a letter or a digit", "source": "word that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_905", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character or digit", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_62", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a digit or letter", "source": "word that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1288", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that contain either a character or a digit", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2854", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that includes letter or digit", "source": "number that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1697", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a vowel or a digit", "source": "word that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_884", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter or digit", "source": "word that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains lowercase letter or digit", "source": "number that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_281", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that uses either a lowercase letter or a digit", "source": "number that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line includes uppercase letter and character", "source": "line that contains capital letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a capital letter and with a lowercase letter", "source": "line that contains capital letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3603", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains vowel and that contains letter", "source": "line that contains vowel and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4967", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains  abc ", "source": "line that contains letter and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3762", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that contains character", "source": "line that contains letter and that contains character", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_272", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contain both a character and abc", "source": "line that contains character and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5644", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with a lowercase letter in it", "source": "line that contains lowercase letter and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1302", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a vowel", "source": "line that contains vowel and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_1333", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel along with a word with a capital letter", "source": "line that contains vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3755", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing 123 and a vowel", "source": "line that contains `` 123 '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2581", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after a lowercase letter or 123", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_test_1415", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a line that has at least one letter or the number 123 in it", "source": "line that ends with letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1024", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "what line ends 123 or with the short word abc", "source": "line that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_5127", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines that have the number 123 but also ends with a character", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1436", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line ending with either a vowel or 123", "source": "line that ends with vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_4792", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "what line ends with either 123 or a letter", "source": "line that ends with letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_6252", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that ends with  123  or the number  123 ", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_5565", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lines ending with a character or the number 123", "source": "line that ends with character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_3263", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "lind ending with lowercase letter or number 123", "source": "line that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_1593", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "line that finishes with 123 or 123", "source": "line that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")))", "qid": "regex_train_65", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")))"}
{"paraphrased": "a digit preceded by a capital", "source": "capital letter before digit", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_4420", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what  abc  before digit", "source": "`` abc '' before digit", "target": "(call .concat (string abc) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_718", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "number that follows 123", "source": "`` 123 '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string 123)))", "qid": "regex_train_5469", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a letter following a number", "source": "letter after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_4646", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "vowel before digit", "source": "vowel before digit", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1258", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a digit followed by a character", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_3966", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "digits after characters", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_429", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "character before digit", "source": "character before digit", "target": "(call .concat (string .) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_3506", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letter before digit", "source": "capital letter before digit", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_2103", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter followed by a digit", "source": "lowercase letter before digit", "target": "(call .concat (string [a-z]) (call .concat (string .*) (string [0-9])))", "qid": "regex_test_1366", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "word that contains any character or the number 123", "source": "word that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4440", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contain either abc or the number 123", "source": "word that contains `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1256", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that include either a letter or the number sequence 123", "source": "word that contains letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4903", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilizes the letters abc or the number", "source": "word that contains `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1647", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word with 123 or a vowel in it", "source": "word that contains vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains capital letter or the number  123 ", "source": "word that contains capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1576", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 123", "source": "number that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1613", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  or the number  123 ", "source": "number that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2773", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters or the number 123", "source": "number that contains character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1178", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has the digit 123 or  a letter in it", "source": "word that contains letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_475", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line beginning with the word abc", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3009", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that starts with the word  abc ", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3710", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word abc", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3493", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with the word abc and also starts with the word abc", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_937", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with a character after 123", "source": "line that ends with character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))))", "qid": "regex_train_1911", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with vowel after the number  123 ", "source": "line that ends with vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_test_32", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ends with a letter after 123", "source": "line that ends with letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_1080", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that concludes with a vowel following the number 123", "source": "line that ends with vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_105", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with lowercase letter after the number  123 ", "source": "line that ends with lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_5653", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with letter after the number  123 ", "source": "line that ends with letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_6250", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a capiral after the number 123", "source": "line that ends with capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_5033", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with 123 followed by a lowercase letter", "source": "line that ends with lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_663", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "the ending of the line needs to be 123123", "source": "line that ends with `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))))", "qid": "regex_train_5050", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  abc  after the number  123 ", "source": "line that ends with `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc))))", "qid": "regex_train_2505", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that contains the word  abc  or the number  123 ", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5563", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line contains the word abc or the number 123", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_6325", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes the word abc or the number 123", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_450", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have either 123 or abc anywhere in them", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4027", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that have abc or 123", "source": "line that contains the word `` abc '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_945", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines which include the word abc and end in a lowercase letter", "source": "line that ends with lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6168", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with a capital letter and uses the word abc", "source": "line that ends with capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_210", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  abc  and that contains the word  abc ", "source": "line that ends with `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1494", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc", "source": "line that starts with `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5784", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starts with a capital letter but has abc", "source": "line that starts with capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6240", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter but also contains abc", "source": "line that starts with capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3478", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains the word  abc ", "source": "line that ends with capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5167", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line must have the characters abc within it and end with the numerals 123", "source": "line that ends with `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2676", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the segment abc and ends with 123", "source": "line that ends with `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1395", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with 123 and incorporates the word abc", "source": "line that starts with `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_818", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains character", "source": "line that contains the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1509", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains both the word abc and a capital letter", "source": "line that contains the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4548", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has both lowercase letters and the short word abc", "source": "line that contains the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1270", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and a letter", "source": "line that contains the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_381", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing abc", "source": "line that contains the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_952", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains letter", "source": "line that contains the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1177", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "linte that has the word abc and a capital letter", "source": "line that contains the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_859", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that include a lowercase letter and the word abc", "source": "line that contains the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_train_6192", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc and 123", "source": "line that contains the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3336", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that uses abc in it", "source": "line that contains the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4788", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
