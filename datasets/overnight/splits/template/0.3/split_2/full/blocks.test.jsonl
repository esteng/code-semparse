{"paraphrased": "what is the block above that has its length as 3 inches", "source": "block that is above block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_540", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is to the right of the 3 inch wide block", "source": "block that is right of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_741", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks right of 3 inch high blocks", "source": "block that is right of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_621", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is left of block whose length is 3 inches", "source": "block that is left of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1466", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block above a block which is 3 inches wide", "source": "block that is above block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_271", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is below the 3 inch wide block", "source": "block that is below block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks left of 3 inch tall blocks", "source": "block that is left of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_585", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the lower block that is 3 inches tall", "source": "block that is below block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_758", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is below block whose height is 3 inches", "source": "block that is below block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_157", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "3 inch long block below block", "source": "block that is below block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_test_29", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block that block 1 is below", "source": "block that block that block 1 is below is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_361", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below and right of block 1", "source": "block that block that block 1 is left of is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1043", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that block 1 is left and above", "source": "block that block that block 1 is left of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_821", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks which block 1 is right and left of", "source": "block that block that block 1 is right of is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_791", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of and below block 1", "source": "block that block that block 1 is right of is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "left and below of block 1", "source": "block that block that block 1 is right of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1394", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block on the right side of the block on the right side of block 1", "source": "block that block that block 1 is right of is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_198", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that block 1 is above and below", "source": "block that block that block 1 is above is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1254", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the left and below block 1", "source": "block that block that block 1 is left of is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_739", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the block below and left of block 1", "source": "block that block that block 1 is above is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_747", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "3 inches long block to the left of block 1", "source": "block whose length is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1553", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch tall blocks that block 1 is right of", "source": "block whose height is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1443", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch tall blocks that block 1 is above", "source": "block whose height is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1022", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block whose height is 3 inches", "source": "block whose height is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_946", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch tall block at the left of block 1", "source": "block whose height is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1297", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block to right of block 1", "source": "block whose length is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_681", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inches wide block below block 1", "source": "block whose width is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_33", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "look right of block 1 and find 3 inch block", "source": "block whose length is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block with 3 inches of width", "source": "block whose width is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_200", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block  has a height of 3 inches and that block 1 is above", "source": "block whose height is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_151", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block with the least colors", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_train_1054", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which is the least colorful block", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_test_331", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what block has the least number of colors", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_test_305", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "choose the most shapeless block", "source": "block that has the least number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string shape)))", "qid": "blocks_train_1396", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which brick has the most colors", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_train_257", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find the block with the most shapes", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_812", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "select the block with the most shapes", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_59", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which type of block has the most shapes", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_1235", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "select the brick with the least number of shapes", "source": "block that has the least number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string shape)))", "qid": "blocks_test_74", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find the block with the most colors", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_train_1521", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what block is shorter than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1588", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "choose a 3 inch tall brick", "source": "block whose height is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_967", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find blocks wider than 3 inches", "source": "block whose width is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_91", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is less than 3 inches wide", "source": "block whose width is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find a block with a height no more than 3 inches", "source": "block whose height is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1331", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose width is smaller than 3 inches", "source": "block whose width is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1505", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is no wider than 3 inches", "source": "block whose width is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is wider than 3 inches", "source": "block whose width is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_391", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is longer than 3 inches", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1438", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose height is smaller than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "pyramid left of block 1", "source": "block whose shape is a pyramid and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "qid": "blocks_test_148", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is in the shape of a pyramid and to the right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_train_977", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is on top of block 1", "source": "block that is above block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_185", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the left of block 1 whose shape is that of a pyramid", "source": "block that is left of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_353", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below of which is above block 1", "source": "block that is below block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_631", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the right of block 1 whose shape is also a pyramid", "source": "block that is right of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_374", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has the shape of a pyramid and is to the left of block 1", "source": "block whose shape is a pyramid and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "qid": "blocks_train_439", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramidshaped blocks are below block 1", "source": "block that is below block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_210", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks right and below block 1", "source": "block that is right of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_58", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "locate the pyramidshaped block", "source": "block whose shape is a pyramid and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_604", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is above block 1 or 2", "source": "block that is above block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_129", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "select all bricks right of block 1 or 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_379", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block that is left of block 1 or block 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1572", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me a pyramid or cube shaped block", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_1148", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "is there a block piled on top of either block 1 or block 2", "source": "block that is above block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1526", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "choose a block that is shape like a cube or pyramid", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_676", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which blocks are right of blocks 1 or 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_543", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of block 1 or 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_512", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "choose the brick shaped like a pyramid or a cube", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_745", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find the block that is shaped like a pyramid or a cube", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_652", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks with 2 shapes", "source": "block that has two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (number 2)))", "qid": "blocks_train_1480", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block thats less than block 2", "source": "block that has less than two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string <) (number 2)))", "qid": "blocks_test_63", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "blocks of two or more colors", "source": "block that has at least two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string >=) (number 2)))", "qid": "blocks_train_292", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "choose a block that is not more than 2 shapes", "source": "block that has at most two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string <=) (number 2)))", "qid": "blocks_train_1019", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block with more than 2 shapes", "source": "block that has more than two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string >) (number 2)))", "qid": "blocks_test_115", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select a block with less than two colors", "source": "block that has less than two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <) (number 2)))", "qid": "blocks_train_269", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block with maximum two colors", "source": "block that has at most two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "qid": "blocks_train_1119", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks with 2 colors", "source": "block that has two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (number 2)))", "qid": "blocks_train_879", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick has no more than 2 colors", "source": "block that has at most two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "qid": "blocks_train_488", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "blocks of more than two colours", "source": "block that has more than two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string >) (number 2)))", "qid": "blocks_train_864", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 or 6 inch wide blocks", "source": "block whose width is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_20", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "block with height of either 3 inches or 6 inches", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_307", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "is there any block with a height of either 3 or 6 inches", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_test_0", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "is there a block with a width equal to either 3 or 6 inches", "source": "block whose width is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_242", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "block whose length is 3 inches or 6 inches", "source": "block whose length is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_225", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "any block with width of either 3 inches or 6 inches", "source": "block whose width is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "block whose height is 3 inches or 6 inches", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_1283", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "which block has a width of either 3 or 6 inches", "source": "block whose width is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_641", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "choose every block measuring 3 or 6 inches", "source": "block whose length is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_1050", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "find me a block that is either 3 or 6 inches tall", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_220", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "select the block above block 1", "source": "block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is above", "source": "block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_350", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above block 1", "source": "block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_367", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_185", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is not below", "source": "block that block 1 not is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string !=) en.block.block1))", "qid": "blocks_train_435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is not to the left of", "source": "block that block 1 not is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string !=) en.block.block1))", "qid": "blocks_train_1454", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select a block that is not below block 1", "source": "block that block 1 not is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string !=) en.block.block1))", "qid": "blocks_test_161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is block 1 to the right of", "source": "block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block not to the left of block 1", "source": "block that block 1 not is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string !=) en.block.block1))", "qid": "blocks_train_1173", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block not below block 1", "source": "block that block 1 not is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string !=) en.block.block1))", "qid": "blocks_train_1462", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block between 3 or 6 inches", "source": "3 inches or 6 inches", "target": "(call listValue (call concat (number 3 en.inch) (number 6 en.inch)))", "qid": "blocks_train_839", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "what brick is at least 3 or 6 inches", "source": "3 inches or 6 inches", "target": "(call listValue (call concat (number 3 en.inch) (number 6 en.inch)))", "qid": "blocks_train_406", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "is there a block with a measurement of 3 inches or 6 inches", "source": "3 inches or 6 inches", "target": "(call listValue (call concat (number 3 en.inch) (number 6 en.inch)))", "qid": "blocks_train_342", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "select a pyramid or cube shaped block", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_test_187", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "choose a pyramid or a cube", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_test_60", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find a block shaped like a pyramid or a cube", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_test_138", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "choose brick 1 or brick 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_132", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find me either block 1 or block 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_444", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "is it a pyramid or a cube", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_train_771", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "either block 1 or 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_405", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "a pyramid or a cube", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_train_1476", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "locate block one or block 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_22", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "select block 1 or 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_787", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "select a special pyramid block", "source": "block whose shape is a pyramid and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "qid": "blocks_train_941", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "choose the block below the special looking block 1", "source": "block that is below block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1547", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me all the special pyramid blocks", "source": "block whose shape is a pyramid and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "qid": "blocks_train_1563", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find all special blocks to the right of block 1 ", "source": "block that is right of block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1207", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "choose the special block to the left of block 1", "source": "block that is left of block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_463", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "select the special block right to block 1", "source": "block that is right of block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "qid": "blocks_test_363", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "a special block below block 1", "source": "block that is below block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string is_special)))", "qid": "blocks_test_355", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what special block is at the right of block 1", "source": "block that is right of block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "qid": "blocks_test_71", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me the special blocks below block 1", "source": "block that is below block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1497", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me a special pyramidshaped block", "source": "block whose shape is a pyramid and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "qid": "blocks_train_327", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me all the blocks with more than 2 blocks below it", "source": "block that more than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_99", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has two blocks or less below it", "source": "block that at most two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_605", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a brick that has more than 2 blocks to its left", "source": "block that more than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_388", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is above more than two blocks", "source": "block that more than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1150", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block with two blocks to the left of it", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_593", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks with less than 2 blocks above it", "source": "block that less than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_237", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with more than 2 blocks to the left of it", "source": "block that more than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_35", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has two bricks to its right", "source": "block that two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_304", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that more than two block is right of", "source": "block that more than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_83", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block that is below at most two blocks", "source": "block that at most two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_387", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
