{"paraphrased": "what restaurant is in the least number of neighborhoods", "source": "restaurant that has the least number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string neighborhood)))", "qid": "restaurants_train_77", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "restaurant that has the least number of neighborhood", "source": "restaurant that has the least number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string neighborhood)))", "qid": "restaurants_train_271", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which restaurant offers the most variety of cuisine", "source": "restaurant that has the most number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string max) (string cuisine)))", "qid": "restaurants_train_145", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what restaurant has the smallest number of cuisines", "source": "restaurant that has the least number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string cuisine)))", "qid": "restaurants_train_413", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "restaurants that is in the least numbers of neighborhoods", "source": "restaurant that has the least number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string neighborhood)))", "qid": "restaurants_train_499", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "restaurant that has the most number of neighborhood", "source": "restaurant that has the most number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string max) (string neighborhood)))", "qid": "restaurants_train_130", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "restaurant that has the most number of cuisine", "source": "restaurant that has the most number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string max) (string cuisine)))", "qid": "restaurants_train_546", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "restaurants with multiple cuisines", "source": "restaurant that has the most number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string max) (string cuisine)))", "qid": "restaurants_train_932", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which neighborhoods have the fewest restaurants", "source": "restaurant that has the least number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string neighborhood)))", "qid": "restaurants_train_890", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "retaurant with less number of neighbourhood", "source": "restaurant that has the least number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string neighborhood)))", "qid": "restaurants_train_162", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which resturants have a star rating smaller than 3 stars", "source": "restaurant whose star rating is smaller than 3 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <) (call ensureNumericEntity (number 3 en.star))))", "qid": "restaurants_train_169", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "at least 3 star restaurants", "source": "restaurant whose star rating is at least 3 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string >=) (call ensureNumericEntity (number 3 en.star))))", "qid": "restaurants_train_379", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "restaurants at least with a 2 dollar price rating", "source": "restaurant whose price rating is at least 2 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string >=) (call ensureNumericEntity (number 2 en.dollar_sign))))", "qid": "restaurants_train_691", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what restaurant has 2 or greater dollar signs as its price rating", "source": "restaurant whose price rating is at least 2 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string >=) (call ensureNumericEntity (number 2 en.dollar_sign))))", "qid": "restaurants_train_472", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "list all restaurants that are more expensive than 2 dollar signs", "source": "restaurant whose price rating is larger than 2 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string >) (call ensureNumericEntity (number 2 en.dollar_sign))))", "qid": "restaurants_train_139", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find a restaurant with less than 3 stars", "source": "restaurant whose star rating is smaller than 3 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <) (call ensureNumericEntity (number 3 en.star))))", "qid": "restaurants_test_247", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what are some restaurants rated 3 dollar signs or less", "source": "restaurant whose star rating is at most 3 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <=) (call ensureNumericEntity (number 3 en.star))))", "qid": "restaurants_train_102", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "list all restaurants that are at least 3 stars", "source": "restaurant whose star rating is at most 3 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <=) (call ensureNumericEntity (number 3 en.star))))", "qid": "restaurants_train_96", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "a restaurant that has a 4 star or higher rating", "source": "restaurant whose star rating is larger than 3 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string >) (call ensureNumericEntity (number 3 en.star))))", "qid": "restaurants_train_150", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "restaurants with dollar ratings less than 2", "source": "restaurant whose price rating is smaller than 2 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string <) (call ensureNumericEntity (number 2 en.dollar_sign))))", "qid": "restaurants_train_1121", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "restaurant which offer lunch and has a three star rating", "source": "restaurant whose star rating is 3 stars and that serves lunch", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string meals) (string =) en.food.lunch))", "qid": "restaurants_train_1030", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which restaurants in midtown west have a 2dollarsigns price rating", "source": "restaurant whose price rating is 2 dollar signs and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "restaurants_test_159", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what 2 dollar signs restaurants are in the neighbor of midtown west", "source": "restaurant whose price rating is 2 dollar signs and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "restaurants_train_587", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "restaurants serving lunch with price rating of 2 dollar signs", "source": "restaurant whose price rating is 2 dollar signs and that serves lunch", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string meals) (string =) en.food.lunch))", "qid": "restaurants_test_205", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "thai restaurants rated 3 stars", "source": "restaurant whose star rating is 3 stars and whose cuisine is thai", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string cuisine) (string =) en.cuisine.thai))", "qid": "restaurants_train_29", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "restaurant whose price rating is 2 dollar signs and that serves lunch", "source": "restaurant whose price rating is 2 dollar signs and that serves lunch", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string meals) (string =) en.food.lunch))", "qid": "restaurants_test_259", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "restaurant whose star rating is 3 stars and whose cuisine is thai", "source": "restaurant whose star rating is 3 stars and whose cuisine is thai", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string cuisine) (string =) en.cuisine.thai))", "qid": "restaurants_train_971", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "restaurant open for lunch and has a 3 star raing", "source": "restaurant whose star rating is 3 stars and that serves lunch", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string meals) (string =) en.food.lunch))", "qid": "restaurants_test_208", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a restaurant rated 2 dollar signs for lunch", "source": "restaurant whose price rating is 2 dollar signs and that serves lunch", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string meals) (string =) en.food.lunch))", "qid": "restaurants_train_248", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what restaurant has 3 stars and serves lunch", "source": "restaurant whose star rating is 3 stars and that serves lunch", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string meals) (string =) en.food.lunch))", "qid": "restaurants_train_361", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "restaurant in the midtown west area", "source": "restaurant whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "restaurants_train_1224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a restaurant that does not offer  thai food", "source": "restaurant whose cuisine is not thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string !=) en.cuisine.thai))", "qid": "restaurants_train_189", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what are some restaurants serving any cuisine except thai", "source": "restaurant whose cuisine is not thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string !=) en.cuisine.thai))", "qid": "restaurants_train_666", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a thai restaurant", "source": "restaurant whose cuisine is thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai))", "qid": "restaurants_train_1312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a restaurant that does not serve thai", "source": "restaurant whose cuisine is not thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string !=) en.cuisine.thai))", "qid": "restaurants_train_728", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a thai restaurant", "source": "restaurant whose cuisine is thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai))", "qid": "restaurants_train_351", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "restaurants located in midtown west", "source": "restaurant whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "restaurants_train_380", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the restaurant that does not serve lunch", "source": "restaurant that not serves lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string !=) en.food.lunch))", "qid": "restaurants_train_561", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "thai restaurants", "source": "restaurant whose cuisine is thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai))", "qid": "restaurants_test_291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which restaurant is not located in midtown west", "source": "restaurant whose neighborhood is not midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string !=) en.neighborhood.midtown_west))", "qid": "restaurants_train_841", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "thai cafe or pizzeria juno", "source": "thai cafe or pizzeria juno", "target": "(call listValue (call concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno))", "qid": "restaurants_train_598", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "what restaurants serve lunch or dinner", "source": "lunch or dinner", "target": "(call listValue (call concat en.food.lunch en.food.dinner))", "qid": "restaurants_test_214", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "restaurants called thai cafe or pizzeria juno", "source": "thai cafe or pizzeria juno", "target": "(call listValue (call concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno))", "qid": "restaurants_train_391", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "what restaurant has lunch or dinner", "source": "lunch or dinner", "target": "(call listValue (call concat en.food.lunch en.food.dinner))", "qid": "restaurants_test_326", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "chelsea or midtown west", "source": "midtown west or chelsea", "target": "(call listValue (call concat en.neighborhood.midtown_west en.neighborhood.chelsea))", "qid": "restaurants_train_529", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "a restaurant for lunch or dinner", "source": "lunch or dinner", "target": "(call listValue (call concat en.food.lunch en.food.dinner))", "qid": "restaurants_train_1243", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "where is the thai cafe and the pizzeria juno", "source": "thai cafe or pizzeria juno", "target": "(call listValue (call concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno))", "qid": "restaurants_test_321", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "italian or thai", "source": "thai or italian", "target": "(call listValue (call concat en.cuisine.thai en.cuisine.italian))", "qid": "restaurants_train_594", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "restaurants serving thai or italian food", "source": "thai or italian", "target": "(call listValue (call concat en.cuisine.thai en.cuisine.italian))", "qid": "restaurants_test_290", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "list all restaurants in the neighborhood of midtown west or chelsea", "source": "midtown west or chelsea", "target": "(call listValue (call concat en.neighborhood.midtown_west en.neighborhood.chelsea))", "qid": "restaurants_train_1197", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "what restaurant can be found in only two neighborhoods", "source": "restaurant that has at most two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string <=) (number 2)))", "qid": "restaurants_train_613", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what restaurant is in two neighborhoods", "source": "restaurant that has two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) (number 2)))", "qid": "restaurants_train_528", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name a restaurant serving more than two types of cuisine", "source": "restaurant that has more than two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string >) (number 2)))", "qid": "restaurants_train_1162", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurants with no more than two cuisines", "source": "restaurant that has at most two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string <=) (number 2)))", "qid": "restaurants_train_977", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name a restaurant found in at least two neighborhoods", "source": "restaurant that has at least two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string >=) (number 2)))", "qid": "restaurants_train_424", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurant that has two cuisine", "source": "restaurant that has two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) (number 2)))", "qid": "restaurants_test_170", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurant that has two cuisines", "source": "restaurant that has more than two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string >) (number 2)))", "qid": "restaurants_train_901", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurants found in less than two neighborhoods", "source": "restaurant that has less than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string <) (number 2)))", "qid": "restaurants_train_770", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what restaurant has more than two cuisines", "source": "restaurant that has at least two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string >=) (number 2)))", "qid": "restaurants_train_232", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurant with two locations", "source": "restaurant that has at most two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string <=) (number 2)))", "qid": "restaurants_train_1061", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a 3 star restaurant with waiter service", "source": "restaurant that has waiter service and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string waiter)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_train_72", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what 2 dollar price rating restaurant takes credit cards", "source": "restaurant that takes credit cards and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_1217", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurant that has delivery and whose star rating is 3 stars", "source": "restaurant that has delivery and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string delivery)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_train_1267", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "three star restaurants that take credit cards", "source": "restaurant that takes credit cards and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_train_510", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "the restaurant with take out food is fairly inexpensive", "source": "restaurant that has take-out and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string takeout)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_test_157", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what good kids restaurant has a 2 dollar price rating", "source": "restaurant that is good for kids and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string kids)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_1129", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which hotel has a price rating of 2 dollar signs and  waiter service facilities", "source": "restaurant that has waiter service and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string waiter)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_test_237", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurant whose price rating is 2 dollar signs and also accept credit cards", "source": "restaurant that takes credit cards and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_100", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which 3 star restaurants have outdoor dining areas", "source": "restaurant that has outdoor seating and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string outdoor)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_test_102", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurants with a 2 dollar sign rating that take credit cards", "source": "restaurant that takes credit cards and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_1110", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is a meal that a restaurant that is open for lunch serves", "source": "meal that restaurant that serves lunch serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch)))", "qid": "restaurants_train_705", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "thai cuisine restaurant", "source": "cuisine that is cuisine of restaurant whose cuisine is thai", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai)))", "qid": "restaurants_train_373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "neighborhood that is neighborhood of restaurant that serves lunch", "source": "neighborhood that is neighborhood of restaurant that serves lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch)))", "qid": "restaurants_train_1057", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what kind of cuisine is found at the restaurants that serve lunch", "source": "cuisine that is cuisine of restaurant that serves lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch)))", "qid": "restaurants_train_742", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is a meal served by a restaurant in midtown west", "source": "meal that restaurant whose neighborhood is midtown west serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))", "qid": "restaurants_train_752", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what neighborhood are the restaurants that are in midtown west", "source": "neighborhood that is neighborhood of restaurant whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))", "qid": "restaurants_train_1029", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what kind of meals are served in the restaurants in midtown west", "source": "meal that restaurant whose neighborhood is midtown west serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))", "qid": "restaurants_train_683", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the neighborhood of the thai restaurant", "source": "neighborhood that is neighborhood of restaurant whose cuisine is thai", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai)))", "qid": "restaurants_train_577", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "restaurants that are in the neighborhood of midtown west", "source": "neighborhood that is neighborhood of restaurant whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west)))", "qid": "restaurants_train_1181", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what neighborhood is the thai restaurant in", "source": "neighborhood that is neighborhood of restaurant whose cuisine is thai", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai)))", "qid": "restaurants_test_207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 dollar signs or 3 dollar signs", "source": "2 dollar signs or 3 dollar signs", "target": "(call listValue (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))", "qid": "restaurants_test_78", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "what is better a 3 or a 5 star rating", "source": "3 stars or 5 stars", "target": "(call listValue (call concat (number 3 en.star) (number 5 en.star)))", "qid": "restaurants_train_165", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "find 3 star or 5 star restaurant", "source": "3 stars or 5 stars", "target": "(call listValue (call concat (number 3 en.star) (number 5 en.star)))", "qid": "restaurants_train_411", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "restaurants with a 2 or 3 dollar sign price rating", "source": "2 dollar signs or 3 dollar signs", "target": "(call listValue (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))", "qid": "restaurants_train_946", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "5 stars or 3 stars", "source": "3 stars or 5 stars", "target": "(call listValue (call concat (number 3 en.star) (number 5 en.star)))", "qid": "restaurants_train_223", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "restaurants with at least 30 or 40 reviews", "source": "30 reviews or 40 reviews", "target": "(call listValue (call concat (number 30 en.review) (number 40 en.review)))", "qid": "restaurants_train_509", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "restaurants that have between 30 and 40 reviews", "source": "30 reviews or 40 reviews", "target": "(call listValue (call concat (number 30 en.review) (number 40 en.review)))", "qid": "restaurants_train_976", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "restaurants rated 2 or 3 dollar signs", "source": "2 dollar signs or 3 dollar signs", "target": "(call listValue (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))", "qid": "restaurants_test_171", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "restaurants rated with 3 to 5 stars", "source": "3 stars or 5 stars", "target": "(call listValue (call concat (number 3 en.star) (number 5 en.star)))", "qid": "restaurants_train_449", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "list all restaurants that have a price rating of 2 dollar signs or 3 star dollar signs", "source": "2 dollar signs or 3 dollar signs", "target": "(call listValue (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))", "qid": "restaurants_test_36", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "restaurants with price ratings less than 2 dollar signs", "source": "restaurant whose price rating is smaller than 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string <) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_train_153", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurants rated less than 5 stars", "source": "restaurant whose star rating is smaller than 3 stars or 5 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <) (call ensureNumericEntity (call concat (number 3 en.star) (number 5 en.star)))))", "qid": "restaurants_test_240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "list all restaurants with 3 or 5 star ratings", "source": "restaurant whose star rating is at least 3 stars or 5 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string >=) (call ensureNumericEntity (call concat (number 3 en.star) (number 5 en.star)))))", "qid": "restaurants_train_42", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurants with a price rating higher than 3 dollar signs", "source": "restaurant whose price rating is larger than 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string >) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_train_50", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which restaurants have a price rating of 2 to3 dollar signs", "source": "restaurant whose price rating is at least 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string >=) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_train_409", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurants that are at most 2 or 3 dollar price ratings", "source": "restaurant whose price rating is at most 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string <=) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_test_242", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what restaurant has less than 5 stars", "source": "restaurant whose star rating is smaller than 3 stars or 5 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <) (call ensureNumericEntity (call concat (number 3 en.star) (number 5 en.star)))))", "qid": "restaurants_train_556", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurant whose star rating is smaller than 3 stars or 5 stars", "source": "restaurant whose star rating is smaller than 3 stars or 5 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <) (call ensureNumericEntity (call concat (number 3 en.star) (number 5 en.star)))))", "qid": "restaurants_train_1204", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurants with price rating above 3 dollar signs", "source": "restaurant whose price rating is larger than 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string >) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_train_277", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurant whose star rating is at least 3 stars or 5 stars", "source": "restaurant whose star rating is at least 3 stars or 5 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string >=) (call ensureNumericEntity (call concat (number 3 en.star) (number 5 en.star)))))", "qid": "restaurants_train_255", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "neighborhoods with more than 2 restauraunts", "source": "neighborhood that is neighborhood of more than two restaurant", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_840", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what cuisine is shown in only two restaurants", "source": "cuisine that is cuisine of at most two restaurant", "target": "(call listValue (call countComparative (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string <=) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_668", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what restaurants offer more than two cuisines", "source": "cuisine that is cuisine of more than two restaurant", "target": "(call listValue (call countComparative (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string >) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_1226", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what neighborhood has fewer than two restaurants", "source": "neighborhood that is neighborhood of less than two restaurant", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_237", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "neighborhood that is neighborhood of at least two restaurant", "source": "neighborhood that is neighborhood of at least two restaurant", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >=) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_1290", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "restaurants that are near two neighborhoods", "source": "neighborhood that is neighborhood of at most two restaurant", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <=) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_768", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what kind of cuisine has at least two restaurants", "source": "cuisine that is cuisine of two restaurant", "target": "(call listValue (call countComparative (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_995", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which neighborhoods have more than two restaurants", "source": "neighborhood that is neighborhood of more than two restaurant", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_1143", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a meal served by no more than two restaurants", "source": "meal that at most two restaurant serves", "target": "(call listValue (call countComparative (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string <=) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_324", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what neighborhood contains two restaurants", "source": "neighborhood that is neighborhood of two restaurant", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (number 2) (call getProperty (call singleton en.restaurant) (string !type))))", "qid": "restaurants_train_241", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
