{"paraphrased": "articles that city multivariate data analysis articles", "source": "article that cites article that multivariate data analysis cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_test_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "articles published in the same venue as multivariate data analysis", "source": "article whose venue is venue that is venue of multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) (call filter (call getProperty (call singleton en.venue) (string !type)) (call reverse (string venue)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_301", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "article that cites article that multivariate data analysis cites", "source": "article that cites article that multivariate data analysis cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_457", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "article by the same author of multivariate data analysis", "source": "article whose author is person that is author of multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "article whose venue is venue that is venue of multivariate data analysis", "source": "article whose venue is venue that is venue of multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) (call filter (call getProperty (call singleton en.venue) (string !type)) (call reverse (string venue)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_415", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "article that cites multivariate data analysis", "source": "article that cites article that multivariate data analysis cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_277", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "name an article about multivariate data analysis", "source": "article that cites article that multivariate data analysis cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what article has the same venue as multivariate data analysis", "source": "article whose venue is venue that is venue of multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) (call filter (call getProperty (call singleton en.venue) (string !type)) (call reverse (string venue)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_616", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "articles citing articles cited by multivariate data analysis", "source": "article that cites article that multivariate data analysis cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_55", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "articles citing articles cited in multivariate data analysis", "source": "article that cites article that multivariate data analysis cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_104", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what award winning article was cited by multivariate data analysis", "source": "article that multivariate data analysis cites and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string won_award)))", "qid": "publications_train_86", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "award winning article cited bymultivariate data analysis", "source": "article that multivariate data analysis cites and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string won_award)))", "qid": "publications_train_410", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "articles cited by multivariate data analysis and that won awards", "source": "article that multivariate data analysis cites and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string won_award)))", "qid": "publications_train_609", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "articles cited by multivariate data analysis that won awards", "source": "article that multivariate data analysis cites and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string won_award)))", "qid": "publications_train_257", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "articles on multivariate data analysis that won an award", "source": "article that multivariate data analysis cites and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string won_award)))", "qid": "publications_test_146", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "name an article about multivariate data analysis that has won an award", "source": "article that multivariate data analysis cites and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string won_award)))", "qid": "publications_train_409", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "awardwinning articles cited in multivariate data analysis", "source": "article that multivariate data analysis cites and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (string won_award)))", "qid": "publications_train_454", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "article that cites two or more articles", "source": "article that cites at least two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string >=) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_112", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which articles cite two articles", "source": "article that cites two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_test_135", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which articles cite less than two articles", "source": "article that cites less than two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string <) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_29", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "article citing more than two articles", "source": "article that cites more than two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string >) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_190", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "this article cites 2 other articles", "source": "article that cites two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_209", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what article has less than two citations", "source": "article that cites less than two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string <) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_test_62", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what article has two citations", "source": "article that cites two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_203", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "article that refernces a single article", "source": "article that cites at least two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string >=) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_606", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "articles that mention three or more cities", "source": "article that cites more than two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string >) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_438", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "articles that cities maximum two articles", "source": "article that cites at most two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string <=) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_352", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "articles that cite multivariate data analysis in annals of statistics", "source": "article that cites multivariate data analysis and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_train_573", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article by efron", "source": "article whose author is efron and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string author) (string =) en.person.efron))", "qid": "publications_train_332", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles found in annals of statistics", "source": "article whose venue is annals of statistics and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_test_24", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "efron articles citing multivariate data analysis", "source": "article whose author is efron and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_test_127", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles written by efron citing multivariate data analysis", "source": "article that cites multivariate data analysis and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string author) (string =) en.person.efron))", "qid": "publications_train_442", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article that cited multivariate data analysis in annals of statistics", "source": "article whose venue is annals of statistics and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_261", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles about a citys annals of statistics", "source": "article that cites multivariate data analysis and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_test_54", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "an article on statistics that cites multivariate data analysis", "source": "article that cites multivariate data analysis and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_train_521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article that cites the multivariate data analysis article", "source": "article that cites multivariate data analysis and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_test_51", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles that cite multivariate data analysis", "source": "article that cites multivariate data analysis and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_634", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles written by efron that have won an award", "source": "article that won an award and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string author) (string =) en.person.efron))", "qid": "publications_train_128", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "award winning article that cites multivariate data analysis", "source": "article that won an award and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_test_110", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which article won an award and has its venue as annals of statistics", "source": "article that won an award and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_test_157", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles that won an award published in annals of statistics", "source": "article that won an award and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_train_520", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "awardwinning article by efron", "source": "article that won an award and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string author) (string =) en.person.efron))", "qid": "publications_train_487", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article written by efron that won an award", "source": "article that won an award and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string author) (string =) en.person.efron))", "qid": "publications_test_11", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what article won an award and is about annals of statistics", "source": "article that won an award and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_train_319", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what article written by efron won an award", "source": "article that won an award and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string author) (string =) en.person.efron))", "qid": "publications_test_37", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what award winning article was written by efron", "source": "article that won an award and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string author) (string =) en.person.efron))", "qid": "publications_train_353", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what award winning article has annals of statistics as a venue", "source": "article that won an award and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_train_504", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name an article found in at least two publications", "source": "article that has at least two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string >=) (number 2)))", "qid": "publications_train_512", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "articles found in less than two publications", "source": "article that has less than two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string <) (number 2)))", "qid": "publications_train_18", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what article has over two venues", "source": "article that has more than two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "qid": "publications_test_85", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what articles have under two authors", "source": "article that has less than two author", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string author) (string <) (number 2)))", "qid": "publications_train_170", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "articles with two or more authors", "source": "article that has at least two author", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string author) (string >=) (number 2)))", "qid": "publications_test_159", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "article with more than two venue", "source": "article that has more than two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "qid": "publications_train_413", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find an article with no more than two authors", "source": "article that has at most two author", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string author) (string <=) (number 2)))", "qid": "publications_train_518", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what article has two authors or less", "source": "article that has at most two author", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string author) (string <=) (number 2)))", "qid": "publications_train_432", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "articles about more than two venues", "source": "article that has more than two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "qid": "publications_test_152", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name an article found in two publications", "source": "article that has two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) (number 2)))", "qid": "publications_train_551", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "article with the maximum number of venues", "source": "article that has the most number of venue", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string max) (string venue)))", "qid": "publications_train_164", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "articles with the least number of authors", "source": "article that has the least number of author", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string min) (string author)))", "qid": "publications_test_115", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what article has the least authors", "source": "article that has the least number of author", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string min) (string author)))", "qid": "publications_train_398", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what article has the most venues", "source": "article that has the most number of venue", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string max) (string venue)))", "qid": "publications_train_326", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "article with the largest amount of authors", "source": "article that has the most number of author", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string max) (string author)))", "qid": "publications_train_0", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what article has the least venues", "source": "article that has the least number of venue", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string min) (string venue)))", "qid": "publications_train_513", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what article has the most authors", "source": "article that has the most number of author", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string max) (string author)))", "qid": "publications_train_73", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what article has the fewest authors", "source": "article that has the most number of author", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string max) (string author)))", "qid": "publications_test_86", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which article was written by minimum number of authors", "source": "article that has the least number of author", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string min) (string author)))", "qid": "publications_train_417", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "article with the fewest authors", "source": "article that has the least number of author", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string min) (string author)))", "qid": "publications_train_328", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what award winning article was in annals of statistics", "source": "article whose venue is annals of statistics and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string won_award)))", "qid": "publications_train_591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "award winning article published by efron", "source": "article whose author is efron and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string won_award)))", "qid": "publications_train_266", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "article whose venue is annals of statistics and that won an award", "source": "article whose venue is annals of statistics and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string won_award)))", "qid": "publications_train_623", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what article is written by efron and won an award", "source": "article whose author is efron and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string won_award)))", "qid": "publications_train_153", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "award winning article published by annals of statistics", "source": "article whose venue is annals of statistics and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string won_award)))", "qid": "publications_train_41", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what efron article has won an award", "source": "article whose author is efron and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string won_award)))", "qid": "publications_train_176", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "awardwinning articles by efron", "source": "article whose author is efron and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string won_award)))", "qid": "publications_test_104", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "articles that won an award written by efron", "source": "article whose author is efron and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron) (string won_award)))", "qid": "publications_train_534", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "article that mentions award winning multivariate data analysis article", "source": "article that cites multivariate data analysis and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis) (string won_award)))", "qid": "publications_train_280", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what article won an award and whose venue is annals and statistics", "source": "article whose venue is annals of statistics and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics) (string won_award)))", "qid": "publications_test_94", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "name an article published in 2004", "source": "article that article whose publication date is 2004 cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_117", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what author published an article in 2004", "source": "person that is author of article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_351", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "publications that include articles published in 2004", "source": "venue that is venue of article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.venue) (string !type)) (call reverse (string venue)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_541", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what is the venue of the article published in 2004", "source": "venue that is venue of article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.venue) (string !type)) (call reverse (string venue)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "articles published in 2004 citations", "source": "article that article whose publication date is 2004 cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_113", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "name an article not published in 2004", "source": "article that article whose publication date is 2004 cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "article cited by article which is published in 2004", "source": "article that article whose publication date is 2004 cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_327", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "authors who published their works in 2004", "source": "person that is author of article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_589", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "name an author whose publication date is 2004", "source": "person that is author of article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_test_71", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "articles about cities published after 2004", "source": "article that article whose publication date is 2004 cites", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_test_92", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what article won an award and has a publication date of 2004", "source": "article that won an award and whose publication date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string publication_date) (string =) (date 2004 -1 -1)))", "qid": "publications_train_468", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "articles publised in 2004 that won an award", "source": "article that won an award and whose publication date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string publication_date) (string =) (date 2004 -1 -1)))", "qid": "publications_train_630", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "articles published in 2004 that have won an award", "source": "article that won an award and whose publication date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string publication_date) (string =) (date 2004 -1 -1)))", "qid": "publications_train_108", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "articles published in 2004 and cited by multivariate data analysis", "source": "article whose publication date is 2004 and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_434", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article whose publication date is 2004 and cited by multivariate data analysis", "source": "article whose publication date is 2004 and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_98", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what 2004 article was cited by multivariate data analysis", "source": "article whose publication date is 2004 and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_639", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles published in 2004 cited in multivariate data analysis", "source": "article whose publication date is 2004 and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_test_88", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles published in 2004 cited by multivariate data analysis", "source": "article whose publication date is 2004 and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_107", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which article  that cites multivariate data analysis was published on 2004 ", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_575", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles published in 2004 citing multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_401", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which article was published in 2004 at annals of statistics", "source": "article whose publication date is 2004 and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_train_244", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what article from 2004 cites multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_2", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article whose publication date is 2004 and whose author is efron", "source": "article whose publication date is 2004 and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string author) (string =) en.person.efron))", "qid": "publications_train_480", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles written by efron published in 2004", "source": "article whose publication date is 2004 and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string author) (string =) en.person.efron))", "qid": "publications_train_526", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name an article published in 2004 about multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_424", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "efron articles published in 2004", "source": "article whose publication date is 2004 and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string author) (string =) en.person.efron))", "qid": "publications_test_21", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles published in 2004 and citing multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_553", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article published in 2004 and that cites multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_264", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "award winning articles published in 2004", "source": "article whose publication date is 2004 and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string won_award)))", "qid": "publications_train_407", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what article has a publication date of 2003 and won an award", "source": "article whose publication date is 2004 and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string won_award)))", "qid": "publications_train_439", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "articles published in 2004 that won awards", "source": "article whose publication date is 2004 and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string won_award)))", "qid": "publications_train_90", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
