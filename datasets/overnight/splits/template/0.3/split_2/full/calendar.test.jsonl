{"paraphrased": "people that attend meetings at greenberg cafe", "source": "person that is attendee of meeting whose location is greenberg cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe)))", "qid": "calendar_train_276", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who are the attendees for fo the meetings in greenberg cafe", "source": "person that is attendee of meeting whose location is greenberg cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe)))", "qid": "calendar_train_641", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "locations of meetings attended by alice", "source": "location that is location of meeting whose attendee is alice", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice)))", "qid": "calendar_train_320", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me the location of all meetings attended by alice", "source": "location that is location of meeting whose attendee is alice", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice)))", "qid": "calendar_train_194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me all attendees of meetings at the greenberg cafe", "source": "person that is attendee of meeting whose location is greenberg cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe)))", "qid": "calendar_train_297", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is attending the same meeting as alice", "source": "person that is attendee of meeting whose attendee is alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice)))", "qid": "calendar_train_589", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what person is attending the meeting at greenberg cafe", "source": "person that is attendee of meeting whose location is greenberg cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe)))", "qid": "calendar_train_384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what location is the meeting who has alice attending", "source": "location that is location of meeting whose attendee is alice", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice)))", "qid": "calendar_train_202", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is attending the greenberg cafe for the meeting", "source": "person that is attendee of meeting whose location is greenberg cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe)))", "qid": "calendar_train_414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me meeting locations with alice", "source": "location that is location of meeting whose attendee is alice", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice)))", "qid": "calendar_train_582", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what important meeting started at 10am", "source": "meeting that is important and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_233", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all important meetings that end at 10am", "source": "meeting that is important and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_577", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings marked important beginning at 10 am", "source": "meeting that is important and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_test_17", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "important meetings that start at 10am", "source": "meeting that is important and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_199", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings marked important ending at 10 am", "source": "meeting that is important and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_test_115", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me important meetings that start at 10am", "source": "meeting that is important and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_69", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "important meeting at 10am", "source": "meeting that is important and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_66", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "person attending three hour meeting", "source": "person that is attendee of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_train_537", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what location is the three hour meeting", "source": "location that is location of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_test_50", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "show me the locations of all meetings three hours in length", "source": "location that is location of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_train_640", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "location is same as the location of three hours long meeting", "source": "location that is location of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_train_485", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who is attending the three hour meeting", "source": "person that is attendee of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_test_92", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "show me who is attending three hour meetings", "source": "person that is attendee of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_train_135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "people that attend three hour long meetings", "source": "person that is attendee of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_train_358", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "where is the threehour long meeting", "source": "location that is location of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_train_627", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "show me all attendees of meetings three hours long", "source": "person that is attendee of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_train_107", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "locations of meetings that are three hours long", "source": "location that is location of meeting whose length is three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour))))", "qid": "calendar_train_521", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "show me meetings that take three hours in greenberg cafe", "source": "meeting whose length is three hours and whose location is greenberg cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string location) (string =) en.location.greenberg_cafe))", "qid": "calendar_test_44", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me all meetings alice is attending which are three hours long", "source": "meeting whose length is three hours and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string attendee) (string =) en.person.alice))", "qid": "calendar_train_184", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "meetings that are attended by alice and are three hours long", "source": "meeting whose length is three hours and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string attendee) (string =) en.person.alice))", "qid": "calendar_train_60", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me all meetings in greenber cafe that will run three hours", "source": "meeting whose length is three hours and whose location is greenberg cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string location) (string =) en.location.greenberg_cafe))", "qid": "calendar_train_342", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what meetings have a length of three hours and alice is attending", "source": "meeting whose length is three hours and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string attendee) (string =) en.person.alice))", "qid": "calendar_test_85", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "three hour meeting at greenberg cafe", "source": "meeting whose length is three hours and whose location is greenberg cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string location) (string =) en.location.greenberg_cafe))", "qid": "calendar_train_151", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me meetings that take 3 hours and are with alice", "source": "meeting whose length is three hours and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string attendee) (string =) en.person.alice))", "qid": "calendar_train_50", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me all meetings three hours long at the greenberg cafe", "source": "meeting whose length is three hours and whose location is greenberg cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string location) (string =) en.location.greenberg_cafe))", "qid": "calendar_train_13", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me all 3 hour meetings with alice", "source": "meeting whose length is three hours and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string attendee) (string =) en.person.alice))", "qid": "calendar_train_637", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what meeting has the fewest locations", "source": "meeting that has the least number of location", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string location)))", "qid": "calendar_test_81", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "show me meetings with the most locations", "source": "meeting that has the most number of location", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string max) (string location)))", "qid": "calendar_train_592", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what meeting has the least number of attendees", "source": "meeting that has the least number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string attendee)))", "qid": "calendar_train_136", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "meeting with least attendees", "source": "meeting that has the least number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string attendee)))", "qid": "calendar_train_584", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what meeting had the fewest people show up", "source": "meeting that has the least number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string attendee)))", "qid": "calendar_train_23", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which meeting has the fewest attendees", "source": "meeting that has the least number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string attendee)))", "qid": "calendar_test_45", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "meeting with largest number of attendees", "source": "meeting that has the most number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string max) (string attendee)))", "qid": "calendar_train_611", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "meetings held in the most locations", "source": "meeting that has the most number of location", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string max) (string location)))", "qid": "calendar_train_179", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which meeting has the most people scheduled to attend", "source": "meeting that has the most number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string max) (string attendee)))", "qid": "calendar_test_128", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "show me the meetings with the least number of different locations", "source": "meeting that has the least number of location", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string location)))", "qid": "calendar_train_131", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "show me any meetings that are either the weekly standup or annual review", "source": "weekly standup or annual review", "target": "(call listValue (call concat en.meeting.weekly_standup en.meeting.annual_review))", "qid": "calendar_train_279", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "show me any meetings that alice or bob have attended", "source": "alice or bob", "target": "(call listValue (call concat en.person.alice en.person.bob))", "qid": "calendar_train_609", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "show me all meetings happening at greenberg cafe or central office", "source": "greenberg cafe or central office", "target": "(call listValue (call concat en.location.greenberg_cafe en.location.central_office))", "qid": "calendar_test_90", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "show me all meetings that are either weekly standup or annual review", "source": "weekly standup or annual review", "target": "(call listValue (call concat en.meeting.weekly_standup en.meeting.annual_review))", "qid": "calendar_train_352", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "when is weekly standup or annual review", "source": "weekly standup or annual review", "target": "(call listValue (call concat en.meeting.weekly_standup en.meeting.annual_review))", "qid": "calendar_train_588", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "location is greenberg cafe or central office", "source": "greenberg cafe or central office", "target": "(call listValue (call concat en.location.greenberg_cafe en.location.central_office))", "qid": "calendar_train_509", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "show me meetings that take 3 hours", "source": "meeting whose length is three hours and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_22", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "three hour meeting", "source": "meeting whose length is three hours and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_401", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "show me all meetings lasting for three hours", "source": "meeting whose length is three hours and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_7", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "show me all meetings scheduled for three hourse", "source": "meeting whose length is three hours and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_388", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what important meeting has a location at greenberg cafe", "source": "meeting that is important and whose location is greenberg cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string location) (string =) en.location.greenberg_cafe))", "qid": "calendar_train_34", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "important meetings at greenberg cafe", "source": "meeting that is important and whose location is greenberg cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string location) (string =) en.location.greenberg_cafe))", "qid": "calendar_train_403", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me important meetings at greenberg cafe", "source": "meeting that is important and whose location is greenberg cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string location) (string =) en.location.greenberg_cafe))", "qid": "calendar_test_105", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what important meeting has alice attending", "source": "meeting that is important and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string attendee) (string =) en.person.alice))", "qid": "calendar_train_437", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "important meeting at greenberg cafe", "source": "meeting that is important and whose location is greenberg cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string location) (string =) en.location.greenberg_cafe))", "qid": "calendar_train_218", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me important meetings with alice", "source": "meeting that is important and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string attendee) (string =) en.person.alice))", "qid": "calendar_train_379", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "important meetings attended by alice", "source": "meeting that is important and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string attendee) (string =) en.person.alice))", "qid": "calendar_train_142", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me all meetings marked important which are also attended by alice", "source": "meeting that is important and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string attendee) (string =) en.person.alice))", "qid": "calendar_test_56", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me all meetings marked as important happening at greenberg cafe", "source": "meeting that is important and whose location is greenberg cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string location) (string =) en.location.greenberg_cafe))", "qid": "calendar_train_329", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "important meeting with alice as attendee", "source": "meeting that is important and whose attendee is alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string attendee) (string =) en.person.alice))", "qid": "calendar_train_322", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is the meeting at 10am or 3pm", "source": "10am or 3pm", "target": "(call listValue (call concat (time 10 0) (time 15 0)))", "qid": "calendar_train_86", "anonymized_target": "(call listValue (call concat (time 10 0) (time 15 0)))"}
{"paraphrased": "schedule a meeting for 10am or 3pm", "source": "10am or 3pm", "target": "(call listValue (call concat (time 10 0) (time 15 0)))", "qid": "calendar_train_351", "anonymized_target": "(call listValue (call concat (time 10 0) (time 15 0)))"}
{"paraphrased": "show me all meetings between 10am and 3pm", "source": "10am or 3pm", "target": "(call listValue (call concat (time 10 0) (time 15 0)))", "qid": "calendar_train_229", "anonymized_target": "(call listValue (call concat (time 10 0) (time 15 0)))"}
{"paraphrased": "meeting which is on jan 2 or jan 3", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_train_64", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "meetings on january 2 or january 3", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_test_130", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "show me all metings that take place jan 2 or jan 3", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_train_419", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "what meeting is on jan 2 or 3rd", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_train_560", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "show me all meetings happening on january 2nd or january 3rd", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_train_649", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "what meeting has a length smaller than three hours", "source": "meeting whose length is smaller than three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_test_73", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "show me all meetings at least three hours long", "source": "meeting whose length is at least three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_train_214", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "meeting that has duration of lesser than three hour", "source": "meeting whose length is smaller than three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_test_2", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "show me meetings shorter than 3 hours", "source": "meeting whose length is at most three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_test_49", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "meeting is at least 3 hours long", "source": "meeting whose length is at least three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_train_482", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me a meeting shorter than three hours", "source": "meeting whose length is smaller than three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_train_118", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "show me all meetings shorter than three hours", "source": "meeting whose length is smaller than three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_train_467", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "meetings that are three hours long or less", "source": "meeting whose length is at most three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_train_346", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what meetings are scheduled to run for 3 hours", "source": "meeting whose length is at least three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_train_550", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "meetings that are three hours or longer", "source": "meeting whose length is at least three hours", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (number 3 en.hour))))", "qid": "calendar_train_207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what meeting has an earlier date than jan 2", "source": "meeting whose date is smaller than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "meeting before jan 2", "source": "meeting whose date is smaller than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "meetings held later than january 2", "source": "meeting whose date is larger than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_49", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "show me all meetings happening on or after january 2nd", "source": "meeting whose date is at least jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >=) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_294", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "show me meetings before january 2nd", "source": "meeting whose date is smaller than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_418", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "meetings held before january 2", "source": "meeting whose date is smaller than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_486", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "what meeting has a date after jan 2", "source": "meeting whose date is larger than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_535", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "show me all meetings happening before january 2nd", "source": "meeting whose date is smaller than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_test_101", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "what meeting was on or before jan 2", "source": "meeting whose date is at most jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <=) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_test_156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "show me all meetings after january 2nd", "source": "meeting whose date is larger than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_test_67", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "meetings held in the same place as the weekly standup meeting", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_542", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what meeting has the same location as weekly standup", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_95", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me all meetings attended by people who have also attended the weekly standup", "source": "meeting whose attendee is person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_275", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me meetings that share location with the weekly standup meeting", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_338", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me all meetings happening at the same location as the weekly standup", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "meeting whose location is same as the  location of weekly standup", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_651", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "meeting shares attendee with weekly standup", "source": "meeting whose attendee is person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_123", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "meetings that are attended by people that also attend the weekly standup meeting", "source": "meeting whose attendee is person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me all meetings that share an attendee with the weekly standup meeting", "source": "meeting whose attendee is person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what meeting starts at 10am and ends at 10am q", "source": "meeting whose start time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_test_155", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "what meeting starts at 10am", "source": "meeting whose start time is 10am and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_101", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meetings that end at 10am and start at 10am", "source": "meeting whose end time is 10am and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_63", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meeting that starts and ends at 10am", "source": "meeting whose start time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_431", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meeting which starts at 1000 am", "source": "meeting whose start time is 10am and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_464", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings beginning and ending at 10 am", "source": "meeting whose start time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_141", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings that end at 10am", "source": "meeting whose end time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_528", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "which meetings end at 10am", "source": "meeting whose end time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_62", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings beginning at 10 am and all meetings ending at 10 am", "source": "meeting whose end time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_372", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings which begin at 10 am and end at 10 am", "source": "meeting whose end time is 10am and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_149", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meetings held before january 3", "source": "meeting whose date is at most jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_train_97", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "meetings that are on or before january 3", "source": "meeting whose date is at least jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_test_121", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "meeting is no later than january 2nd or 3rd", "source": "meeting whose date is at least jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_test_8", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "what meetings date is earlier than jan 2 or 3rd", "source": "meeting whose date is smaller than jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_train_315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "what meeting is on or before jan 2 or 3rd", "source": "meeting whose date is at most jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_train_343", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "show me meetings before jan 3", "source": "meeting whose date is smaller than jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_train_130", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "show me all meeting that take place by jan 3", "source": "meeting whose date is at most jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_train_71", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "what meeting has a date of jan 2 or jan 3", "source": "meeting whose date is at least jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_test_54", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "show me all meetings which are scheduled no later than january 3", "source": "meeting whose date is at most jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_test_133", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "show me all meetings happening after january 2nd or january 3rd", "source": "meeting whose date is larger than jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))", "qid": "calendar_train_570", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 1 3)))))"}
{"paraphrased": "meetings that do not start at 10am", "source": "meeting whose start time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string !=) (time 10 0)))", "qid": "calendar_train_375", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meetings that do not end at 10am", "source": "meeting whose end time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string !=) (time 10 0)))", "qid": "calendar_train_125", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "which meetings are scheduled to end at 10am", "source": "meeting whose end time is 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_456", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings not ending at 10 am", "source": "meeting whose end time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string !=) (time 10 0)))", "qid": "calendar_train_5", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me any meetings which end at 10 am", "source": "meeting whose end time is 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings not beginning at 10 am", "source": "meeting whose start time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string !=) (time 10 0)))", "qid": "calendar_train_19", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meeting that does not end at 10am", "source": "meeting whose end time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string !=) (time 10 0)))", "qid": "calendar_train_529", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meetings that end at 10am", "source": "meeting whose end time is 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_74", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "what meeting does not start at 10am", "source": "meeting whose start time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string !=) (time 10 0)))", "qid": "calendar_train_619", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "which meetings dont start at 10am", "source": "meeting whose start time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string !=) (time 10 0)))", "qid": "calendar_train_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me the locations of all meetings on january 2", "source": "location that is location of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_train_106", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "location is same as the location of meeting on jan 2", "source": "location that is location of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_test_63", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "show me all attendees of meetings on january 2nd", "source": "person that is attendee of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_train_32", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "show me the attendees for all meetings on jan 2", "source": "person that is attendee of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_train_153", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "what is the location of the jan 2 meeting", "source": "location that is location of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_train_458", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "where is my jan 2 meeting", "source": "location that is location of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_train_597", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "person attending jan 2nd meeting", "source": "person that is attendee of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_train_27", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "locations that house meetings on january 2", "source": "location that is location of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_train_505", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "which people are attending meetings on january 2", "source": "person that is attendee of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_test_33", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "who is attending the meeting on jan 2", "source": "person that is attendee of meeting whose date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2))))", "qid": "calendar_train_405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "what important meetings start at 10am", "source": "meeting whose start time is 10am and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string is_important)))", "qid": "calendar_train_170", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING)))"}
{"paraphrased": "important meetings that end at 10am", "source": "meeting whose end time is 10am and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string is_important)))", "qid": "calendar_train_208", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING)))"}
{"paraphrased": "show me all meetings labeled as important that start at 10 am", "source": "meeting whose start time is 10am and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string is_important)))", "qid": "calendar_train_82", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING)))"}
{"paraphrased": "what meetings are imporant and start at 10am", "source": "meeting whose start time is 10am and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string is_important)))", "qid": "calendar_train_503", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING)))"}
{"paraphrased": "what important meeting has a start time at 10am", "source": "meeting whose start time is 10am and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string is_important)))", "qid": "calendar_test_160", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING)))"}
{"paraphrased": "which important meeting starts at 10 in the morning", "source": "meeting whose start time is 10am and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string is_important)))", "qid": "calendar_test_151", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING)))"}
{"paraphrased": "show me all meetings marked important which end at 10 am", "source": "meeting whose end time is 10am and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string is_important)))", "qid": "calendar_train_395", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING)))"}
{"paraphrased": "what important meeting has an end time of 10am", "source": "meeting whose end time is 10am and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string is_important)))", "qid": "calendar_test_120", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING)))"}
