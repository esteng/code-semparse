{"paraphrased": "employee ending after alice ends", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2287", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me student whose end date is after student alices", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_310", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started no later than alice did", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_812", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working when alice stopped working or before", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_410", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date that is around alices start date", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_339", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all students that will be leaving the company by the time alice starts", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3043", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students end date happends the same time as  alice", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2379", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student left school before alice left school", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1555", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started after alice quit", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_177", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who has been here longer than alice", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_364", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2389", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "persons presently logged in who were born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_455", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "presently logged in persons whose relationship status is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1941", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_69", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is from new york and logged in", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1068", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what online person is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_423", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "online male member", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_71", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are currently online and born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that are currently online and friends with alice", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1779", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are male and currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3263", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all people who are not alices friends", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_998", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "whats the gender of alice", "source": "gender that is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1855", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where wa alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2929", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who has different relationship status to alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1841", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where was alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_3131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a friend of alice", "source": "person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_2405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are not the same gender as alice", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1467", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is not alices gender", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_671", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what gender is alice not", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_485", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the relationship status of people that stopped working after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of an employee whose start date is later than 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of people who started their study before 2005", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3293", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of employees whose last day was no earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people that started school before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_319", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth city of student whose end date is at least 2004", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2797", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people who stopped working in 2004 or later", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2766", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the relationship status of an employee who has an end date of 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1232", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the friends of people who joined their studies after 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1790", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of the employee who started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_132", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students with last day in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_631", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who were hired either in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1387", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all employees who started in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_625", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date of either 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_169", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the names of all students who graduated between 2004 and 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_239", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who began school in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3360", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all employees who quit in 2004 and 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_554", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees last day was in 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2054", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a list of students whose start date was in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1442", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who quit job in 2004 and 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_686", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people with relationship status as alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_710", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what person has the same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_823", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what person has the same gender as alice", "source": "person whose gender is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call getProperty en.person.alice (string gender))))", "qid": "socialnetwork_train_2597", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what person has a relationship status the same as alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_113", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find people with same birthplace as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1607", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "who has same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_184", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find people who have the same birthplace as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_223", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "whats the birthplace of alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_939", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "people who have the same birthday as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_602", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "people born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_test_482", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has a birthplace of a person who is at least 180 cm", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what companies employ people with a height of 180 cm", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2742", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "birth city of person whose height is 180 cm", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_844", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the relationship status of a person whose height is 180 cm", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2232", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find people with a height of 180 cm and their friends", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2712", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the field of study of those who are 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_619", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the university of a person whose height is 180 cm", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the relationship status of the person who is 180 cm tall", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2448", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the job title of people who have a height of 180 cm", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1422", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "friends of people with 180 cm height", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find someone born during or after 2004", "source": "person whose birthdate is at least 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_831", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "people born after 2004", "source": "person whose birthdate is larger than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "people born between 2004 and 2010", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_472", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "who was born in 2004 or 2010", "source": "person whose birthdate is at most 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2791", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "people born between 2004 and 2010", "source": "person whose birthdate is at least 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "persons born in or before 2004", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2634", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "what people have birthdates between 2004 and 2010", "source": "person whose birthdate is larger than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2703", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "what person has a birthdate between 2004 and 2010", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2335", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "people born before 2010", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_284", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "find people born between 2004 and 2010", "source": "person whose birthdate is at most 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3246", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "which employee quit their job after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_804", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee ending before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_204", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date no later than 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3169", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1003", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_124", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with a start date that is later than 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_743", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended in 2004 or later", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2758", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students left after 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3388", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is not after 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_103", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is minimum 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2400", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birth city of a student who didnt stop in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1057", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of students not finishing in 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2648", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of students with a start date that is not the same as 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2061", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is relationship status of students with end dates other than 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2080", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of employees who did not stop working in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3091", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of people who did not start school in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of employees who did not start in 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_568", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the birth city for students whom have a start date other than 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_985", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is gender of employees with last days other than 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_401", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender is the employee whose end date is not 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2036", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me a person born in either 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_357", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "persons born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_test_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "people born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_2775", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "person who was born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "what was alices field of study as a student", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_1363", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what day does alice start", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_test_53", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which date did student alice left", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_1907", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice begin as an employee", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_317", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices job title", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_1388", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice start her job", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_test_417", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice stop working", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_2981", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is alices employer", "source": "employer of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))", "qid": "socialnetwork_test_564", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what was alices first day of work", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_test_470", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the university of alice", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_1427", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the student whose start date is on alices birthday", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_741", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with last day before or on alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1599", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students whose first day is after alices birthday", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2770", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee quit before alice", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1965", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working before alices birthdate", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3355", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee started on or after alices birthdate", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2132", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is  birth date of alice", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_487", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name an employee who quit before alice was born", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_50", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date that is no later than alices birthday", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1135", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student ended at most on alices birthdate", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_439", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "someone with over two friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1780", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find people who are friends with no more than two people", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1948", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who has two friends", "source": "person that is friends with two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_833", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find people who do not have more than two friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_670", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people with two or less friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2636", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people with three or more friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_608", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "person with more then two people", "source": "person that is friends with at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_935", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people with only one friend", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_437", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "person who has two or more friends", "source": "person that is friends with at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1957", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people with less than two friends", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_325", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employee with not more than two job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1462", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have two or fewer job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1926", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all students with a single major", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_637", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student with less than two universities", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1872", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students are part of two universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_252", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the employee that has less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_638", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students went to fewer than two universities", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_88", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees with less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_87", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees have no more than 2 job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2382", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with one field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2223", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students starting 2010 or before", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2939", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students starting after 2004", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1518", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is before 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_807", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student ended school before 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3054", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all students who graduated between 2004 and 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_618", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has an end date of at least 2004", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3468", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined their studies before 2011", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_861", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students whose last day was before 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_794", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees have a start date between 2004 and 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3342", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started no later than 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_243", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people who were born in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_594", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people that were born in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2234", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what persons birthday is in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_872", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find all people who were born in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3334", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people whose gender is same as alice", "source": "person whose gender is gender that is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2615", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which person has a relationship status the same as alice", "source": "person whose relationship status is relationship status that is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3527", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who were born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people who has the same birthplace as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1525", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is friends with a person that is friends with alice", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_934", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "a mutual friend of alice", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2633", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who are friends of alices friends", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_804", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find someone born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_941", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is born in a city where alice is born", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_30", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the student who graduated on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2090", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who quit on alices birthdate", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2502", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees starting on alices birthday", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2141", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students finishing on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_158", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who started working on alices birthdate", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2613", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended their job on the same day as alices brithday", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_663", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees whom have the same end date as alices birthday", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_209", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who joined study on the day alice was born", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_893", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose end date is birth date of alice", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3209", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student quit on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_215", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friend of someone born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_936", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who is friends with someone whos birthdate is 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "people who have friends that were born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "people that have a friend born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1832", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find all people who is friend with people born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1924", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who is friends with an employee who started in a year other than 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3010", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are friends with someone that did not stop working in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1787", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people are friens with students that have a start date not equal to 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_749", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with somebody who did not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_144", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that have a friend that started school in a year other than 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2301", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with students who do not graudate in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who are the friends of employees who did not quit in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with employees who did not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2508", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of employee whose end date is not 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_745", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who have student friends who did not graduate in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3193", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born anywhere but new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_409", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are in a relationship", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_1458", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are not male", "source": "person whose gender is not male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_2741", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "person not born in new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_1346", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which person has a relationship status of single", "source": "person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_503", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person was not born in new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_2098", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is alices friend", "source": "person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2215", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that are not single", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_2496", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are currently in a relationship", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_test_818", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are not friends with alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_3097", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "online people who were born in 2004", "source": "person that is logged in and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_881", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what person was born in 2004 and is logged in", "source": "person that is logged in and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_65", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which of alices friends are male", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_198", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "friend of alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1004", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people are friends with alice and have a birthplace of new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_561", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is friends with alice and was born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3450", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are friends with alice and are single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_167", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which of alices friends are single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2944", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what friend of alice was born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1119", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people who are friends of alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1475", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a person who is friends with alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_640", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is alices single friend", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3235", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people are friends with those who are friends with alice", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_549", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the friends of all people who list their relationship status as single", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3531", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all people who has a friend born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what person is friends with the person who was born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_535", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "anyone friend of a male", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who have single friends", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people that are friends with someone that is single", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2383", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what person is friends with males", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1425", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people who are friends of alices friends", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "any friend of anyone born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2091", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find someone taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_661", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people that are at most 180 cm tall", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_736", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find a person who is 180 cm or taller", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_859", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find people taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3252", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people that are taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_239", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "who is shorter than 180cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3417", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people shorter than 180 cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2340", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "who is shorter than 181cm", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2699", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "name people whose height is greater than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1691", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people who are shorter than 181 cm", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3430", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
