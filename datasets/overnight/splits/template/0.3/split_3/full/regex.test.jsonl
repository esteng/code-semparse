{"paraphrased": "line that starts with the word  abc  after the number  123 ", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4113", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  before the number  123 ", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_777", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  after the number  123 ", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_285", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "123 shall be after abc at the beginning of the line", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3411", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts 123 followed by the word abc", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_792", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line where the word abc appears before the number 123", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_766", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses the word abc after the number 123", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4528", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "is there a line starting with abc that immediately continues 123", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4136", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has 123 after the starting word abc", "source": "line that starts with the word `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_5839", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line begins with 123 and then abc", "source": "line that starts with the word `` abc '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3911", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "word concludes wsmall letter or 123 numerals", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4663", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a vowel or 123", "source": "word that ends with vowel or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_827", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that ends with the letters abc or the numbers 123", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_190", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending 123 or with abc", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3924", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or the number  123 ", "source": "word that ends with `` abc '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6342", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that comes to an end with the number123 or an uppercase letter", "source": "word that ends with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a lowercase letter or 123", "source": "word that ends with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5919", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that finishes with 123 or 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2284", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that is ended with any character or 123", "source": "word that ends with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_197", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with 123", "source": "number that ends with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2768", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line ending with no more than two words", "source": "line that ends with at most two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_52", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that conclude with two lowercase letters", "source": "line that ends with two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_1110", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two word", "source": "line that ends with at least two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_1424", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that ends with at least two digit", "source": "line that ends with at least two digit", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_test_1107", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two words", "source": "line that ends with two word", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {) (call .toString (number 2)) (string })))", "qid": "regex_train_392", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "lines that stops after at least 2 lowercase letters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2542", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what line ends with two numbers or less", "source": "line that ends with at most two number", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_5255", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line concludes with two vowels maximum", "source": "line that ends with at most two vowel", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string })))", "qid": "regex_train_3575", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line ending with two or more lowercase letters", "source": "line that ends with at least two lowercase letter", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string [a-z]) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_3219", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a line that ends with at least two characters", "source": "line that ends with at least two character", "target": "((lambda x (call + (string .*) (var x))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,})))", "qid": "regex_train_2196", "anonymized_target": "((lambda x (call + (ANON_STRING) (var x))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "line that starts with the word  abc  and that ends with  abc ", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_221", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with  123 ", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4499", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with abc and then continues with some character", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4339", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line creates wabc word and concludes wuppercase letter", "source": "line that starts with the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_4734", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the word abc and that concludes with a lowercase letter", "source": "line that starts with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1498", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with the word abc and ending with a vowel", "source": "line that starts with the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_4777", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc and a character in the beginning", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_test_1189", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and terminates with a letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5481", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with  abc ", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_test_501", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts and ends with the word  abc ", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_903", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with both a letter and the word abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5116", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line starts and ends with the same specific sequence abc", "source": "line that starts with `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_703", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with the number   123  and ends with the word   abc ", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4390", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a letter and ends with word abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a character and stops after abc", "source": "line that starts with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3492", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a lowercase letter and stops with abc", "source": "line that starts with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with any letters but ends with the word abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_6258", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what lines start with a vowel and end with the word abc", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_6222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with a letter and the word abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1991", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a capital letter and stops with abc", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2404", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that both begins and ends with the word abc", "source": "line that ends with the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3667", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines starting with a letter but ending abc", "source": "line that ends with the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_2112", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with character", "source": "line that ends with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4867", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line terminates with letter and abc word", "source": "line that ends with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_2860", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with the word  abc  and ends with a letter", "source": "line that ends with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5485", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with  123 ", "source": "line that ends with the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3025", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with a bowel and ends with the smaller word abc", "source": "line that ends with the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_461", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with a vowel and ending with abc", "source": "line that ends with the word `` abc '' and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_3622", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with  abc ", "source": "line that ends with the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5533", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc as the starting and ending word", "source": "line that ends with the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2982", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with abc after a digit", "source": "line that starts with the word `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_696", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a letter before 123", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4232", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line begins with a character followed by 123", "source": "line that starts with character before the number `` 123 ''", "target": "(call + (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6350", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line beginning with 123 before itself", "source": "line that starts with `` 123 '' before the number `` 123 ''", "target": "(call + (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_6080", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a vowel before the digits 123", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_145", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line with a letter and 123 at the beginning", "source": "line that starts with letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_2108", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel before the number  123 ", "source": "line that starts with vowel before the number `` 123 ''", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_852", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter before the number  123 ", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_801", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter before the number  123 ", "source": "line that starts with capital letter before the number `` 123 ''", "target": "(call + (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_378", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that starts with the word abc before the number 123", "source": "line that starts with `` abc '' before the number `` 123 ''", "target": "(call + (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_4016", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "word thet begins with a capital letter or number", "source": "word that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5572", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number beginning with a digit or else the string abc", "source": "number that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3979", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a capital letter or digit", "source": "number that starts with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1303", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with vowel or digit", "source": "number that starts with vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2735", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begins with a letter or digit", "source": "number that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5967", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what  word that starts with lowercase letter or digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_360", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a letter or digit", "source": "word that starts with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_761", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word begins with a digit or   abc ", "source": "word that starts with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_950", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with a lowercase letter or digit", "source": "word that starts with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4130", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that starts with 123 or any other digit", "source": "number that starts with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2602", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what line begins with a charcter appearing after a digit", "source": "line that starts with character after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_test_762", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a lowercase letter in front of a digit", "source": "line that starts with lowercase letter before digit", "target": "(call + (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4728", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begin with a character followed by a digit", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3048", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with  123  before a digit", "source": "line that starts with `` abc '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string abc))) (string .*))", "qid": "regex_test_35", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that start with characters before digits", "source": "line that starts with character before digit", "target": "(call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_test_361", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that starts with a lowercase letter after a digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_3090", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with a digit followed by a letter", "source": "line that starts with letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1683", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with a vowel before any digit", "source": "line that starts with vowel before digit", "target": "(call + (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_3465", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line thet begins with 123 after a digit", "source": "line that starts with `` 123 '' after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1712", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter after digit", "source": "line that starts with lowercase letter after digit", "target": "(call + (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_3483", "anonymized_target": "(call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that concludes with the word abc and that concludes with the word abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1238", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc at the end", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4808", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with the word abc and also ends with the word abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4019", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with the word  abc ", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_329", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with the word  abc ", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3864", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "find the line that finishes with the lettered sequence abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2017", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after the word abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4254", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and have 123", "source": "line that starts with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1561", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and a letter", "source": "line that starts with capital letter and that contains letter", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_1781", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with abc and containing 123", "source": "line that starts with `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_4317", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a lowercase letter and use 123", "source": "line that starts with lowercase letter and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_734", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with lowercase letter and that contains letter", "source": "line that starts with lowercase letter and that contains letter", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_3145", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finsih with a vowel and include abc", "source": "line that ends with vowel and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3828", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with and contain 123", "source": "line that starts with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3454", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and had a vowel in the beginning", "source": "line that starts with vowel and that contains capital letter", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_4633", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ending with a capital letter", "source": "line that ends with character and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_2622", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains and ends in   123 ", "source": "line that ends with `` 123 '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_6303", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "numbers with a digit followed by 123 at the beginning", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_66", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that starts with any character before a digit", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1856", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number beginning with a character followed by digits", "source": "number that starts with character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1087", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with 123 followed by any digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6271", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a digit followed by a character", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3154", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  before digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5600", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  after digit", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2718", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what numbers begin with 123 followed by a digit", "source": "number that starts with `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4126", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number commences wdigit then character", "source": "number that starts with character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3453", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that start with digits and then 123 after", "source": "number that starts with `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3517", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not contain the smaller word abc", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_750", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number without abc in it", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_300", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has no capitals", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2039", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains capital letter", "source": "number that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5645", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains  123 ", "source": "number that not contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4558", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not using capital letters", "source": "word that not contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1184", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "should be a number do not include any lowercase letters", "source": "number that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4133", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not contains lowercase letter", "source": "word that not contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2925", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not use letters", "source": "number that not contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1629", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not include abc", "source": "number that not contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1275", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that begins with a letter or digit", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1253", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with vowel or digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_815", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with either a vowel or digit", "source": "line that starts with vowel or digit", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_test_982", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that starts with a lowercase letter or digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1895", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with either 123 or a digit", "source": "line that starts with `` 123 '' or digit", "target": "(call + (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_3867", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with a character or a digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1709", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with character or digit", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_2682", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line begins with a digit or character", "source": "line that starts with character or digit", "target": "(call + (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4176", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line starting with a digit or letter", "source": "line that starts with letter or digit", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_1215", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what is a line that begins with either a lowercase letter or in a digit", "source": "line that starts with lowercase letter or digit", "target": "(call + (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*))", "qid": "regex_train_4279", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that ends with the word  abc  and that starts with the word  abc ", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2976", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with the word  abc ", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1245", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends with the word abc and also begins with the word abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2428", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends and starts with abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_1248", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines beginning and ending with abc", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2097", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with abc and has abc repeated at the very end", "source": "line that ends with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_534", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses capital letter and begins with a letter", "source": "line that contains capital letter and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4984", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel adn ending with abc", "source": "line that contains vowel and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_5760", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line containing a vowel and ending with a character", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_4171", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with a capital letter and contain at least one vowel", "source": "line that contains vowel and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with 123 has a character in it", "source": "line that contains character and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_5623", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains letter and that starts with vowel", "source": "line that contains letter and that starts with vowel", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_499", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has any vowel and ends with any characters", "source": "line that contains vowel and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_5711", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes an uppercase letter and has abc at the end", "source": "line that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_2344", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using a lowercase letter and ending with a capital letter", "source": "line that contains lowercase letter and that ends with capital letter", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_2970", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that utilize a lowercase letter and end with 123", "source": "line that contains lowercase letter and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_80", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  before the number  123 ", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5112", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops with a lowercase letter before 123", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_6237", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line concludes wcharacter then numerals 123", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5288", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with lowercase letter before the number  123 ", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4300", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with 123 before 123", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5884", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with letter before the number  123 ", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2831", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with  abc  before the number  123 ", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_343", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that initiate with a character directly before the number sequence 123", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4656", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after the word abc if it is before any digits", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5444", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with a repeating 123 sequence", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3242", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "word that ends with abc and utilizes a lowercase letter", "source": "word that ends with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4906", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with lowercase letter and that contains letter", "source": "word that starts with lowercase letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3039", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character and that contains capital letter", "source": "word that ends with character and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1228", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops after a vowel and uses abc", "source": "word that ends with vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2073", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that terminates with a letter and includes a letter", "source": "word that ends with letter and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1072", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with character and that contains  abc ", "source": "word that starts with character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_609", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with  abc  and that contains lowercase letter", "source": "word that starts with `` abc '' and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1035", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that begins with abc and uses a capital letter", "source": "word that starts with `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5146", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a small letter and has a character at the end", "source": "word that ends with character and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2544", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with letter and that contains  abc ", "source": "word that ends with letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_964", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "vowel before the number  123 ", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_3343", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": " abc  before the number  123 ", "source": "`` abc '' before the number `` 123 ''", "target": "(call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_848", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a digit followed by the word abc", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_1145", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "uses a vowel before the number 123", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_364", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "123 preceded by any lowercase letter", "source": "lowercase letter before the number `` 123 ''", "target": "(call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2716", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "digit followed by the word abc", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_89", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a letter followed by the number 123", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1048", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "word that uses a lowercase letter before the number 123", "source": "lowercase letter before the number `` 123 ''", "target": "(call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_376", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "letter before the number  123 ", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_298", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the word  abc  after digit", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_5727", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "words that begins with at most 2 words", "source": "word that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1380", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words with at least two vowels at the beginning", "source": "word that starts with at least two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1986", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that begin with no more than two digits", "source": "number that starts with at most two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5830", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begin with no more than two vowels", "source": "word that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3579", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words start with two characters", "source": "word that starts with at most two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2730", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with two digit", "source": "number that starts with two digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [0-9]) (string \")\") (string {) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1042", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that begins with a maximum of two vowels", "source": "number that starts with at most two vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string [AEIOUaeiou]) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_240", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with at most two number", "source": "word that starts with at most two number", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[0-9]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6051", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with at most two word", "source": "number that starts with at most two word", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string \\\\\\\\b[a-zA-Z]+\\\\\\\\b) (string \")\") (string {0,) (call .toString (number 2)) (string }))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6149", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what is the alphanumeric that begins with two or more characters", "source": "number that starts with at least two character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") ((lambda x (call + (var x) (string .*))) (call + (string \"(\") (string .) (string \")\") (string {) (call .toString (number 2)) (string ,}))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4651", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) ((lambda x (call + (var x) (ANON_STRING))) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)\") (ANON_STRING) (call .toString (ANON_NUMBER)) (ANON_STRING))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a letter or perhaps a digit", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_1060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "contains either the word abc or a digit", "source": "`` abc '' or digit", "target": "(call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))", "qid": "regex_test_605", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "letter or number", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2060", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "either a character or a digit", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3921", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "small letter or number", "source": "lowercase letter or digit", "target": "(call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_2068", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "any vowel or digit", "source": "vowel or digit", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3448", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "line using a character or a digit", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_5960", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "uppercase letter or number", "source": "capital letter or digit", "target": "(call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_4578", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "list all characters or digits", "source": "character or digit", "target": "(call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_5177", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "something with letters or digits in it", "source": "letter or digit", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_427", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "lines that end with a character before a digit", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_4091", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that finishes with a lowercase letter after a digit", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_2493", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends letter digit in sequence", "source": "line that ends with letter before digit", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_2182", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with vowels before digits", "source": "line that ends with vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1199", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a digit before a vowel on a line", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_test_113", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line concludes wcharacter then digit", "source": "line that ends with character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_1084", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with lowercase letter after digit", "source": "line that ends with lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_1917", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  123  before digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_2705", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has 123 at the end before a number", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3106", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with a lowercase letter and then a digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_1214", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line beginning with the word abc", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3009", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word abc", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3493", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that starts with the word  abc ", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3710", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that begins with the word abc and also starts with the word abc", "source": "line that starts with the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_937", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and includes abc", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_3117", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line starts with  abc ", "source": "line that starts with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_2373", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line with a vowel that starts with abc", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_test_1530", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc that also has a lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_895", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts with abc and contains any other letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_941", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with abc and has a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5490", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains letter", "source": "line that starts with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_416", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains lowercase letter", "source": "line that starts with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1071", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc and has a capital letter", "source": "line that starts with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_1227", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains vowel", "source": "line that starts with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_4570", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "word using either abc or digit", "source": "the word `` abc '' or digit", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))", "qid": "regex_train_3507", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))"}
{"paraphrased": "line that has 123 before a digit", "source": "line that contains `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_833", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes a digit followed by the sequence 123", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_1834", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that contain 123", "source": "line that contains `` 123 '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_752", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes a capital letter followed by a digit", "source": "line that contains capital letter before digit", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1785", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that have a vowel come before a digit", "source": "line that contains vowel before digit", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_813", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line including digit followed by a lowercase letter", "source": "line that contains lowercase letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_953", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains character before digit", "source": "line that contains character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5847", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that has a number after a character", "source": "line that contains character before digit", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_601", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains letter after digit", "source": "line that contains letter after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_1105", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains  abc  before digit", "source": "line that contains `` abc '' before digit", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_6146", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
