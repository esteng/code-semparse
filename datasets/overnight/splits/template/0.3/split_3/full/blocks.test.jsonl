{"paraphrased": "block below block 1 which is 3 inches long", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1062", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a block with a width of three inches that block 1 is below", "source": "block that block 1 is below and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_562", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block right of block 1", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch long blocks  that block 1 is left of", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_275", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block right of block 1", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_2", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block that is to the right of block 1 with a width of 3 inches", "source": "block that block 1 is right of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_820", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that block 1 is to the left of and that has a height of 3 inches", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_942", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which block is 3 in height and has block 1 on its left", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1318", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch wide block below block 1", "source": "block that block 1 is above and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_661", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block whose width is three inches that block 1 is to the right of", "source": "block that block 1 is right of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_152", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is the block above special block", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_672", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "below special block", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_5", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block above special block", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_50", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks that is below", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "right of special block", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1088", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks left of something", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_650", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the block on the left side of the special block", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which is the block to the right of special block", "source": "block that block that is special is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_415", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that are special", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block below special block", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_393", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find a block with a special block to the left of it", "source": "block that is right of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_41", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block that is right of block that is special", "source": "block that is right of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_244", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks above special blocks", "source": "block that is above block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_79", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "select the block to the left of the special block", "source": "block that is left of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_63", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the block located on the left side of the special block", "source": "block that is left of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1324", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all blocks below the special blocks", "source": "block that is below block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_260", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which block is above the special block", "source": "block that is above block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what block is below the special block", "source": "block that is below block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_957", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me the special block on top of the block", "source": "block that is above block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_653", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "choose the block to the right of the unique block", "source": "block that is right of block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_327", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what block is less than 3 inches long", "source": "block whose length is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is higher than 3 inches", "source": "block whose height is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1009", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks at most 3 inches long", "source": "block whose length is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_133", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find a block with a diameter that is wider than 3 inches total", "source": "block whose width is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1189", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks at least 3 inches wide", "source": "block whose width is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1543", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks at most as tall as 3 inches", "source": "block whose height is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_816", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks shorter than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_test_387", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is no wider than 3 inches", "source": "block whose width is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks longer than 3 inches", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_32", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose height is at most 3 inches", "source": "block whose height is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_615", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block above two or more blocks", "source": "block that is above more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_279", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks underneath at least 2 blocks", "source": "block that is below more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_95", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has at most two blocks above it", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_276", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find all blocks above 2 or fewer blocks", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1515", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which blocks are left of singleorfewer blocks", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_859", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block under one or two blocks at most", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_218", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block on bottom", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_931", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks above at most 2 blocks", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_221", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks left of more than 2 blocks", "source": "block that is left of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_127", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is no higher than 2 blocks", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_205", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block buried under the smallest number of other blocks", "source": "block that the least number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_160", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick with the most blocks above it", "source": "block that the most number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_287", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that the most number of block is below", "source": "block that the most number of block is below", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string below)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_951", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick with the least number of blocks to the left of it", "source": "block that the least number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_460", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is below the fewest blocks", "source": "block that the least number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_371", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block to the right of the least amount of blocks", "source": "block that the least number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_181", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block is closest to the bottom", "source": "block that the most number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_996", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that the most number of block is left of", "source": "block that the most number of block is left of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string left)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_663", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the brick with the least blocks above it", "source": "block that the least number of block is above", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (call reverse (string above)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1451", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block which is at the right of most number of blocks", "source": "block that the most number of block is right of", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (call reverse (string right)) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1111", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all pyramid blocks", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_513", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block whose shape is a pyramid", "source": "block that block whose shape is a pyramid is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_191", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above pyramid blocks", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "get a block above any pyramid block", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_697", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is below and to the right of block 1", "source": "block that block that is below block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_380", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that block 1 is above and right of", "source": "block that block that is above block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1302", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block has below it a block in the shape of a pyramid", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_310", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the left of pyramid block", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1072", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above block 1", "source": "block that block that is above block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1245", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the pyramidshaped blocks", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1345", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is special and that is special", "source": "block that is special and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string is_special)))", "qid": "blocks_train_827", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "choose a block that is special", "source": "block that is special and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string is_special)))", "qid": "blocks_test_133", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find a special block", "source": "block that is special and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string is_special)))", "qid": "blocks_train_809", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "block below block 1 and block 2", "source": "block that block 1 or block 2 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1421", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what block is above block 2 or block 1", "source": "block that block 1 or block 2 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1269", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of blocks 1 or 2", "source": "block that block 1 or block 2 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1423", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that blocks 1 or 2 is below", "source": "block that block 1 or block 2 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "get a block to the left of block 1 or block 2", "source": "block that block 1 or block 2 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_989", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "right of block 1 and block 2", "source": "block that block 1 or block 2 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1084", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find the block that is left of block 1 or block 2", "source": "block that block 1 or block 2 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_196", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "select the blocks above block 1 and 2", "source": "block that block 1 or block 2 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1449", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "above block 1 or block 2", "source": "block that block 1 or block 2 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1452", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block below blocks 1 and 2", "source": "block that block 1 or block 2 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_171", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block that is special and whose height is 3 inches", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_277", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which special block is 3 inches wide", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1548", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the 3 inch tall special block", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_297", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "is  there a special block with a height that is only 3 inches", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1536", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all the special blocks that are 3 inches long", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1488", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which one is a 3 inch special block", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_510", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all special 3 inch long blocks", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_938", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that is special and whose length is 3 inches", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_542", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a 3 inch long special block", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_454", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch wide special block", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_792", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose length is width of block 1", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_129", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block with same color as of block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_986", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks with the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_test_36", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select all bricks with length of 1", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_978", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "bricks that are the same size as brick 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1579", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_1017", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block as long as block 1 is wide", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_889", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which block is the same height as block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1334", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose height is length of block 1", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_test_7", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "choose a block that is the same width as block 1s length", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_245", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find the 3 inch wide special block", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what brick is both unique and 3 inches", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_600", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which special brick is 3 inches wide", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_525", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a special 3 inch high block", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_test_146", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what special blocks have a length of 3 inches", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_1248", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the unique 3 inch wide block", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_901", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me a special 3 inch long block", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_347", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me all 3 inch tall special blocks", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_1225", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "block whose length is 3 inches and that is special", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_test_124", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which special block is 3 inches high", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_1329", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "select a block that is not below block 1", "source": "block that block 1 not is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string !=) en.block.block1))", "qid": "blocks_test_161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_185", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above block 1", "source": "block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is not above block 1", "source": "block that block 1 not is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string !=) en.block.block1))", "qid": "blocks_test_16", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is below", "source": "block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1535", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block that is not block 1 is below", "source": "block that block 1 not is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string !=) en.block.block1))", "qid": "blocks_test_360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the left of block 1", "source": "block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_853", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block not to right of block 1", "source": "block that block 1 not is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string !=) en.block.block1))", "qid": "blocks_train_606", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left of", "source": "block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_860", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block which does not have block 1 above", "source": "block that block 1 not is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string !=) en.block.block1))", "qid": "blocks_train_81", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is below a brick that is 3 inches wide", "source": "block that is below block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1001", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which brick is to the right of the brick that is 3 inches high", "source": "block that is right of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_test_152", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is left of block whose length is 3 inches", "source": "block that is left of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1466", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which block is above the brick that is 3 inches high", "source": "block that is above block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_730", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is below the 3 inch long block", "source": "block that is below block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is above the 3 inch high block", "source": "block that is above block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1040", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks right of 3 inch long blocks", "source": "block that is right of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_647", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose a block above a 3 inch block", "source": "block that is above block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_395", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks below 3 inch long blocks", "source": "block that is below block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_561", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block at the right of 3 inches wide block", "source": "block that is right of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_907", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
