{"paraphrased": "what is the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_503", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state has the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_test_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state contains the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_256", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_2062", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state is the capital of california in", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_2373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the state capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_1801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the state capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_test_23", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what rivers cross through california", "source": "river that traverses california and that traverses california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_530", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is contained by california", "source": "city that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_1338", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has sacramento as its capital and forms a border for california", "source": "state whose capital is sacramento and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_272", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what place is contained by california", "source": "place that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california) (string loc_place_state) (string =) fb:en.state.california))", "qid": "geo880_train_2887", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "cities of california", "source": "city that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_149", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a captial of sacramento", "source": "state whose capital is sacramento and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1823", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento as its capital and borders california", "source": "state whose capital is sacramento and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1081", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states border scaramento california", "source": "state that borders california and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_849", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "states that border california", "source": "state that borders california and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_514", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "mountains in california", "source": "mountain that is contained by california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_test_184", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "is this mt whitney or mt rainier", "source": "mount whitney or mount rainier", "target": "(call listValue (call concat fb:en.mountain.whitney fb:en.mountain.rainier))", "qid": "geo880_train_682", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "which is larger in surface area lake tahoe or huron", "source": "lake tahoe or lake huron", "target": "(call listValue (call concat fb:en.lake.tahoe fb:en.lake.huron))", "qid": "geo880_train_1151", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "either california or texas", "source": "california or texas", "target": "(call listValue (call concat fb:en.state.california fb:en.state.texas))", "qid": "geo880_train_1164", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "what state is larger california or texas", "source": "california or texas", "target": "(call listValue (call concat fb:en.state.california fb:en.state.texas))", "qid": "geo880_train_657", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "colorado river name", "source": "colorado river or red river", "target": "(call listValue (call concat fb:en.river.colorado fb:en.river.red))", "qid": "geo880_train_86", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "either sacramento or austin", "source": "sacramento or austin", "target": "(call listValue (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx))", "qid": "geo880_train_2359", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "where is sacramento or austin", "source": "sacramento or austin", "target": "(call listValue (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx))", "qid": "geo880_test_225", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "show me the colorado river or red river", "source": "colorado river or red river", "target": "(call listValue (call concat fb:en.river.colorado fb:en.river.red))", "qid": "geo880_test_57", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "is this california or texas", "source": "california or texas", "target": "(call listValue (call concat fb:en.state.california fb:en.state.texas))", "qid": "geo880_train_1865", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "what states contain sacramento and austin", "source": "sacramento or austin", "target": "(call listValue (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx))", "qid": "geo880_train_189", "anonymized_target": "(call listValue (call concat fb:ANON_ENTITY fb:ANON_ENTITY))"}
{"paraphrased": "what is a city that is a capital", "source": "city that is a capital and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string capital_city)))", "qid": "geo880_train_2983", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what major city is also a capital", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_1255", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what are some major rivers", "source": "river that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string major_river)))", "qid": "geo880_train_1178", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which rivers are major", "source": "river that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string major_river)))", "qid": "geo880_test_655", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is a major city and a capital", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2557", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which major metros are also state capitals", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_2302", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what capital city is also a major city", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_test_678", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what cities are major capitals", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_1830", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what lake is a major lake", "source": "lake that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string major_lake)))", "qid": "geo880_train_233", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is a large capital city", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2170", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what states have a major city", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_train_1726", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which states contain major lakes", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_test_194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major city in it", "source": "state that city that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city))))", "qid": "geo880_test_354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state contains a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states have major rivers within them", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_train_210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state contains a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_test_574", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states contain a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_1052", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states contain major rivers", "source": "state that river that is major traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river))))", "qid": "geo880_test_445", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what state has a major lake", "source": "state that lake that is major is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake))))", "qid": "geo880_train_875", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what states contain a capital city", "source": "state that city that is a capital is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city))))", "qid": "geo880_test_14", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "major city that is capital of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_290", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which city is californias capital", "source": "city that is capital of california and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string capital_city)))", "qid": "geo880_train_2905", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what major city is the capital of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_145", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which important city is the capital of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_2228", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what city is the capital of ca", "source": "city that is capital of california and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string capital_city)))", "qid": "geo880_train_1872", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "capital of california", "source": "city that is capital of california and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string capital_city)))", "qid": "geo880_test_695", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is a major capital city of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_1299", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is a major city that is californias capital", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_test_728", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the major capital city of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_1595", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the capital of california", "source": "city that is capital of california and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string major_city)))", "qid": "geo880_train_767", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "state whose capital is either sacramento or austin", "source": "state whose capital is sacramento or austin", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which rivers pass through either california or texas", "source": "river that traverses california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1719", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "state bordering california or texas", "source": "state that borders california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1842", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what are the cities of both california and texas", "source": "city that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2690", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what is a state that borders ca or tx", "source": "state that borders california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_test_682", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what city is contained by either california or texas", "source": "city that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2556", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what lake resides in california or texas", "source": "lake that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what lake is contained by ca or tx", "source": "lake that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_1766", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what is a lake in california or texas", "source": "lake that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_944", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state borders either california or texas", "source": "state that borders california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_798", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what mountain is contained by the most states", "source": "mountain that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string max) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1702", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a feature found in the fewest states", "source": "place that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string min) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2081", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state borders the least amount of states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_528", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which states borders the most other states", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_590", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "place in most states", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2649", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which river traverses the most number of states", "source": "river that traverses the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.river) (string !type)) (string max) (string traverse_river_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_105", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state shares a border with highest number of other states", "source": "state that borders the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_496", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state borders the least number of other states", "source": "state that borders the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string next_to_state_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_508", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountain is contained by the fewest states", "source": "mountain that is contained by the least number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.mountain) (string !type)) (string min) (string loc_mountain_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1832", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which place has the most number of states", "source": "place that is contained by the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.place) (string !type)) (string max) (string loc_place_state) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_408", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has lake tahoe in it and the colorado river running  through it", "source": "state that lake tahoe is contained by and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2184", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains both death valley and lake tahoe", "source": "state that death valley is contained by and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_596", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state next to california is mount whitney in", "source": "state that california borders and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_87", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have both mount whitney and sacramento", "source": "state that mount whitney is contained by and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1511", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states does the colorado river go through that also have lake tahoe", "source": "state that colorado river traverses and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_1790", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains both death valley and sacramento", "source": "state that death valley is contained by and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_2385", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains both lake tahoe and the colorado river", "source": "state that lake tahoe is contained by and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2509", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains the death valley", "source": "state that death valley is contained by and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_test_65", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which city acts as the capital of california", "source": "city that is capital of california and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_2052", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "the colorado river runs through which state that has the capital of sacramento", "source": "state that sacramento is contained by and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_1539", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not contain mount whitney", "source": "state that mount whitney not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string !=) fb:en.mountain.whitney))", "qid": "geo880_test_660", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states do not contain a sacramento", "source": "state that sacramento not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains death valley", "source": "state that death valley is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_test_556", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states is lake tahoe located in", "source": "state that lake tahoe not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string !=) fb:en.lake.tahoe))", "qid": "geo880_train_2401", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have lake tahoe", "source": "state that lake tahoe is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_332", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state traverses the colorado river", "source": "state that colorado river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains the colorado river", "source": "state that colorado river traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2603", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not contain death valley", "source": "state that death valley not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string !=) fb:en.place.death_valley))", "qid": "geo880_train_1966", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not contain the colorado river", "source": "state that colorado river not traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string !=) fb:en.river.colorado))", "qid": "geo880_train_2291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which cities are no the capital of california", "source": "city that is not capital of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string !=) fb:en.state.california))", "qid": "geo880_test_418", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
