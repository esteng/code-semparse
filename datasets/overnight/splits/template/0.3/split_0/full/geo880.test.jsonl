{"paraphrased": "which state contains the most places", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_test_395", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest mountains", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_966", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the least number of river traverseas", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_1110", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least number of cities in it", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2138", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have the greatest number of states bordering them", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1321", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest borders", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_409", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have the greatest number of locations in them", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2083", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state is traversed by the fewest rivers", "source": "state that the least number of river traverses", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string traverse_river_state)) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_test_687", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest places", "source": "state that the least number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_931", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the capital of the greatest amount of states", "source": "city that is capital of the most number of state", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.city) (string !type)) (string max) (call reverse (string capital_state_city)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_187", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is located in two states", "source": "lake that is contained by two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1150", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake is contained by less than two states", "source": "lake that is contained by less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_522", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountain is found in at least two states", "source": "mountain that is contained by at least two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string >=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_121", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which two states have this place", "source": "place that is contained by two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2195", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is in more than two states", "source": "city that is contained by more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2133", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is contained in two states", "source": "city that is contained by two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_948", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which mountain is in more than two states", "source": "mountain that is contained by more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1508", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what river is only contained by one state", "source": "river that traverses less than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string <) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_739", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what lake spans more than two states", "source": "lake that is contained by more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_test_86", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is a river that spans more than two states", "source": "river that traverses more than two state", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string >) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_2932", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what mountain has the same elevation as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_test_586", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place has an elevation equal to death valley", "source": "place whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_1330", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same population as california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_1417", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which city shares the same population as sacramento", "source": "city whose population is population of sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.city.sacramento_ca (string population_city_count))))", "qid": "geo880_train_2156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what place has an elevation that is the same length as the colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_1824", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river length is the same as the elecation as mt whitney", "source": "river whose length is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_2678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state is the same size as lake tahoe", "source": "state whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_2912", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which city has the area of california", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_653", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city is the population of california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_778", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what state has an area that is the same as california", "source": "state whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string area_state_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_532", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the population of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_716", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total area of california", "source": "area of california", "target": "(call listValue (call getProperty fb:en.state.california (string area_state_length^2)))", "qid": "geo880_train_1762", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "size of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_2005", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the elevation of mount whitney", "source": "elevation of mount whitney", "target": "(call listValue (call getProperty fb:en.mountain.whitney (string elevation_mountain_length)))", "qid": "geo880_test_246", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how high up is death vallety", "source": "elevation of death valley", "target": "(call listValue (call getProperty fb:en.place.death_valley (string elevation_place_length)))", "qid": "geo880_train_2451", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "which city is the capital of the great state of california", "source": "capital of california", "target": "(call listValue (call getProperty fb:en.state.california (string capital_state_city)))", "qid": "geo880_train_748", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the total population of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_test_13", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the area of lake tahoe", "source": "area of lake tahoe", "target": "(call listValue (call getProperty fb:en.lake.tahoe (string area_lake_length^2)))", "qid": "geo880_test_734", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "californias capital city", "source": "capital of california", "target": "(call listValue (call getProperty fb:en.state.california (string capital_state_city)))", "qid": "geo880_train_1507", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the population of sacramento", "source": "population of sacramento", "target": "(call listValue (call getProperty fb:en.city.sacramento_ca (string population_city_count)))", "qid": "geo880_train_1725", "anonymized_target": "(call listValue (call getProperty fb:ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what lakes are considered major", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_test_253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which lake is the largest", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_train_1994", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "where is a major city", "source": "city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)))", "qid": "geo880_test_382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what are some major cities", "source": "city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)))", "qid": "geo880_train_1226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "can i see a list of capital cities", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_train_701", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what cities are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_test_493", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what cities are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_train_2547", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what cities are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_train_968", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "cities that are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_test_504", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is the name of a large lake", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_train_2409", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what lake is a major lake", "source": "lake that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string major_lake)))", "qid": "geo880_train_233", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "large capital cities", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2072", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what are all the major cities that are capitals", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_1275", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "largest capitals", "source": "city that is major and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (string capital_city)))", "qid": "geo880_train_962", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is the is also the state capital", "source": "city that is a capital and that is a capital", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string capital_city)))", "qid": "geo880_train_2680", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is a large capital city", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2170", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what capital city is also a major city", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_test_678", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what city is a major city and a capital", "source": "city that is a capital and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (string major_city)))", "qid": "geo880_train_2557", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which is a major lake", "source": "lake that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)) (string major_lake)))", "qid": "geo880_train_1152", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what river is a major river", "source": "river that is major and that is major", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)) (string major_river)))", "qid": "geo880_train_121", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what state has the most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_2530", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the least number of capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_2939", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the most capital", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_2693", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which state has the lowest number of capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_92", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "state with fewest capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_2321", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the greatest number of capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_test_644", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "state with most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_test_719", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the fewest capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_1142", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which state has the most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_632", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the least number of capital", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_1920", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what is the state capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_1801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state contains the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_256", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state has the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_test_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which state is the capital of california in", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_2373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_503", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the state capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_test_23", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the capital of california", "source": "state that capital of california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call getProperty fb:en.state.california (string capital_state_city))))", "qid": "geo880_train_2062", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake is not in ca", "source": "lake that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string !=) fb:en.state.california))", "qid": "geo880_train_779", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has as its capital sacramento", "source": "state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_test_612", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not have sacremento as a capital", "source": "state whose capital is not sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_2870", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "name a state that does not border california", "source": "state that not borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1600", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a river found in california", "source": "river that traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_989", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has sacramento for its capital", "source": "state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_702", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which mountains are in california", "source": "mountain that is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california))", "qid": "geo880_train_2263", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what rivers cross california", "source": "river that traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california))", "qid": "geo880_train_2371", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is not in california", "source": "city that not is contained by california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string !=) fb:en.state.california))", "qid": "geo880_test_442", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what river does not go through california", "source": "river that not traverses california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string !=) fb:en.state.california))", "qid": "geo880_train_1794", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a capital of sacramento and the colorado river going through them", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2418", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "state that has sacramento within it and borders california", "source": "state that borders california and that sacramento is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_993", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states contain death valley and border california", "source": "state that borders california and that death valley is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley))", "qid": "geo880_train_2256", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states have a capital of sacramento and mount whitney", "source": "state whose capital is sacramento and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_2521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has mount whitney", "source": "state that borders california and that mount whitney is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney))", "qid": "geo880_train_2715", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has sacramento as its capital and has lake tahoe in it", "source": "state whose capital is sacramento and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_620", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state borders california that has the colorado river in it", "source": "state that borders california and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_2837", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a capital of sacramento and passed by the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_test_476", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has lake tahoe in it", "source": "state that borders california and that lake tahoe is contained by", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_2175", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains both sacramento and the colorado river", "source": "state whose capital is sacramento and that colorado river traverses", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado))", "qid": "geo880_train_591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
