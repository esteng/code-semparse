{"paraphrased": "what neighborhood has restaurants that accept credit cards", "source": "neighborhood that is neighborhood of restaurant that takes credit cards", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit))))", "qid": "restaurants_train_475", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "meals at restaurants that have waiters", "source": "meal that restaurant that has waiter service serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string waiter))))", "qid": "restaurants_train_1074", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what types of cuisine are there at resturants with outdoor seating", "source": "cuisine that is cuisine of restaurant that has outdoor seating", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string outdoor))))", "qid": "restaurants_train_423", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what cuisine options are there among group friendly restaurants", "source": "cuisine that is cuisine of restaurant that is good for groups", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string groups))))", "qid": "restaurants_train_306", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what neighborhood has good a good kids restaurant", "source": "neighborhood that is neighborhood of restaurant that is good for kids", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string kids))))", "qid": "restaurants_test_194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the cuisine of restaurants that have outdoor seating", "source": "cuisine that is cuisine of restaurant that has outdoor seating", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string outdoor))))", "qid": "restaurants_test_218", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "cuisine that is cuisine of restaurant that takes credit cards", "source": "cuisine that is cuisine of restaurant that takes credit cards", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit))))", "qid": "restaurants_train_651", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what neighborhoods have restaurants which take reservations", "source": "neighborhood that is neighborhood of restaurant that takes reservations", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string reserve))))", "qid": "restaurants_test_329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what neighborhood contains restaurants that accept credit cards", "source": "neighborhood that is neighborhood of restaurant that takes credit cards", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit))))", "qid": "restaurants_train_763", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is a meal served by a restaurant that accepts credit cards", "source": "meal that restaurant that takes credit cards serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit))))", "qid": "restaurants_train_695", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what neighborhood is the thai cafe in", "source": "neighborhood that is neighborhood of thai cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_708", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what cuisine does the thai cafe not have", "source": "cuisine that is not cuisine of thai cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string !=) en.restaurant.thai_cafe))", "qid": "restaurants_train_342", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "neighborhood that is neighborhood of thai cafe", "source": "neighborhood that is neighborhood of thai cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_1156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what places serve food that is not thai", "source": "cuisine that is not cuisine of thai cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string !=) en.restaurant.thai_cafe))", "qid": "restaurants_train_614", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what meals dont the thai cafe serve", "source": "meal that thai cafe not serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string !=) en.restaurant.thai_cafe))", "qid": "restaurants_train_1239", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what are the neighborhoods without thai cafes", "source": "neighborhood that is not neighborhood of thai cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string !=) en.restaurant.thai_cafe))", "qid": "restaurants_test_59", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which neighborhood is not where that cafe is located", "source": "neighborhood that is not neighborhood of thai cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string !=) en.restaurant.thai_cafe))", "qid": "restaurants_train_463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "list all restaurants that are similar to thai cafe", "source": "cuisine that is cuisine of thai cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_test_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which neighborhoods is thai cafe not in", "source": "neighborhood that is not neighborhood of thai cafe", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string !=) en.restaurant.thai_cafe))", "qid": "restaurants_train_733", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what meal can you get at the thai cafe", "source": "meal that thai cafe serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_1111", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what 3 star rated restaurant takes credit cards", "source": "restaurant that takes credit cards and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_test_137", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3star restaurants that deliver", "source": "restaurant that has delivery and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string delivery)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_train_565", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what 2 dollar signs restaurant offers delivery", "source": "restaurant that has delivery and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string delivery)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_608", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurants with outdoor seating and a  price rating", "source": "restaurant that has outdoor seating and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string outdoor)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_471", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a restaurant that has at least a two star rating and does takeout", "source": "restaurant that has take-out and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string takeout)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_15", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurant that has delivery and whose price rating is 2 dollar signs", "source": "restaurant that has delivery and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string delivery)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_266", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "hotel that can be booked in advance which has a price rating of 2 dollar signs", "source": "restaurant that takes reservations and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string reserve)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_209", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which restaurant has a three star rating and also takes reservations", "source": "restaurant that takes reservations and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string reserve)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_train_366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "group friendly restaurants rated 3 stars", "source": "restaurant that is good for groups and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string groups)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_train_1167", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which restaurants with a 2 dollar price rating offer takeout", "source": "restaurant that has take-out and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string takeout)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_519", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what restaurant has the largest menu", "source": "restaurant that serves the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string max) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_train_311", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which restaurants serve the least number of meals", "source": "restaurant that serves the least number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_train_552", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "hotel that serves the minimum number of meals", "source": "restaurant that serves the least number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_train_61", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "restaurants with the most options", "source": "restaurant that serves the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string max) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_train_1028", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "restaurants that are better for takeout", "source": "restaurant that serves the least number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_train_1253", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which hotel offers the most number of meals", "source": "restaurant that serves the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string max) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_test_14", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "a restaurant with alot of meals", "source": "restaurant that serves the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string max) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_train_660", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what restaurant has the smallest menu", "source": "restaurant that serves the least number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_test_281", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which resturants serve the least number of meals", "source": "restaurant that serves the least number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string min) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_train_119", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what restaurant serves the most meals", "source": "restaurant that serves the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.restaurant) (string !type)) (string max) (string meals) (call getProperty (call singleton en.food) (string !type))))", "qid": "restaurants_train_65", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a thai restaurant", "source": "restaurant whose cuisine is thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai))", "qid": "restaurants_train_351", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what are some thai restaurants", "source": "restaurant whose cuisine is thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai))", "qid": "restaurants_test_42", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what restaurant offers lunch", "source": "restaurant that serves lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch))", "qid": "restaurants_train_1045", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which restaurant offers lunch", "source": "restaurant that serves lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) en.food.lunch))", "qid": "restaurants_train_797", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what are some restaurants serving any cuisine except thai", "source": "restaurant whose cuisine is not thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string !=) en.cuisine.thai))", "qid": "restaurants_train_666", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "restaurant in the midtown west area", "source": "restaurant whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "restaurants_train_1224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a thai restaurant", "source": "restaurant whose cuisine is thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) en.cuisine.thai))", "qid": "restaurants_train_1312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which restaurant is located in midtown west", "source": "restaurant whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "restaurants_train_1040", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what are some restaurants that doesnt serve thai", "source": "restaurant whose cuisine is not thai", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string !=) en.cuisine.thai))", "qid": "restaurants_train_744", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "whats a resturant in midtown west", "source": "restaurant whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "restaurants_test_79", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what restaurant offers an outdoot and takeout", "source": "restaurant that has outdoor seating and that has take-out", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string outdoor)) (string takeout)))", "qid": "restaurants_train_603", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "restaurants that deliver and have waiter service", "source": "restaurant that has delivery and that has waiter service", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string delivery)) (string waiter)))", "qid": "restaurants_train_160", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "restaurants with takeout that are group friendly", "source": "restaurant that has take-out and that is good for groups", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string takeout)) (string groups)))", "qid": "restaurants_train_1309", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which resturant takes reservations and has waiter service", "source": "restaurant that takes reservations and that has waiter service", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string reserve)) (string waiter)))", "qid": "restaurants_train_798", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what restauarants are kid friendly and have takeout", "source": "restaurant that has take-out and that is good for kids", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string takeout)) (string kids)))", "qid": "restaurants_train_833", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what restaurant is good for kids and groups", "source": "restaurant that is good for kids and that is good for groups", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string kids)) (string groups)))", "qid": "restaurants_train_585", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what restaurant offers delivery and an outdoor seating", "source": "restaurant that has outdoor seating and that has delivery", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string outdoor)) (string delivery)))", "qid": "restaurants_train_939", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which restaurants deliver and have waiters", "source": "restaurant that has waiter service and that has delivery", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string waiter)) (string delivery)))", "qid": "restaurants_test_271", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "restaurant that takes reservations and that takes credit cards", "source": "restaurant that takes reservations and that takes credit cards", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string reserve)) (string credit)))", "qid": "restaurants_train_1205", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which restaurants accept credit cards for payment and also have takeout service", "source": "restaurant that takes credit cards and that has take-out", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string credit)) (string takeout)))", "qid": "restaurants_train_723", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "restaurant that is open for lunch and dinner", "source": "restaurant that serves lunch or dinner", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) (call concat en.food.lunch en.food.dinner)))", "qid": "restaurants_train_998", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "list all thai or italian restaurants", "source": "restaurant whose cuisine is thai or italian", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) (call concat en.cuisine.thai en.cuisine.italian)))", "qid": "restaurants_train_492", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "restaurants that serve lunch or dinner", "source": "restaurant that serves lunch or dinner", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) (call concat en.food.lunch en.food.dinner)))", "qid": "restaurants_test_117", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "hotel with a thai or italian restaurant", "source": "restaurant whose cuisine is thai or italian", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) (call concat en.cuisine.thai en.cuisine.italian)))", "qid": "restaurants_train_74", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "thai or italian restaurants", "source": "restaurant whose cuisine is thai or italian", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) (call concat en.cuisine.thai en.cuisine.italian)))", "qid": "restaurants_train_909", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what restaurant is good for lunch or dinner", "source": "restaurant that serves lunch or dinner", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) (call concat en.food.lunch en.food.dinner)))", "qid": "restaurants_train_1000", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "restaurant that serves lunch or dinner", "source": "restaurant that serves lunch or dinner", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) (call concat en.food.lunch en.food.dinner)))", "qid": "restaurants_train_753", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "restaurant whose neighborhood is midtown west or chelsea", "source": "restaurant whose neighborhood is midtown west or chelsea", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string neighborhood) (string =) (call concat en.neighborhood.midtown_west en.neighborhood.chelsea)))", "qid": "restaurants_test_193", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find a thai or italian restaurant", "source": "restaurant whose cuisine is thai or italian", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string cuisine) (string =) (call concat en.cuisine.thai en.cuisine.italian)))", "qid": "restaurants_train_622", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which restaurants serve lunch or dinner", "source": "restaurant that serves lunch or dinner", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string meals) (string =) (call concat en.food.lunch en.food.dinner)))", "qid": "restaurants_train_879", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which cuisines match that of the thai cafe", "source": "cuisine that is cuisine of thai cafe and that is cuisine of thai cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) en.restaurant.thai_cafe) (call reverse (string cuisine)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_94", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "neighborhood that is neighborhood of thai cafe and that is neighborhood of thai cafe", "source": "neighborhood that is neighborhood of thai cafe and that is neighborhood of thai cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.restaurant.thai_cafe) (call reverse (string neighborhood)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_429", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a thai cafe in the neighborhood", "source": "neighborhood that is neighborhood of thai cafe and that is neighborhood of thai cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.restaurant.thai_cafe) (call reverse (string neighborhood)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_960", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what meals do the thai cafe serve", "source": "meal that thai cafe serves and that thai cafe serves", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) en.restaurant.thai_cafe) (call reverse (string meals)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_test_131", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "cuisine that is cuisine of thai cafe and that is cuisine of thai cafe", "source": "cuisine that is cuisine of thai cafe and that is cuisine of thai cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) en.restaurant.thai_cafe) (call reverse (string cuisine)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_218", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what meals does thai cafe serve", "source": "meal that thai cafe serves and that thai cafe serves", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) en.restaurant.thai_cafe) (call reverse (string meals)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_617", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what type of dishes does the thai cafe offer", "source": "cuisine that is cuisine of thai cafe and that is cuisine of thai cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) en.restaurant.thai_cafe) (call reverse (string cuisine)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_test_212", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what kind of cuisine is thai cafe", "source": "cuisine that is cuisine of thai cafe and that is cuisine of thai cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) en.restaurant.thai_cafe) (call reverse (string cuisine)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_test_15", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "in which neighborhood is thai cafe", "source": "neighborhood that is neighborhood of thai cafe and that is neighborhood of thai cafe", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.restaurant.thai_cafe) (call reverse (string neighborhood)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_777", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is a meal served at the thai cafe", "source": "meal that thai cafe serves and that thai cafe serves", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) en.restaurant.thai_cafe) (call reverse (string meals)) (string =) en.restaurant.thai_cafe))", "qid": "restaurants_train_450", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which restaurants have price ratings of two dollar signs and star ratings of three stars", "source": "restaurant whose price rating is 2 dollar signs and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_test_307", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurant whose star rating is 3 stars and whose price rating is 2 dollar signs", "source": "restaurant whose star rating is 3 stars and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_542", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "hotel that has a price rating of 2 dollar signs and a 3 star rating", "source": "restaurant whose price rating is 2 dollar signs and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_train_769", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what 3 star rated restaurant has a price rating of 2 dollar signs", "source": "restaurant whose star rating is 3 stars and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_135", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what 3 star restaurants have a price rating of 2 dollar signs", "source": "restaurant whose price rating is 2 dollar signs and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_train_1148", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what restaurant has 3 stars and has a 2 menu", "source": "restaurant whose star rating is 3 stars and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_125", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a three star restaurant thats mid priced", "source": "restaurant whose star rating is 3 stars and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_1147", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurant that has 3 stars rating", "source": "restaurant whose star rating is 3 stars and whose star rating is 3 stars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star)) (string star_rating) (string =) (number 3 en.star)))", "qid": "restaurants_test_305", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "restaurants with 2 dollar sign rating", "source": "restaurant whose price rating is 2 dollar signs and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_462", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what restaurant has a price rating of 2 dollar signs", "source": "restaurant whose price rating is 2 dollar signs and whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign)) (string price_rating) (string =) (number 2 en.dollar_sign)))", "qid": "restaurants_train_866", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "cuisine that is cuisine of restaurant whose star rating is 3 stars", "source": "cuisine that is cuisine of restaurant whose star rating is 3 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))", "qid": "restaurants_train_1068", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what kind of meal do 3 star restaurants serve", "source": "meal that restaurant whose star rating is 3 stars serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))", "qid": "restaurants_train_190", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "name a meal served in a restaurant with a price rating of two dollar signs", "source": "meal that restaurant whose price rating is 2 dollar signs serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))", "qid": "restaurants_train_1172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "list 3 star restaurants by neighborhood", "source": "neighborhood that is neighborhood of restaurant whose star rating is 3 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))", "qid": "restaurants_train_851", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what meal does the restaurant with a 2 dollar price rating serve", "source": "meal that restaurant whose price rating is 2 dollar signs serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))", "qid": "restaurants_train_185", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what cuisine does a 2 dollar sign price rating restaurant have", "source": "cuisine that is cuisine of restaurant whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))", "qid": "restaurants_train_1131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "restaurant in the area that has a 2 dollar sign price rating", "source": "neighborhood that is neighborhood of restaurant whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))", "qid": "restaurants_train_38", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what neighborhoods have the most 3 star rated restaurants", "source": "neighborhood that is neighborhood of restaurant whose star rating is 3 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))", "qid": "restaurants_train_963", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "a thai restaurant with medium pricing", "source": "cuisine that is cuisine of restaurant whose price rating is 2 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.cuisine) (string !type)) (call reverse (string cuisine)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string price_rating) (string =) (number 2 en.dollar_sign))))", "qid": "restaurants_train_1279", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is a meal served at a threestar rated restaurant", "source": "meal that restaurant whose star rating is 3 stars serves", "target": "(call listValue (call filter (call getProperty (call singleton en.food) (string !type)) (call reverse (string meals)) (string =) (call filter (call getProperty (call singleton en.restaurant) (string !type)) (string star_rating) (string =) (number 3 en.star))))", "qid": "restaurants_train_604", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "list all restaurants that are cheaper than 2 dollar signs or 3 star dollar signs", "source": "restaurant whose price rating is smaller than 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string <) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurants with price ratings between 2 and 3", "source": "restaurant whose price rating is at least 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string >=) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_train_1133", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which restaurants are rated under 3 stars", "source": "restaurant whose star rating is at most 3 stars or 5 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <=) (call ensureNumericEntity (call concat (number 3 en.star) (number 5 en.star)))))", "qid": "restaurants_train_775", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what restaurant has 3 or 2 menu items", "source": "restaurant whose price rating is at most 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string <=) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_train_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurant whose price rating is larger than 2 dollar signs or 3 dollar signs", "source": "restaurant whose price rating is larger than 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string >) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_train_481", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "list restaurants that are at or less than 2 or 3 dollar signs", "source": "restaurant whose price rating is at most 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string <=) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_train_1221", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurant whose star rating is at least 3 stars or 5 stars", "source": "restaurant whose star rating is at least 3 stars or 5 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string >=) (call ensureNumericEntity (call concat (number 3 en.star) (number 5 en.star)))))", "qid": "restaurants_train_255", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurant with 1 dollar sign", "source": "restaurant whose price rating is smaller than 2 dollar signs or 3 dollar signs", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string price_rating)) (string <) (call ensureNumericEntity (call concat (number 2 en.dollar_sign) (number 3 en.dollar_sign)))))", "qid": "restaurants_test_280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurant whose star rating is at most 3 stars or 5 stars", "source": "restaurant whose star rating is at most 3 stars or 5 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <=) (call ensureNumericEntity (call concat (number 3 en.star) (number 5 en.star)))))", "qid": "restaurants_train_1173", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "restaurant whose star rating is smaller than 3 stars or 5 stars", "source": "restaurant whose star rating is smaller than 3 stars or 5 stars", "target": "(call listValue (call filter (call getProperty (call singleton en.restaurant) (string !type)) (call ensureNumericProperty (string star_rating)) (string <) (call ensureNumericEntity (call concat (number 3 en.star) (number 5 en.star)))))", "qid": "restaurants_train_1204", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
