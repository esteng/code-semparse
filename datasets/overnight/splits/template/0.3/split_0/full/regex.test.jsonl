{"paraphrased": "words that uses abc and begins with a character", "source": "word that contains `` abc '' and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3843", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with a character at the end", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_699", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses letters and begins with a capital letter", "source": "word that contains letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_911", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and begins with abc", "source": "word that contains capital letter and that starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5451", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with any uppercase letter", "source": "word that contains capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6205", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that has a capital letter and uses abc at the end", "source": "word that contains capital letter and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1276", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that ends with character", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1010", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a character and begin with a letter", "source": "word that contains character and that starts with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1419", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that contains a character and also ends with one", "source": "number that contains character and that ends with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1443", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes a character and has a vowel at the end", "source": "word that contains character and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_414", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that contains a digit and ends with a vowel", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_850", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that includes a number after a small letter", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_187", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  abc  after digit", "source": "line that ends with `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string abc))))", "qid": "regex_train_4409", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what shows a digit before ending with a vowel", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_test_71", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has 123 at the end before a number", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_3106", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a lowercase letter followed by a digit", "source": "line that ends with lowercase letter before digit", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_6338", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with  123  before digit", "source": "line that ends with `` 123 '' before digit", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_2705", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that ends with any character after a digit", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_train_2319", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that stops with a vowel after any digits", "source": "line that ends with vowel after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_4769", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with a digit followed by a character", "source": "line that ends with character after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))))", "qid": "regex_test_892", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with character and that starts with the word  abc ", "source": "line that ends with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with 123 and abc", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5353", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has a small letter at the end and abc in the beginning", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4344", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in the beginning and 123 at the end", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_417", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that terminate in a sequence of 123 and begin with the letter sequence abc", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3753", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that starts with the word  abc ", "source": "line that ends with capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_983", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with  123  and that starts with the word  abc ", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_939", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with a capital letter and that begins with the word abc", "source": "line that ends with capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4233", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "the word abc is the beginning of a line that finishes with a char", "source": "line that ends with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2589", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line beginning with abc and ending with 123", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2789", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what is a line that ends in a character and also ends with the word abc", "source": "line that ends with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_205", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with any letters but ends with the word abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_6258", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a letter and ends with word abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with vowels and stops with abc", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_767", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what lines start with a vowel and end with the word abc", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_6222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which line starts with 123 and ends with abc", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1909", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line with a capital start and exactly abc for the end", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3000", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line commences wsmall letter and concludes wabc word", "source": "line that starts with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1256", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with a lowercase letter as well as the word abc", "source": "line that ends with lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2832", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins with a character and stops after abc", "source": "line that starts with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3492", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "words that have a letter or a digit", "source": "word that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1001", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that includes letter or digit", "source": "number that contains letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1697", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have either a vowel or a digit", "source": "number that contains vowel or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2034", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers with 123 andor other digits", "source": "number that contains `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3288", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character or digit", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_748", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "any word containing lowercase letters or digits", "source": "word that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1291", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses capital letters or digits", "source": "number that contains capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1336", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that contains a character or a digit", "source": "word that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_308", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that uses either a lowercase letter or a digit", "source": "number that contains lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1929", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters or digits", "source": "number that contains character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2903", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers whose final character is not a vowel", "source": "number that not ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1832", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which words do not begin with 123", "source": "word that not starts with `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string 123) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6120", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "which numbers dont end with capital letters", "source": "number that not ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [A-Z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that doesnt end with abc", "source": "word that not ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string abc)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5862", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with lowercase letter", "source": "number that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1823", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not begin with abc", "source": "number that not starts with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string abc) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_479", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not begin with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_117", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "digit that does not start with a capital letter", "source": "number that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2886", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that is finished with a capital letter", "source": "word that not ends with lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (string [a-z])) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2734", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not begin with a capital letter", "source": "word that not starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string [A-Z]) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1835", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains lowercase letter", "source": "line that ends with the word `` abc '' and that contains lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_811", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that finishes with the word abc and has a capital letter", "source": "line that ends with the word `` abc '' and that contains capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_3824", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "state a line containing a vowel and ending with the word abc", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_807", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that contains vowel", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_147", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that has a letter within it and terminates with the word abc", "source": "line that ends with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_67", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with the word abc and that contains a letter", "source": "line that ends with the word `` abc '' and that contains letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_train_4878", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line has 123 and puts abc at the end", "source": "line that ends with the word `` abc '' and that contains `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\"))", "qid": "regex_test_1453", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that contains a character and ends with the word abc", "source": "line that ends with the word `` abc '' and that contains character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\"))", "qid": "regex_train_6109", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line has a vowel and stops with abc", "source": "line that ends with the word `` abc '' and that contains vowel", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\"))", "qid": "regex_train_2062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line ends with abc", "source": "line that ends with the word `` abc '' and that contains `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_175", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with and contains the word abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3271", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both starts with abc and contains abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1269", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the expression abc and that has the saying abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3496", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with and containing the word abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_330", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains the word  abc ", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3990", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line ending with the sequence 123 followed by a character", "source": "line that ends with character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))))", "qid": "regex_train_4476", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line with that ends with 123123", "source": "line that ends with `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))))", "qid": "regex_train_1555", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "what line starts with a digit before abc", "source": "line that ends with the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_670", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that terminates with the word abc followed by a digit", "source": "line that ends with the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))))", "qid": "regex_train_5148", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with 123 followed by a capital letter", "source": "line that ends with capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_4988", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with 123 followed by a lowercase letter", "source": "line that ends with lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_663", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with 123 followed by a character", "source": "line that ends with character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))))", "qid": "regex_train_5605", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ends with a letter after 123", "source": "line that ends with letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_1080", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with 123 then a vowel", "source": "line that ends with vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_4038", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with the number 123 followed by a lowercase letter", "source": "line that ends with lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_1732", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "character before the number  123 ", "source": "character before the number `` 123 ''", "target": "(call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_3716", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "abc followed by 123", "source": "`` abc '' before the number `` 123 ''", "target": "(call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_5516", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "letter before the number  123 ", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_298", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the number 123 preceded by a vowel", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_1100", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "123 preceded by a capital letter", "source": "capital letter before the number `` 123 ''", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2274", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "abc the word comes after a digit", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2840", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a letter followed by the number 123", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1048", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "character preceding 123", "source": "character before the number `` 123 ''", "target": "(call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_650", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "uses a vowel before the number 123", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_364", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "123 with a letter before it", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_337", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "word that ends with character or digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_341", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that terminate in lower cases letters or a digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3296", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers with a digit or lowercase letter at their end", "source": "number that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1549", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number ends with a number or a capital letter", "source": "number that ends with capital letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6058", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter or digit", "source": "word that ends with lowercase letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2113", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with character or digit", "source": "word that ends with character or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string .) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_223", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with a letter or a digit", "source": "number that ends with letter or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6257", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word ending either with abc or a number", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5458", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with  abc  or digit", "source": "word that ends with `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string .*) (call + (string \"(\") (string abc) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either 123 or a digit", "source": "number that ends with `` 123 '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (string 123) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3998", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a line that includes the word abc followed by the number 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_1063", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has the word abc before 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3633", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that has a word abc after 123", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_199", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line containing the word abc followed by the number 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3606", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line where there number 123 came after the word abc", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1352", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that include the number 123 and ends with abc", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_256", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "a line that includes the word abc preceded by the number 123", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_640", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "lines that uses abc before 123", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_3470", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  before the number  123 ", "source": "line that contains the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_train_1817", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that contains the word  abc  after the number  123 ", "source": "line that contains the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))) (string .*))", "qid": "regex_test_739", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))) (ANON_STRING))"}
{"paraphrased": "line that includes the digit 123 before the vowel", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_3693", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel after the number  123 ", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_test_431", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with a capital letter following the series 123", "source": "line that contains capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_354", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line containing the word abc followed by a number", "source": "line that contains the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_5323", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that includes 123 preceded by the number 123", "source": "line that contains `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_3122", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line containing the number 123 followed by a lowercase letter", "source": "line that contains lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_984", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that contains vowel after the number  123 ", "source": "line that contains vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_2786", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that has a special character after the number 123", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_4586", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line utilizing the sequence 123 followed by any letter", "source": "line that contains letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_train_3948", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line with 123 followed by any character", "source": "line that contains character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))) (string .*))", "qid": "regex_train_5478", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that uses and ends with the word abc", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2687", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which line contains abc and and also ends with abc", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_335", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with the word  abc ", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2822", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with the word  abc ", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1953", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that have the smaller word abc and finish with the word abc", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2377", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": " abc  after the number  123 ", "source": "`` abc '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string abc)))", "qid": "regex_train_4078", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "after 123 include a capital letter", "source": "capital letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_4359", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " 123  after the number  123 ", "source": "`` 123 '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123)))", "qid": "regex_train_932", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the number 123 followed by a character", "source": "character after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .)))", "qid": "regex_train_1", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "just before digit there is the word abc", "source": "the word `` abc '' before digit", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9])))", "qid": "regex_train_1746", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "vowel after the number  123 ", "source": "vowel after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_3338", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " 123  after the number  123 ", "source": "`` 123 '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123)))", "qid": "regex_train_1429", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter after the number  123 ", "source": "lowercase letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_2145", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a letter that appears after the digit 123", "source": "letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_1323", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letters after 123", "source": "capital letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_3160", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lines that do not have the digits 123 within them", "source": "line that not contains `` 123 ''", "target": "(call + (string \"~(\") (call + (string .*) (string 123) (string .*)) (string \")\"))", "qid": "regex_train_5156", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not contain a vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_4738", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not include any capital letters", "source": "line that not contains capital letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Z]) (string .*)) (string \")\"))", "qid": "regex_test_360", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not include a character", "source": "line that not contains character", "target": "(call + (string \"~(\") (call + (string .*) (string .) (string .*)) (string \")\"))", "qid": "regex_train_5120", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line not containing any lowercase letters", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not include a small letter", "source": "line that not contains lowercase letter", "target": "(call + (string \"~(\") (call + (string .*) (string [a-z]) (string .*)) (string \")\"))", "qid": "regex_train_5102", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not contains vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_test_738", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what line does not contain a vowel", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_test_55", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines without any vowels at all", "source": "line that not contains vowel", "target": "(call + (string \"~(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")\"))", "qid": "regex_train_1748", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not include a letter", "source": "line that not contains letter", "target": "(call + (string \"~(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")\"))", "qid": "regex_train_3062", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that has the word abc", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2820", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that contains the word  abc ", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4005", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what line contains   abc ", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4061", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that includes the word abc and that includes the word abc", "source": "line that contains the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4054", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "what word has both a lowercase letter and a vowel in it", "source": "word that contains lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4480", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word including both a vowel and a lowercase letter", "source": "word that contains lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1034", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that includes abc as well as a vowel", "source": "word that contains `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4082", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  and that contains character", "source": "number that contains `` 123 '' and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1335", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains lowercase letter and that contains character", "source": "word that contains lowercase letter and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4841", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that utilize both abc and a capital letter", "source": "word that contains `` abc '' and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5234", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using a character and using 123", "source": "number that contains character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6263", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses characters", "source": "number that contains character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters", "source": "word that contains capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_421", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses capital letters and uses lowercase letters", "source": "word that contains capital letter and that contains lowercase letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [a-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4142", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines ending with abc that also include letters", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3790", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that ends with the word  abc ", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3592", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line with abc in the ending plus the start or middle", "source": "line that contains `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5285", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that is ended by abc in lowercase", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_745", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line with a vowel and ending with word abc", "source": "line that contains vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4909", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with the word  abc ", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2236", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line has a letter in it and also ends in the word abc", "source": "line that contains letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_684", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains capital letter and that ends with the word  abc ", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_854", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines with capital letters and end with abc", "source": "line that contains capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1846", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains lowercase letter and that ends with the word  abc ", "source": "line that contains lowercase letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_67", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with capital letter or the number  123 ", "source": "line that starts with capital letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5390", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line beginning with either a character or the number 123", "source": "line that starts with character or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5545", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that begins with either a vowel or the number 123", "source": "line that starts with vowel or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4732", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with teh smaller word abc or the number sequence 123", "source": "line that starts with `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_115", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with a letter or the number 123", "source": "line that starts with letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3007", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that has abc or the digit 123 as its beginning", "source": "line that starts with `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_967", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line beginning with either a capital letter or 123", "source": "line that starts with capital letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_776", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line begins with abc or 123", "source": "line that starts with `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_12", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line starts either with 123 or some capital letter", "source": "line that starts with capital letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1441", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what line starts with vowel or the number 123", "source": "line that starts with vowel or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_2910", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "word that ends with any uppercase letter but begins with any character", "source": "word that ends with capital letter and that starts with character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1160", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that ends with a lowercase letter", "source": "word that ends with lowercase letter and that ends with letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5931", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ending with abc", "source": "word that ends with `` abc '' and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6236", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that both start and end with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1990", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word beginning with a capital letter and ending with a lowercase letter", "source": "word that ends with lowercase letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2967", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word ends with capital vowel", "source": "word that ends with vowel and that ends with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2756", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with a character and the word abc", "source": "word that ends with character and that ends with `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_158", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that ends with lowercase letter and that ends with vowel", "source": "word that ends with lowercase letter and that ends with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1840", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words ending and starting with a capital letter", "source": "word that ends with capital letter and that starts with capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_966", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that stops with a capital letter and begins with a vowel", "source": "word that ends with capital letter and that starts with vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4635", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that do not start with the phase abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_3724", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not begin with abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_154", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that does not begin with the word abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_5333", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that isnt begun with abc", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_1026", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that not starts with the word  abc ", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_train_1779", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that does not have abc as its beginning", "source": "line that not starts with the word `` abc ''", "target": "(call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\"))", "qid": "regex_test_1485", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\"))"}
{"paraphrased": "line that includes a character or the number 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4439", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains vowel or the number  123 ", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_2224", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains either a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1141", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that includes a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5143", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line using either a character of 123", "source": "line that contains character or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1946", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line contains 123", "source": "line that contains `` 123 '' or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_2229", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that utilizes either a vowel or the number 123", "source": "line that contains vowel or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_4807", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that contains either a letter or the number 123", "source": "line that contains letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_159", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that contains either a capital letter or the number 123", "source": "line that contains capital letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_36", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that include lowercase letters or the number sequence 123", "source": "line that contains lowercase letter or the number `` 123 ''", "target": "(call + (string .*) (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1028", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "numbers that terminate with the smaller word abc or a digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_842", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that ends with the word abc or any digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3111", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with abc or any digit at the end", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3714", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending with either abc or digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that concludes with the word abc or a digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that ends with the word  abc  or digit", "source": "number that ends with the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\"))) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1351", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\"))) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "either the word abc or th number 123", "source": "the word `` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_805", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "the number 123 or the word abc", "source": "the word `` abc '' or the number `` 123 ''", "target": "(call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_6037", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "what is a line that has the word abc in it and also begins with the word abc", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4451", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with the word  abc ", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4619", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that contains and starts with the word abc", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3174", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line where abc appears at both the beginning and again later", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3464", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line with abc at the beginning", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2316", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that not only contain the word abc but also start with the word", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2066", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that starts with the word  abc ", "source": "line that contains the word `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2624", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
