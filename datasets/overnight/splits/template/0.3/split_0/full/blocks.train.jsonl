{"paraphrased": "find me all blocks that above and below block 1", "source": "block that block 1 is above and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_66", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that has block 1 in the right and left", "source": "block that block 1 is left of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_72", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is below", "source": "block that block 1 is below and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_90", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is below and above", "source": "block that block 1 is below and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_102", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is left and right of block 1", "source": "block that block 1 is left of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_121", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is below and right of", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is block 1 below and to the left of", "source": "block that block 1 is below and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_201", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block in block 1", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_312", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that block 1 is right of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_330", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is below block 1", "source": "block that block 1 is below and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_359", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right and below block 1", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_429", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the blocks to the right and left of block 1 ", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_445", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right and below block 1", "source": "block that block 1 is above and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_508", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "above and left of block 1", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_636", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that block 1 is to the left of and above", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_646", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is above and to the left of block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_670", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above the right", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_685", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that block 1 is above and to the left of", "source": "block that block 1 is above and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_705", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the left of the block that is to the right of block 1", "source": "block that block 1 is left of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_734", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is to the left and below", "source": "block that block 1 is left of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_862", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block on the left side of block 1", "source": "block that block 1 is right of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_880", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block to the right of block 1 and above it", "source": "block that block 1 is left of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_924", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block below and left from block 1", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_933", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block under and to the right of block 1", "source": "block that block 1 is above and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_965", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and under", "source": "block that block 1 is left of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_980", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the left of block 1", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1007", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the left and below block 1", "source": "block that block 1 is right of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1025", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right of block 1", "source": "block that block 1 is left of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1079", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above 1 block and left of 1 block", "source": "block that block 1 is above and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1082", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above and to the left of block 1", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1100", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block below the one on the right", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1194", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks left of and above block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1216", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is one to the left of another block", "source": "block that block 1 is left of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1217", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above block 1 and on the left side", "source": "block that block 1 is right of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1222", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks below and to the left of block 1", "source": "block that block 1 is below and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1232", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find blocks to the left and above block 1", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1239", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is below and above", "source": "block that block 1 is below and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1282", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and right of", "source": "block that block 1 is left of and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1299", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is above block 1 ", "source": "block that block 1 is above and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1321", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "below and left of block 1", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1358", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block left and above block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1385", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is block one above and to the right of", "source": "block that block 1 is above and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1468", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block aboe and left of block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1482", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block which has block 1 at left and above", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1531", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above 1 block and below 1 block", "source": "block that block 1 is above and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_62", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block at the right of block 1", "source": "block that block 1 is left of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_75", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks 1 is right and above", "source": "block that block 1 is right of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_122", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is right and left of", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_142", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right of and above block 1", "source": "block that block 1 is below and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_221", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is above block 1", "source": "block that block 1 is above and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_244", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the right of block 1", "source": "block that block 1 is right of and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_321", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and above of", "source": "block that block 1 is left of and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_348", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and left from block 1", "source": "block that block 1 is below and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_365", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks right and below block 1", "source": "block that block 1 is right of and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_370", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 below and to the left", "source": "block that block 1 is below and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_379", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the special 3 inch tall block", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_202", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me a special 3 inch long block", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_347", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find the 3 inch wide special block", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which special brick is 3 inches wide", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_525", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what brick is both unique and 3 inches", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_600", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "the unique 3 inch wide block", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_901", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find the special block that is 3 inches", "source": "block whose width is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_917", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me all 3 inch tall special blocks", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_1225", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what special blocks have a length of 3 inches", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_1248", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which special block is 3 inches high", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_train_1329", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me all the 3 inch long special blocks", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_test_86", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "block whose length is 3 inches and that is special", "source": "block whose length is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_test_124", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "a special 3 inch high block", "source": "block whose height is 3 inches and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string is_special)))", "qid": "blocks_test_146", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "left of special block", "source": "block that block that is special is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_23", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block above special block", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_50", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that are special", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me a block that has a special block to its right", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_336", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "block below special block", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_393", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which is the block to the right of special block", "source": "block that block that is special is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_415", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks left of something", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_650", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the block above special block", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_672", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "right of special block", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1088", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks that are above", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1215", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks that is below", "source": "block that block that is special is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_train_1227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "below special block", "source": "block that block that is special is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_5", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the block on the left side of the special block", "source": "block that block that is special is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all special blocks right of something", "source": "block that block that is special is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special))))", "qid": "blocks_test_342", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "are there any blocks whose height is that of either 3 inches or 6 inches at most", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_42", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "a brick which length is between 3 and 6 inches", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me a block at least 3 inches wide", "source": "block whose width is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_140", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me a block smaller than 6 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which block has a width of less than 3 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find those blocks with lengths that exceed either 3 or 6 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_175", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block at least 3 inches long", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_214", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block at least 3 inches wide", "source": "block whose width is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is no wider than 3 or 6 inches", "source": "block whose width is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_218", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks as wider than 3 inches", "source": "block whose width is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_228", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is no higher than 3 or 6 inches", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_234", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is higher than 3 or 6 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find blocks that are at least 3 inches wide or 6 inches wide", "source": "block whose width is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block shorter than 6 inches", "source": "block whose height is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_368", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block taller than 3 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_372", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick has a length smaller than 3 or 6 inches", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me a block at most 6 inches wide", "source": "block whose width is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_453", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks whose width is smaller than 6 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_475", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what block is 3 inches or taller", "source": "block whose height is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_489", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose width is smaller than 3 inches or 6 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_530", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is at most 3 or 6 inches long", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "choose a brick that is at least 3 inches wide", "source": "block whose width is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_603", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block 6 inches or shorter", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_628", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "select all blocks whose length at a maximum of 6 inches", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_711", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find the block with a height that does not surpass either 3 or 6 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_713", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks with a length longer than 3 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_776", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks at least 3 inch wide", "source": "block whose width is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_782", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "locate a block with a width that is more than either 3 or 6 inches", "source": "block whose width is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_789", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all the blocks at least 3 inches long", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_815", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "locate a block that is shorter than 3 inches or 6 inches", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_850", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find all blocks with height less than 6 inches", "source": "block whose height is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_869", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "select a block longer than 3 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_874", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "select bricks that are at least 3 inches high", "source": "block whose height is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_896", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "a brick between 3 and 6 inches", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_935", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block 6 inches or less long", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_958", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which block is at least 3 or 6 inches long", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1049", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose height is at most 3 inches or 6 inches", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1063", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "is there a block with a width that equals 3 or 6 inches maximum", "source": "block whose width is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1066", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block 6 inches long or less", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1070", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose length is larger than 3 inches or 6 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1107", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all the blocks taller than 3 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1143", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose length is at least 3 inches or 6 inches", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "is there a block no wider than 3 or 6 inches", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "choose a block between 3 and 6 inches wide", "source": "block whose width is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1187", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all blocks at most 6 inches high", "source": "block whose height is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "select the bricks that are less than 6 inches tall then select the bricks that are less than 3 inches tall", "source": "block whose height is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block that is at least 3 to 6 inches", "source": "block whose length is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1242", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose length is at most either 3 inches or 6 inches", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1350", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "choose a block that is taller than 3 or 6 inches", "source": "block whose height is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_train_1567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find the block with maximum length of 6 inches", "source": "block whose length is at most 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what blocks length is greater than 3 to 6 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_230", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find blocks that are at least 3 inches high or 6 inches high", "source": "block whose height is at least 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_260", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which brick is longer than 3 or 6 inches", "source": "block whose length is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_276", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which block is wider than 3 or 6 inches", "source": "block whose width is larger than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_326", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "block whose length is smaller than 3 inches or 6 inches", "source": "block whose length is smaller than 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call concat (number 3 en.inch) (number 6 en.inch)))))", "qid": "blocks_test_352", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find a block that is above block 1", "source": "block that block that is above block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_10", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the right and below block 1", "source": "block that block that is right of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_16", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select all blocks that are in the shape of a pyramid", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_74", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2nd block right of block 1", "source": "block that block that is right of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_222", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above pyramid blocks", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "left of block below block 1", "source": "block that block that is below block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_287", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks below which block 1 is above", "source": "block that block that is below block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_311", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of pyramid blocks", "source": "block that block whose shape is a pyramid is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_316", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is left of the block that block 1 is to the right of", "source": "block that block that is left of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_352", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is above block 1", "source": "block that block that is above block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_362", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks below block 1", "source": "block that block that is below block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_483", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all pyramid blocks", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_513", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above pyramid block", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_555", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks below that block 1 is right of", "source": "block that block that is below block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_568", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks below that block 1 is left of", "source": "block that block that is below block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_691", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "get a block above any pyramid block", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_697", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is above and to the right of block 1", "source": "block that block that is above block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_701", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that is left of the block above block 1", "source": "block that block that is left of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_706", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block right of pyramid block", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_709", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block above the block to the right block 1", "source": "block that block that is left of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_761", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is above block 1", "source": "block that block that is above block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_775", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of a pyramidshaped block", "source": "block that block whose shape is a pyramid is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_818", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above and right of block 1", "source": "block that block that is right of block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_844", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the left of block 1", "source": "block that block that is left of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_855", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right and below block 1", "source": "block that block that is right of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_867", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that is on the right side of the block on the left side of block 1", "source": "block that block that is left of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_905", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what blocks are below block 1", "source": "block that block that is below block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_992", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is right of block 1", "source": "block that block that is right of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_998", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above a pyramid block", "source": "block that block whose shape is a pyramid is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1045", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the left of pyramid block", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1072", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above pyramid", "source": "block that block whose shape is a pyramid is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1094", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two right from block 1", "source": "block that block that is right of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1125", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block left of pyramid", "source": "block that block whose shape is a pyramid is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two above block 1", "source": "block that block that is above block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1182", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks 2 below block 1", "source": "block that block that is below block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1183", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block to the left of the block above block 1", "source": "block that block that is above block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1211", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right and below block 1", "source": "block that block that is right of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1221", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the blocks that are to the left of block 1 ", "source": "block that block that is left of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the brick that is below and to the left of block 1", "source": "block that block that is below block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1241", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above block 1", "source": "block that block that is above block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1245", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "left of and below block 1", "source": "block that block that is below block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that block 1 is above and right of", "source": "block that block that is above block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1)))", "qid": "blocks_train_1302", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block one", "source": "block that block that is below block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_train_1312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block to the right of the block left of block 1", "source": "block that block that is right of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_train_1328", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the pyramidshaped blocks", "source": "block that block whose shape is a pyramid is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_train_1345", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above and right from block 1", "source": "block that block that is left of block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1389", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block left of block above block 1", "source": "block that block that is left of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_train_1397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left and above block 1", "source": "block that block that is left of block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_test_26", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is to the right of block 1", "source": "block that block that is right of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_39", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is below to the right of block 1 ", "source": "block that block that is right of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_91", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block with pyramid shape", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_102", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of which block 1 is below", "source": "block that block that is left of block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_test_155", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block whose shape is a pyramid", "source": "block that block whose shape is a pyramid is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_191", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of block 1", "source": "block that block that is left of block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1)))", "qid": "blocks_test_256", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that is right of the block that block 1 is to the left of", "source": "block that block that is right of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_289", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block has below it a block in the shape of a pyramid", "source": "block that block whose shape is a pyramid is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid)))", "qid": "blocks_test_310", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks at block 1", "source": "block that block that is right of block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1)))", "qid": "blocks_test_317", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is below the block that block 1 is above", "source": "block that block that is below block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is below and to the right of block 1", "source": "block that block that is below block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1)))", "qid": "blocks_test_380", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what pyramidshaped block is left of block 1", "source": "block whose shape is a pyramid and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "qid": "blocks_train_11", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramidshaped block is above block 1", "source": "block that is above block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_25", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a pyramid shaped block", "source": "block whose shape is a pyramid and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_65", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is left and below block 1", "source": "block that is left of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_141", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is on top of block 1", "source": "block that is above block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_185", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose block with pyramid shape under block 1", "source": "block whose shape is a pyramid and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string below) (string =) en.block.block1))", "qid": "blocks_train_207", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the blocks above block 1", "source": "block that is above block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_265", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_train_268", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks left and below block 1", "source": "block that is left of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_290", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is right of block 1 and that is right of block 1", "source": "block that is right of block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_294", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the left of block 1 whose shape is a pyramid", "source": "block that is left of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_324", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the right and above block 1", "source": "block that is right of block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_338", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is in the shape of a pyramid and is above block 1", "source": "block whose shape is a pyramid and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "qid": "blocks_train_369", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the right of block 1 whose shape is also a pyramid", "source": "block that is right of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_374", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block to the left of block 1", "source": "block that is left of block 1 and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_378", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is shaped like a pyramid", "source": "block whose shape is a pyramid and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_399", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks which is right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_train_436", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has the shape of a pyramid and is to the left of block 1", "source": "block whose shape is a pyramid and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "qid": "blocks_train_439", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "below and left of block 1", "source": "block that is left of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_455", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "get me a block below and above block 1", "source": "block that is below block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_485", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block around block 1", "source": "block that is right of block 1 and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_516", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is to the left and above block 1", "source": "block that is left of block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_569", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the left of block one", "source": "block that is left of block 1 and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_595", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "locate the pyramidshaped block", "source": "block whose shape is a pyramid and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_604", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "look below and right of block 1", "source": "block that is right of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_607", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below of which is above block 1", "source": "block that is below block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_631", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all pyramid blocks below block 1", "source": "block that is below block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_634", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid to right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_train_657", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose the block above block 1", "source": "block that is above block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_668", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that is left and right of block 1", "source": "block that is right of block 1 and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_671", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks that is right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_train_728", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which pyramid shaped block is to the right of block 1", "source": "block that is right of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_759", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid shaped block that is to the left of block 1", "source": "block that is left of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_779", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is in the shape of a pyramid and to the right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_train_806", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks that is left of block 1", "source": "block whose shape is a pyramid and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "qid": "blocks_train_845", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block to the right of block 1", "source": "block that is right of block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_888", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block on the right side of block 1", "source": "block that is right of block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_912", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and right from block 1", "source": "block that is above block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_940", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the blocks that are above and left to the block 1 ", "source": "block that is above block 1 and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_944", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks over and right of block 1", "source": "block that is above block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_948", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is in the shape of a pyramid and to the right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_train_977", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what blocks are both above and below block 1", "source": "block that is above block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_984", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the pyramidshaped block below block 1", "source": "block that is below block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_987", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "the block below block one and to the right of block 1", "source": "block that is right of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1006", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block on the left", "source": "block that is above block 1 and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1041", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks that are above and below block 1", "source": "block that is below block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1052", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks right of block 1", "source": "block that is right of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1080", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid shaped blocks", "source": "block whose shape is a pyramid and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1089", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which pyramid blocks are to the right of block 1", "source": "block that is right of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1124", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is underneath block 1", "source": "block that is below block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1141", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left and above block 1", "source": "block that is above block 1 and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1179", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block rght of block 1", "source": "block whose shape is a pyramid and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "qid": "blocks_train_1252", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find pyramid shaped block below block 1", "source": "block whose shape is a pyramid and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string below) (string =) en.block.block1))", "qid": "blocks_train_1263", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_train_1337", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the pyramidshape blocks above block 1", "source": "block whose shape is a pyramid and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "qid": "blocks_train_1339", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below and to the right of block 1", "source": "block that is below block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_1366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block rght of block 1", "source": "block that is right of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1371", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the pyramidshaped block that is left of block 1", "source": "block that is left of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1387", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what blocks are left of block 1", "source": "block that is left of block 1 and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1409", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find blocks above block 1 and below block 1 ", "source": "block that is above block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1440", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above on the left", "source": "block that is left of block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1489", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose shape is a pyramid and whose shape is a pyramid", "source": "block whose shape is a pyramid and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1492", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is under block 1", "source": "block that is below block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1501", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramidshaped block is to the right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_train_1509", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks on the right and left of block 1", "source": "block that is left of block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_1516", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block in the shape of a pyramid above block 1", "source": "block that is above block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1565", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks left of block 1", "source": "block that is left of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1585", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block above block 1", "source": "block that is above block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1592", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is both above and below block one", "source": "block that is above block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_54", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks right and below block 1", "source": "block that is right of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_58", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is below block 1 and that is below block 1", "source": "block that is below block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_61", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block surrounding block 1", "source": "block that is left of block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_test_69", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find block that is below and to the right of block 1", "source": "block that is below block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_test_114", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks above block 1", "source": "block whose shape is a pyramid and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "qid": "blocks_test_128", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block left of block one and shaped like a pyramid", "source": "block that is left of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_135", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid above block 1", "source": "block whose shape is a pyramid and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "qid": "blocks_test_143", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid left of block 1", "source": "block whose shape is a pyramid and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string left) (string =) en.block.block1))", "qid": "blocks_test_148", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose shape is a pyramid and that is below block 1", "source": "block whose shape is a pyramid and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string below) (string =) en.block.block1))", "qid": "blocks_test_153", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid to left of block 1", "source": "block that is left of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_172", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the pyramidshaped brick below brick 1", "source": "block whose shape is a pyramid and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string below) (string =) en.block.block1))", "qid": "blocks_test_174", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is below and to the right of block 1", "source": "block that is below block 1 and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_test_179", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramidshaped blocks are below block 1", "source": "block that is below block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_210", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks left of block 1", "source": "block that is left of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_293", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a pyramidshaped block", "source": "block whose shape is a pyramid and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_311", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which pyramidshaped brick is below brick 1", "source": "block that is below block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_319", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the right of and below block 1", "source": "block that is right of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_334", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid to right of block 1", "source": "block whose shape is a pyramid and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string right) (string =) en.block.block1))", "qid": "blocks_test_344", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what brick is above brick 1", "source": "block that is above block 1 and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_test_345", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the left of block 1 whose shape is that of a pyramid", "source": "block that is left of block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_353", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block above block 1", "source": "block whose shape is a pyramid and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string above) (string =) en.block.block1))", "qid": "blocks_test_354", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks that are left of and below block 1", "source": "block that is left of block 1 and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_362", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is above block 1 and is in the shape of a pyramid", "source": "block that is above block 1 and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_395", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that is on the left side of two other blocks", "source": "block that two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_15", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with more than 2 blocks to the left of it", "source": "block that more than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_35", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the bricks with 2 blocks above it", "source": "block that two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_82", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that more than two block is right of", "source": "block that more than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_83", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with less than 2 blocks to the right of it", "source": "block that less than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_85", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block beneath two other blocks", "source": "block that two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_159", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block above at least two blocks", "source": "block that at least two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_173", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what brick has no more than two bricks to its left", "source": "block that at most two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_180", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block within 2 blocks to the left", "source": "block that at most two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_189", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what brick has at least 2 bricks to its right", "source": "block that at least two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_190", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is at most 2 block to the left", "source": "block that at most two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_223", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with at least 2 blocks above it", "source": "block that at least two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_235", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks with less than 2 blocks above it", "source": "block that less than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_237", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose the block beneath the 2 block", "source": "block that more than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_254", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "the blocks under block 2 are smaller", "source": "block that less than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_272", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block above at most two blocks", "source": "block that at most two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_285", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above at leat two blocks", "source": "block that at least two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_298", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that is at most below 2 blocks", "source": "block that at most two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_302", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select block to the left of two blocks", "source": "block that two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_323", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is below less than two blocks", "source": "block that less than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_331", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks with more than 2 blocks above it", "source": "block that more than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_341", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block located to the right of at least two other blocks", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_345", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with less than 2 blocks below it", "source": "block that less than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_346", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is above more than two blocks", "source": "block that more than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_371", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that at most two block is right of", "source": "block that at most two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_383", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block that is below at most two blocks", "source": "block that at most two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_387", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a brick that has more than 2 blocks to its left", "source": "block that more than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_388", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block with two or less blocks to the left", "source": "block that at most two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_430", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is to the right of more than two blocks", "source": "block that more than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_484", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block to the right of block 2", "source": "block that less than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_506", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with 2 blocks below it", "source": "block that two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_524", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block to the left of more than two blocks", "source": "block that more than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_547", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that has at least 2 blocks to the left", "source": "block that at least two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_551", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block buried under at least two other blocks", "source": "block that at least two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_570", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with less than 2 blocks to the left", "source": "block that less than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_576", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with at least 2 blocks below", "source": "block that at least two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_577", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block that has less than two blocks below it", "source": "block that less than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_578", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is is left of block two", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_584", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block with two blocks to the left of it", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_593", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has two blocks or less below it", "source": "block that at most two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_605", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with 2 blocks left of it", "source": "block that two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_649", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what brick has more than 2 bricks below it", "source": "block that more than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_665", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that at least two block is left of", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_689", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has two blocks below it", "source": "block that less than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_693", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with at most 2 blocks to the right of it", "source": "block that at most two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_695", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that at most two block is left of", "source": "block that at most two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_698", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with at least 2 blocks to the right of it", "source": "block that more than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_716", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block that is two blocks above that block", "source": "block that two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_720", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has no more than two bricks above it", "source": "block that at most two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_724", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block beneath block 2", "source": "block that at most two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_725", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is right of at least two blocks", "source": "block that at least two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_731", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that less than two block is left of", "source": "block that less than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_736", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block below at least two blocks", "source": "block that at least two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_765", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is on top of two other blocks", "source": "block that two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_777", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the blocks that are under no more than 2 blocks", "source": "block that at most two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_785", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has less than two bricks above it", "source": "block that less than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_817", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that two block is right of", "source": "block that two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_857", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block less than two blocks below", "source": "block that less than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_872", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has two bricks below it", "source": "block that two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_893", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block right of more than two blocks", "source": "block that more than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_934", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "the block beneath the block which is less than two", "source": "block that less than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_939", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is the right of block 2", "source": "block that at most two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1008", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is to left of more than two blocks", "source": "block that more than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1018", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block to the left of two blocks or one but no more", "source": "block that at most two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1032", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks  with at most two blocks left of it", "source": "block that at most two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1047", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what brick has at least two bricks to its left", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1083", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block above two blocks", "source": "block that two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1101", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that more than two block is left of", "source": "block that more than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1113", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is above more than two blocks", "source": "block that more than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1150", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that has less than 2 blocks to its left", "source": "block that less than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1209", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the bricks that have at most 2 blocks below it", "source": "block that at most two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1268", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block has two blocks above it", "source": "block that two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1373", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that at most two block is below", "source": "block that at most two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1422", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block to the left of block 2", "source": "block that two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1425", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block with two or less blocks to the right of it", "source": "block that at most two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1447", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has no more than 2 bricks to its right", "source": "block that at most two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1455", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block has less than two blocks to its right", "source": "block that less than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1473", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above at most two block", "source": "block that at most two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1477", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is to the left of block 2", "source": "block that less than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1508", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has more than two bricks above it", "source": "block that more than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1525", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block with more than two blocks above it", "source": "block that more than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1558", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block to the right of more than two other blocks", "source": "block that more than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_30", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with 2 blocks to the left", "source": "block that two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_34", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what brick has more than 2 bricks to its right", "source": "block that more than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_37", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is above block 2", "source": "block that more than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_43", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is below at least two blocksw", "source": "block that at least two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_67", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block to the left of at least two blocks", "source": "block that at least two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_83", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks with more than 2 blocks below it", "source": "block that more than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_99", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block that is on top of more than two other blocks", "source": "block that more than two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_109", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what brick has two bricks to its left", "source": "block that two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_120", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose the block to the right of block 2", "source": "block that two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_123", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that more than two block is above", "source": "block that more than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_137", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block located to the right of two other blocks", "source": "block that two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_139", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block under block 2", "source": "block that two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_158", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that at least two block is below", "source": "block that at least two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_184", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block has at least two blocks above it", "source": "block that at least two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_189", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block to the right of just one block only", "source": "block that less than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_226", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that have 2 blocks to the right of it", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_251", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block has at least two blocks below it", "source": "block that at least two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_257", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block above 2 blocks", "source": "block that at most two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_271", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has two bricks to its right", "source": "block that two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_304", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose the block to the right of the other block", "source": "block that at least two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_322", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block on top of at least two other blocks", "source": "block that at least two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_390", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what blocks are special and are below block 1", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_134", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that block 1 is under", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_153", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a special block below block 1", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_230", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "special block to right of block 1", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_313", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks  below block 1", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_322", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that block 1 is right of", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_458", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that are below block 1", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_645", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find special blocks with block 1 above them", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_837", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the special block in the left of block 1", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_882", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is special and has block 1 on its right", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1031", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the special block above block 1", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1418", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "look right of block 1 and get the special block", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1434", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "special block left of block 1", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_23", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that are to the right of block 1", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_96", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a special block above block 1 ", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_206", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is special and left of block 1", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_275", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is special and is to the left of block 1", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_282", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select blocks that have a length of 3 icnhes and are to the right of block 1", "source": "block whose length is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_5", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block with 3 inches of width", "source": "block whose width is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_200", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is of 3 inches height and above block 1 ", "source": "block whose height is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_403", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block below block 1", "source": "block whose width is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_422", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block left of block 1", "source": "block whose length is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_442", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inches long block and that is above block 1", "source": "block whose length is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_480", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "look right of block 1 and find 3 inch block", "source": "block whose length is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has a width of 3 inches and block 1 is to the right of", "source": "block whose width is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_609", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block to right of block 1", "source": "block whose length is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_681", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block with a length of 3 inches that block 1 is above", "source": "block whose length is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_690", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has a width of three inches and that block 1 is below", "source": "block whose width is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_754", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the blocks that have a width of 3 inches and are to the left of block 1", "source": "block whose width is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_831", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block with a width of 3 inches", "source": "block whose width is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_836", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch tall block right from block 1", "source": "block whose height is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_914", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block whose height is 3 inches", "source": "block whose height is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_946", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that has a width of 3 inches and is below block 1", "source": "block whose width is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_964", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "get a 3inch long block below block 1", "source": "block whose length is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1002", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch tall blocks that block 1 is above", "source": "block whose height is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1022", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch long blocks that block 1 is right of", "source": "block whose length is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1026", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block 3 inches long and below block one", "source": "block whose length is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1029", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is left of block 1 and 3 inches in length", "source": "block whose length is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1106", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch long blocks which block 1 is below", "source": "block whose length is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1181", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch tall blocks which block 1 is left of", "source": "block whose height is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1236", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch wide blocks that block 1 is below", "source": "block whose width is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1274", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a block with a height of 3 inches that block 1 is to the left of", "source": "block whose height is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1289", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block above block 1", "source": "block whose height is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1292", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch tall block at the left of block 1", "source": "block whose height is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1297", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that has a height of 3 inches and that block 1 is to the right of", "source": "block whose height is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1309", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is 3 tall and has block 1 on its left", "source": "block whose height is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1378", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what 3 inch block is below block 1", "source": "block whose height is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1415", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inches wide block at the right of block 1", "source": "block whose width is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_1424", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch tall blocks that block 1 is right of", "source": "block whose height is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1443", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch wide blocks that block 1 is above", "source": "block whose width is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_1494", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inches long block to the left of block 1", "source": "block whose length is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1553", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that has a length of 3 inches and is below block 1", "source": "block whose length is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_1577", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inches wide block below block 1", "source": "block whose width is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_33", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch long blocks that block 1 is above", "source": "block whose length is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_72", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch wide block to the left of block 1", "source": "block whose width is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_80", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block above block 1", "source": "block whose length is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_106", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "look right of block 1 and get the 3 inch tall block", "source": "block whose height is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_110", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block  has a height of 3 inches and that block 1 is above", "source": "block whose height is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_151", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that has a height of 3 inches and is above block 1", "source": "block whose height is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_199", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which block of 3 inches height is above the block 1 ", "source": "block whose height is 3 inches and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_242", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the 3 inches in length block that is on the left side  of block 1", "source": "block whose length is 3 inches and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_262", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block below block 1", "source": "block whose width is 3 inches and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_test_291", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block whose width is 3 inches and is on the right side of block 1", "source": "block whose width is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_320", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block whose length is 3 inches and that is to the left of block 1", "source": "block whose length is 3 inches and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_378", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the blocks height", "source": "total height of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_130", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the total height of the blocks", "source": "total height of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_142", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "average height of block", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_263", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average width of the blocks", "source": "average width of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_457", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find the average height of a block", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_473", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the width of the block", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_498", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average width of the bricks", "source": "average width of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_545", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total length of the blocks", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_552", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average length of the bricks", "source": "average length of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_574", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me a block with average length", "source": "average length of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_618", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total width of the blocks", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_688", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the length of the block", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_737", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total width of the brick", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_804", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the height of an average block", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_847", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how long is the block", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_1056", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "total length of block", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_train_1093", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the height of the block", "source": "total height of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1144", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total height of the blocks", "source": "total height of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1256", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total width of the block", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_1323", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average height of a brick", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1402", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average block width", "source": "average width of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_1429", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average height of the blocks", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1475", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average height of the bricks", "source": "average height of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string height))))", "qid": "blocks_train_1490", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "total width of blocks", "source": "total width of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_train_1575", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average width of a block", "source": "average width of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string width))))", "qid": "blocks_test_214", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "average length of block", "source": "average length of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_test_280", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average length of a block", "source": "average length of block", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_test_303", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total length of the brick", "source": "total length of block", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.block) (string !type)) (string length))))", "qid": "blocks_test_349", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find me all 3 inch high special blocks", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_392", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a 3 inch long special block", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_454", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which one is a 3 inch special block", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_510", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that is special and whose length is 3 inches", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_542", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch wide special block", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_792", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all special 3 inch long blocks", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_938", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all special blocks that are 3 inches wide", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1368", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all the special blocks that are 3 inches long", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1488", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "is  there a special block with a height that is only 3 inches", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1536", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which special block is 3 inches wide", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1548", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all special blocks with length less than 3 inches", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_188", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that is special and whose height is 3 inches", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_277", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the 3 inch tall special block", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_297", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose height is 3 inches and whose width is 3 inches", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_205", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a block that is 3 inches long", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_259", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "the 3x3 inch block", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_310", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block that is 3 inches tall", "source": "block whose height is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_339", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block 3 inches high and long", "source": "block whose height is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_363", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what brick is 3 inches wide and 3 inches high", "source": "block whose width is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_381", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block with 3 inch height and 3 inch wide", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_427", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the 3 inch long blocks", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_522", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the 3 inch wide blocks", "source": "block whose width is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_632", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the blocks that is 3 inches wide and long", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_740", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block with equal height and width measurements specifically 3 inches", "source": "block whose width is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_824", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block whose length and height is 3 inches", "source": "block whose length is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_835", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "is there a block whose diameter and length is an equal 3 inches in both those directions", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_972", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select all blocks that are 3 inches long", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1034", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select a block that has width and height of 3 inches each", "source": "block whose width is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1114", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose length is 3 inches and whose length is 3 inches", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1135", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch wide and long blocks", "source": "block whose width is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1184", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a 3 inch long block", "source": "block whose length is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1244", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block with a length and width of 3 inches each side", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1271", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks with height and width equal to 3 inches", "source": "block whose height is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1333", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select all 3 inch high blocks", "source": "block whose height is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1398", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the blocks with length and height of 3 inches ", "source": "block whose length is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1523", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick is 3 inches wide and 3 inches high", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1583", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "identify a block with a width of 3 inches", "source": "block whose width is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_14", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the 3 inch wide and tall blocks", "source": "block whose width is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_21", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks 3 inches tall", "source": "block whose height is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_119", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is 3 inches wide by 3 inches tall", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_169", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block with a height and length of 3 inches", "source": "block whose height is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_213", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose width is 3 inches and whose length is 3 inches", "source": "block whose width is 3 inches and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_220", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch high and 3 inch wide blocks", "source": "block whose height is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_224", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block that is 3 inches wide", "source": "block whose width is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_229", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is 3 inches wide and 3 inches tall", "source": "block whose width is 3 inches and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_239", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose length is 3 inches and whose width is 3 inches", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_306", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what brick is 3 inches long and 3 inches wide", "source": "block whose length is 3 inches and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_341", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a special block", "source": "block that is special and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string is_special)))", "qid": "blocks_train_809", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "block that is special and that is special", "source": "block that is special and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string is_special)))", "qid": "blocks_train_827", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "choose a block that is special", "source": "block that is special and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string is_special)))", "qid": "blocks_test_133", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which brick is left of brick 1 or 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_69", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me a block to the right of either block 1 or block 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_76", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "select all bricks right of block 1 or 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_379", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find a block that is beneath either block 1 or block 2", "source": "block that is below block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_413", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block that is below block 1 or block 2", "source": "block that is below block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_441", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of block 1 or 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_512", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which blocks are right of blocks 1 or 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_543", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which brick is above brick 1 or 2", "source": "block that is above block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_563", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find the block that is shaped like a pyramid or a cube", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_652", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "choose a block that is shape like a cube or pyramid", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_676", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "choose the brick shaped like a pyramid or a cube", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_745", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all the bricks below block 1 or 2", "source": "block that is below block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_988", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "third block to the left", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1108", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what block is to the left of either block 1 or block 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1140", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me a pyramid or cube shaped block", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_1148", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "is there a block to the right of either block 1 or block 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1257", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all the blocks above block 1 or 2", "source": "block that is above block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which brick is below brick 1 or 2", "source": "block that is below block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1467", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all the pyramid or cube bricks", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_1510", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which brick is to the right of brick 1 or 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1524", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "is there a block piled on top of either block 1 or block 2", "source": "block that is above block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1526", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block that is left of block 1 or block 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1572", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "choose a block that is to the left of block 1 and 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_22", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find a block below either block 1 or block 2", "source": "block that is below block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_100", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "choose a block that is above block 1 or 2", "source": "block that is above block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_129", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block below either block 1 or block 2", "source": "block that is below block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_234", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of block 1 and has a length of 3 inches", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_0", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block right of block 1", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_2", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block to the left of block 1 thats 3 inches wide", "source": "block that block 1 is left of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_7", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "are there any 3inch long blocks to the right of block 1", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_41", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that block 1 is above with a width of 3 inches", "source": "block that block 1 is above and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_44", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block right of block 1 which is 3 inches high", "source": "block that block 1 is right of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_60", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block left of block 1", "source": "block that block 1 is right of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_150", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block whose width is three inches that block 1 is to the right of", "source": "block that block 1 is right of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_152", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch long blocks  that block 1 is left of", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_275", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch tall blocks which block 1 is above", "source": "block that block 1 is above and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_286", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select a block above block one that is 3 inches long", "source": "block that block 1 is above and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_299", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me the block that block 1 is below and that has a length of 3 inches", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_394", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch wide blocks above block 1", "source": "block that block 1 is below and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_409", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which is the 3 inches tall block at the left of block 1", "source": "block that block 1 is right of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_514", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a block with a width of three inches that block 1 is below", "source": "block that block 1 is below and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_562", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch long block below block 1", "source": "block that block 1 is above and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_565", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch wide block below block 1", "source": "block that block 1 is above and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_661", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inches long block at the left of block 1", "source": "block that block 1 is right of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_729", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch tall bock below block 1", "source": "block that block 1 is above and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_750", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch long blocks below block 1", "source": "block that block 1 is above and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_773", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block that is to the right of block 1 with a width of 3 inches", "source": "block that block 1 is right of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_820", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which 3 inches long block is above block 1", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_875", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inches long block which has block 1 at left", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_937", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that block 1 is to the left of and that has a height of 3 inches", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_942", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch tall blocks that block 1 is right of", "source": "block that block 1 is right of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_954", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is to the right of block 1 and has a width of 3 inches", "source": "block that block 1 is left of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1004", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is to the left of block 1 and has a total height of 3 inches", "source": "block that block 1 is right of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1055", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block below block 1 which is 3 inches long", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1062", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is below block 1 and has a height of 3 inches", "source": "block that block 1 is below and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1105", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch high block above block 1", "source": "block that block 1 is below and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1117", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch wide blocks that block 1 is above", "source": "block that block 1 is above and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1175", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is to the left of block 1 and that has a length of 3 inches", "source": "block that block 1 is right of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is above block 1 and has a height of 3 inches", "source": "block that block 1 is above and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1253", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch wide block above block 1", "source": "block that block 1 is below and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1260", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that has a width of 3 inches and is below block 1", "source": "block that block 1 is below and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1293", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which block is 3 in height and has block 1 on its left", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1318", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block has a length of 3 inches and block 1 above it", "source": "block that block 1 is above and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1335", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which block that is 3 in height has block 1 below it", "source": "block that block 1 is below and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1453", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch tall blocks that block 1 is left of", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1485", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block below block 1 and 3 inches in height", "source": "block that block 1 is above and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_141", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block above block 1", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_258", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find 3 inch block left of block 1", "source": "block that block 1 is right of and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_273", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch long blocks that block 1 is below", "source": "block that block 1 is below and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_300", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is 3 inches and is left of block 1", "source": "block that block 1 is left of and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_316", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch long block that is left of block 1", "source": "block that block 1 is right of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_364", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inch block right of block 1", "source": "block that block 1 is left of and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is to the right of block 1 ", "source": "block that block that block 1 is left of is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_97", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is above and right of block 1", "source": "block that block that block 1 is right of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_104", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block has block 1 left and right", "source": "block that block that block 1 is left of is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_114", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is below the block below block 1", "source": "block that block that block 1 is above is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_236", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that block 1 is below and to the left of", "source": "block that block that block 1 is below is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_256", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is above the block that is above block 1", "source": "block that block that block 1 is above is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_273", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of and below block 1", "source": "block that block that block 1 is right of is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block that has block 1 at right and below", "source": "block that block that block 1 is right of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_305", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that block 1 is below", "source": "block that block that block 1 is below is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_361", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two above block 1", "source": "block that block that block 1 is below is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_410", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2nd block left of block 1", "source": "block that block that block 1 is left of is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_423", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two below block 1", "source": "block that block that block 1 is above is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_486", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "right of block above block 1", "source": "block that block that block 1 is below is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_586", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is left of and above block 1", "source": "block that block that block 1 is left of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_623", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block to the right of the block above block 1", "source": "block that block that block 1 is below is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_675", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is block 1 below and to the right of", "source": "block that block that block 1 is below is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_683", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that block 1 is right and below", "source": "block that block that block 1 is right of is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_696", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the left and below block 1", "source": "block that block that block 1 is left of is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_739", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the block below and left of block 1", "source": "block that block that block 1 is above is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_747", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks which block 1 is right and left of", "source": "block that block that block 1 is right of is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_791", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that block 1 is left and above", "source": "block that block that block 1 is left of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_821", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the left of and below block 1", "source": "block that block that block 1 is left of is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_861", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks front and left of block 1", "source": "block that block that block 1 is right of is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_898", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks below block 1", "source": "block that block that block 1 is below is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_915", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is the block to the right and below block 1", "source": "block that block that block 1 is right of is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_979", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below and right of block 1", "source": "block that block that block 1 is left of is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1043", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "below and right from block 1", "source": "block that block that block 1 is below is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1061", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is two blocks to the right of block 1", "source": "block that block that block 1 is right of is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1137", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is below block 1", "source": "block that block that block 1 is below is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1214", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that block 1 is to the right and above", "source": "block that block that block 1 is right of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that block 1 is above and below", "source": "block that block that block 1 is above is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1254", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find a block below the block on the right of block 1", "source": "block that block that block 1 is right of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1279", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block above the right one", "source": "block that block that block 1 is above is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1296", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that block 1 is to the left and above", "source": "block that block that block 1 is left of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1305", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is left or right of block 1", "source": "block that block that block 1 is left of is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1369", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "left and below of block 1", "source": "block that block that block 1 is right of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1394", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is above and right of block 1", "source": "block that block that block 1 is above is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1499", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that block 1 is above and to the left of", "source": "block that block that block 1 is above is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_test_82", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that is left of block 1", "source": "block that block that block 1 is left of is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_test_177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block on the right side of the block on the right side of block 1", "source": "block that block that block 1 is right of is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_198", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that block 1 is belo", "source": "block that block that block 1 is below is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_test_270", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is above and to the right of block 1 ", "source": "block that block that block 1 is above is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_test_285", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that block 1 is right and above of", "source": "block that block that block 1 is above is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_test_385", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above and right from block 1", "source": "block that block that block 1 is left of is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_test_389", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block that is to the right of a block with a length of 3 inches", "source": "block that is right of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_18", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is below block whose width is 3 inches", "source": "block that is below block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_33", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block located on top of the block that is 3 inches high", "source": "block that is above block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_87", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is left of block whose height is 3 inches", "source": "block that is left of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_92", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what brick is below a brick that is 3 inches long", "source": "block that is below block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_93", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is to the left of the 3 inch tall block", "source": "block that is left of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_107", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find all blocks that are below blocks with height equal to 3 inches", "source": "block that is below block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_108", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose the brick to the right of the 3 inch block", "source": "block that is right of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_128", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which brick is to the left of the brick that is 3 inches tall", "source": "block that is left of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_146", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is below block whose height is 3 inches", "source": "block that is below block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_157", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which brick is above a brick that is 3 inches wide", "source": "block that is above block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_171", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is below the 3 inch long block", "source": "block that is below block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block above a block which is 3 inches wide", "source": "block that is above block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_271", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks below 3 inch wide blocks", "source": "block that is below block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_358", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "is there a block located to the left of another block that is 3 inches long", "source": "block that is left of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_364", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose a block above a 3 inch block", "source": "block that is above block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_395", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose a block that is below a 3 inch block", "source": "block that is below block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks left of 3 inch blocks", "source": "block that is left of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_437", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block to the right of the 3 inch high block", "source": "block that is right of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_459", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the block above that has its length as 3 inches", "source": "block that is above block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_540", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks below 3 inch long blocks", "source": "block that is below block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_561", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks left of 3 inch tall blocks", "source": "block that is left of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_585", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks right of 3 inch high blocks", "source": "block that is right of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_621", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks right of 3 inch long blocks", "source": "block that is right of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_647", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks below 3 inch high blocks", "source": "block that is below block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_651", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which block is above the brick that is 3 inches high", "source": "block that is above block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_730", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is to the right of the 3 inch wide block", "source": "block that is right of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_741", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the lower block that is 3 inches tall", "source": "block that is below block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_758", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "locate the block that is on top of at least one other block and that has a length of 3 inches", "source": "block that is above block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_813", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is above the block that is 3 inches long", "source": "block that is above block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_890", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block at the right of 3 inches wide block", "source": "block that is right of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_907", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks above 3 inch long blocks", "source": "block that is above block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_928", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find a block with a 3 inch long block below it", "source": "block that is above block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_975", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which brick is to the left of the 3 inch brick", "source": "block that is left of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_981", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which brick is below a brick that is 3 inches wide", "source": "block that is below block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1001", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is below block whose length is 3 inches", "source": "block that is below block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1021", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is above the 3 inch high block", "source": "block that is above block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1040", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "locate the block to the right side of a block measuring 3 inches in width", "source": "block that is right of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1044", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "a 3 inch block has a block on top of it find that block", "source": "block that is above block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1051", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which block is to the left of the 3inch high block", "source": "block that is left of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1122", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks above 3 inch wide blocks", "source": "block that is above block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1126", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is to the left of the 3 inch long block", "source": "block that is left of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1155", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "locate the block beneath the block that has a width of 3 inches", "source": "block that is below block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is above block whose length is 3 inches", "source": "block that is above block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1265", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose a brick that is to the left of a brick that is 3 inches wide", "source": "block that is left of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1277", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block to the right of the 3 inch tall block", "source": "block that is right of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1322", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is to the left of the 3 inch wide block", "source": "block that is left of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1330", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose a block that is right of a 3 inch brick", "source": "block that is right of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is left of block whose length is 3 inches", "source": "block that is left of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1466", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is above the 3 inch wide block", "source": "block that is above block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1479", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is above block whose height is 3 inches", "source": "block that is above block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1503", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is above block whose width is 3 inches", "source": "block that is above block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose a block below the 3 inch brick", "source": "block that is below block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1527", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me a block that is to the left of the block with a width of 3 inches", "source": "block that is left of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1539", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me a block below the 3 inch tall block", "source": "block that is below block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1540", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is to the right of the 3 inch long block", "source": "block that is right of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1561", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what brick is to the right of the 3 inch brick", "source": "block that is right of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_1574", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block that is right of block whose height is 3 inches", "source": "block that is right of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_1595", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks left of 3 inch wide blocks", "source": "block that is left of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_25", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "3 inch long block below block", "source": "block that is below block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_test_29", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose a block that is left of a 3 inch brick", "source": "block that is left of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_test_103", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which brick is to the right of the brick that is 3 inches high", "source": "block that is right of block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_test_152", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the block to the left of the block that is 3 inches in diameter", "source": "block that is left of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_228", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose a block that is 3 inches tall", "source": "block that is left of block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_test_294", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block to the right of the block that is 3 inches long", "source": "block that is right of block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_347", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks above 3 inch tall blocks", "source": "block that is above block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_test_368", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what block is below the 3 inch wide block", "source": "block that is below block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "locate block one or block 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_22", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "choose brick 1 or brick 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_132", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "either block 1 or 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_405", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find me either block 1 or block 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_444", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "is it a pyramid or a cube", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_train_771", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "select block 1 or 2", "source": "block 1 or block 2", "target": "(call listValue (call concat en.block.block1 en.block.block2))", "qid": "blocks_train_787", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "a pyramid or a cube", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_train_1476", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "choose a pyramid or a cube", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_test_60", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find a block shaped like a pyramid or a cube", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_test_138", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "select a pyramid or cube shaped block", "source": "a pyramid or a cube", "target": "(call listValue (call concat en.shape.pyramid en.shape.cube))", "qid": "blocks_test_187", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "3 inches tall block at the right of block 1", "source": "block whose height is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_54", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the 3 inch long bricks left of block 1", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_62", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the 3 inch wide pyramidshaped block", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_99", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the 3 inch wide blocks below block 1", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_195", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select all which is 3 inches in width and pyramid in shape", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_333", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch long block above block 1", "source": "block whose length is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_343", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inches high block below block 1", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_349", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what blocks are left of block 1 and 3 inches in height", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_350", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a 3 inch block to the right of block 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_386", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has a width of 3 inches and is above block 1", "source": "block whose width is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_424", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose the brick below brick 1 that is 3 inches long", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_449", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a three inches block at the left of block 1", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_451", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select blocks that have a height of 3 inches and are to the right of block 1", "source": "block whose height is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_479", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block below block 1 is 3 inches wide", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_492", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks 3 inch long right of block 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_608", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch wide block to the right of block 1", "source": "block whose width is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_612", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block located beneath block 1 that has a 3 inch diameter", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_617", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch tall blocks left of block 1", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_674", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has a width of 3 inches and is to the left of block 1", "source": "block whose width is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_732", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that has a width of 3 inches and is to the right of block 1", "source": "block whose width is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_790", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks with height equal to 3 inches", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_807", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select a block to the left of block 1 that is 3 inches long", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_826", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is 3 inches wide and to the right of brick 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_830", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a pyramidshaped block 3 inches long", "source": "block whose length is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_841", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block above block 1", "source": "block whose width is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_878", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramidshaped brick is 3 inches long", "source": "block whose length is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_892", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the 3 inch long block to the right of block 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_918", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch wide pyramid blocks", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_932", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block that is to the left of block 1 that is also 3 inches in length", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_983", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block underneath block 1 that is 3 inches long", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_985", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the 3 inch wide block left of block 1", "source": "block whose width is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1012", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is 3 inches in height and is on the right side of block 1", "source": "block whose height is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1024", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch tall block  above block 1", "source": "block whose height is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1058", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block above block 1", "source": "block whose height is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1085", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which pyramidshaped block is 3 inches wide", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1092", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all 3 inch wide blocks right of block 1", "source": "block whose width is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1102", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the 3 inch block below block 1", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1134", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose length is 3 inches and whose shape is a pyramid", "source": "block whose length is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1167", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is 3 inches tall and pyramidshaped", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1180", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose height is 3 inches and that is below block 1", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1213", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the blocks who have a height of 3 inches are are to the left of block 1", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1304", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block with a length of 3 inches that is above block 1", "source": "block whose length is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1310", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose the brick that is 3 inches high below brick 1", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1325", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the 3 inch tall block below block 1", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1362", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above block 1 that is 3 inches wide", "source": "block whose width is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1400", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "get the block that is 3 inches tall found left of block 1", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1428", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block three inches in height is above block 1", "source": "block whose height is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1457", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is 3 inches and shaped like a pyramid", "source": "block whose width is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1498", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select a block below block 1 that is 3 inches long", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_train_1545", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block which is right to block 1 with 3 inches", "source": "block whose width is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1571", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose height is 3 inches and whose shape is a pyramid", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_2", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose width is 3 inches and that is below block 1", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_test_8", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all 3 inch pyramid blocks", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_107", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is to the left of brick 1 that is at least 3 inches long", "source": "block whose length is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_test_117", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inches long pyramid shaped block", "source": "block whose length is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_149", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "beneath block 1 is a block with a height of 3 inches find it", "source": "block whose height is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_test_150", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch block above block 1", "source": "block whose length is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_test_164", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the 3 inch tall pyramid blocks", "source": "block whose height is 3 inches and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_209", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is 3 inches long and to the right of block 1", "source": "block whose length is 3 inches and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string right) (string =) en.block.block1))", "qid": "blocks_test_222", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is 3 inches wide and below brick 1", "source": "block whose width is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_test_255", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that has a height of 3 inches and is above block 1", "source": "block whose height is 3 inches and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string above) (string =) en.block.block1))", "qid": "blocks_test_281", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the 3 inches long blocks and below block 1", "source": "block whose length is 3 inches and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)) (string below) (string =) en.block.block1))", "qid": "blocks_test_374", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "3 inch tall block left of block 1", "source": "block whose height is 3 inches and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)) (string left) (string =) en.block.block1))", "qid": "blocks_test_375", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block thats the same width as block 1", "source": "block whose width is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_4", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at most height of block 1", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_6", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks with a smaller width than the length of block 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_8", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is smaller than length of block 1", "source": "block whose height is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks shorter than block 1", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_12", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block at most as tall as block 1s width", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_13", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with a width that is less than the height of block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_19", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a length shorter than the length of brick 1", "source": "block whose length is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_67", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block taller or same height as the width of block 1", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_77", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a brick that is at least as wide as brick 1 is long", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_78", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block more wider than length of block 1", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_98", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is at least height of block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is at least height of block 1", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_119", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is bigger than block 1", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_149", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no wider than brick 1 is long", "source": "block whose width is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block that is shorter than block 1", "source": "block whose length is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block that is shorter than block one", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "is there a block with a length whose measurement is equivalent to that of  block 1s height", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_183", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block with equal or less width than block 1", "source": "block whose width is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is taller than block 1", "source": "block whose height is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_206", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks as high as block 1 is long", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is minimum the height of block 1", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block wider than block 1 is tall", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block has height less than or equal to the length of block 1", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_239", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks as long as block 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_243", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at least width of block 1", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_249", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is smaller than length of block 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_255", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what brick is at least as high as brick 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at most as long as block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_308", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks wider than the height of block 1", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_314", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is at least as high as block 1 is wide", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_317", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block taller than block 1 is wide", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block wider than block 1", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_353", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is longer than block 1 is wide", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_357", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks as wide or wider than block 1", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_385", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a brick that is no higher than brick 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block that is no taller in inches than the width of block 1", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_428", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is smaller than height of block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_438", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is at least the length of block 1", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_462", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as tall as block 1 is long", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_472", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is longer than brick 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_477", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the block that is shorer than block 1", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_487", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks  longer than the width of block 1", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_491", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block as wide as block 1 or wider", "source": "block whose width is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_493", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at most length of block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_499", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with a length greater than block 1 is tall", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_532", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select the blocks that have a height less than or equal to block 1s length", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_536", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "is there a block shorter in height than block 1 is wide", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_548", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block that block 1 is longer than", "source": "block whose length is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_550", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is longer than block 1 is wide", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_554", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is higher than brick 1 is long", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_557", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what blocks width is less than or equal to block 1s height", "source": "block whose width is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_564", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is wider than brick 1 is wide", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks as wide as block 1 is long", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_571", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks shorter than the width of block 1", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_573", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as long as brick 1 is wide", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_582", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose blocks wider than block 1s height", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_587", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks taller than block 1", "source": "block whose height is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_594", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate a block that is no wider than the height of block 1", "source": "block whose width is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_601", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what blocks length is smaller than block 1s width", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks taller than block 1", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_613", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is shorter than block 1", "source": "block whose height is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_616", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is as thick as block 1 is long", "source": "block whose width is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_629", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at least length of block 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_633", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is wider than block 1 is long", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_640", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "bloch longer than the length of block 1", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_648", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks that is at least as long as block 1 is tall", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_673", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block of height not more than width of block 1", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_682", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select brick whose length is more than the width of block 1", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_684", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is shorter then block 1 is long", "source": "block whose height is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_699", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the block with a length shorter than that of block 1", "source": "block whose length is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_743", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a height measurement that equals at minimum the length of block 1", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_755", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is the same height as block 1", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_756", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block that is at least the same height as block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_772", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block taller than block 1 is long", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_774", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block that is wider than block 1", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_793", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is shorter than brick 1 is high", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_795", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with a diameter that does not surpass the height of block 1", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_798", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block skinnier than block 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_834", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks as tall as the width of block 1", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_838", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "the block that is equal to the length of block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_846", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block longer than width of block 1", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_851", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find blocks that are at least as tall as block 1 is wide", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_863", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a width less than the length of brick 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_865", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is longer than block 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_894", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks wider than the width of block 1", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_900", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find the block that has a height that does not surpass the height of block 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_906", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks shorter than block 1", "source": "block whose height is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_909", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks at most as long as the width of block 1", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_911", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no higher than brick 1 is wide", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_966", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find all blocks that are as long as or longer than block 1", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_995", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks at most as tall as block 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1011", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a brick whose length is at least the width of block 1", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1046", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as tall as block 1 is wide", "source": "block whose height is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1069", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks longer than block 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1077", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is less thick than block 1", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1090", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is shorter than block 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1097", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a length that exceeds the width of block 1", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block has width less than or equal to block 1s length", "source": "block whose width is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1130", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no wider than brick 1", "source": "block whose width is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is larger than width of block 1", "source": "block whose length is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks with a smaller width than block 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find blocks that are taller than block 1 is long", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a width smaller than the height of brick 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1195", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at least the same height as block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1204", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks taller than the length of block 1", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1218", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no longer than brick 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1220", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is taller than brick 1 is high", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1234", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as high as brick 1 is long", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1249", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is at least as wide as block 1 is tall", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1259", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks with a length shorter than the width of block 1", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1278", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block whose height is smaller than the length of block 1", "source": "block whose height is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is skinnier than the height of block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1284", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block with height less than block 1", "source": "block whose height is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1298", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block has a length smaller than block 1s width", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1306", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks whose width is shorter than the height of block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1327", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block has less than or equal length then block 1 has width", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1343", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is larger than width of block 1", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks shorter than block 1 is long", "source": "block whose height is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at most as tall as block 1", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1356", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a diameter less than that of block 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1361", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is thinner then block 1 is long", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1427", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is smaller than block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1430", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is taller than brick 1", "source": "block whose height is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1433", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block that has a width that is the same width of block 1", "source": "block whose width is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1445", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "is there a block that is taller than block 1", "source": "block whose height is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1458", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is larger than height of block 1", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1478", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is not as thick as block 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1481", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block with a length larger than the length of block 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1484", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as long as block 1s height", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1486", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block who has width greater than or equal to block 1s height", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1495", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no longer than brick 1 is wide", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1518", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks at least as long as block 1 is wide", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1519", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block shorter than the width of block 1", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1532", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks at least as wide as block 1 is tall", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1556", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at most as wide as block 1", "source": "block whose width is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_1562", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose length is at most width of block 1", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1573", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a wider block than block 1", "source": "block whose width is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1582", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a brick that is wider than brick 1 is high", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_1593", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is at most width of block 1", "source": "block whose height is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_6", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a height that equals more than the width of block 1", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_10", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is not as long as block 1 is tall", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_13", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block as long or longer then block 1 is wide", "source": "block whose length is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_17", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks at most as wide at block 1 is tall", "source": "block whose width is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_24", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block taller than the width of block 1", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the bricks taller than the width of block 1", "source": "block whose height is larger than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_38", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is at leas the length of block 1", "source": "block whose height is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_40", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select the block that is equal or bigger than block 1", "source": "block whose width is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_42", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which block is bigger than block 1", "source": "block whose length is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_47", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no taller than brick 1 is long", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_49", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate the block with a height that is equal to or greater than the height of block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what blocks length is less than or equal to block 1s height", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_97", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select a block with width equal or greater than block 1 is long", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_101", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block as long or longer than block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_121", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as long as brick 1 is tall", "source": "block whose length is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is the same or below brick 1", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with width less than or equal to block 1", "source": "block whose width is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no longer than brick 1 is high", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_157", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks taller than the length of block 1", "source": "block whose height is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block less wider than the length of block 1", "source": "block whose width is smaller than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a width smaller than the width of brick 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_165", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with a height smaller than the height of block 1", "source": "block whose height is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is at least the width of block 1", "source": "block whose width is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_181", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a smallest block than block 1", "source": "block whose width is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no wider than brick 1 is tall", "source": "block whose width is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_196", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as long as brick 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me a block thicker than the length of block 1", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_225", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick has a length shorter than the height of brick 1", "source": "block whose length is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_252", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block not longer than block 1", "source": "block whose length is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_261", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what blocks have a width larger than the height of block 1", "source": "block whose width is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_265", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "choose a block that is the same length as block 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as wide as brick 1", "source": "block whose width is at least width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_278", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select all which is less than the width of block 1", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_308", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is not more than block 1", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_323", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is longer than brick 1 is tall", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_332", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose height is less than width of block 1", "source": "block whose height is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_test_340", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all the blocks at least as tall as block 1", "source": "block whose height is at least height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_358", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as tall as block 1", "source": "block whose height is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_361", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "locate a block that is longer tha block 1 is tall", "source": "block whose length is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_367", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is at least as long as block 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all 3 or 6 inch wide blocks", "source": "block whose width is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_20", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "select the 3 or 6 inch wide block", "source": "block whose width is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_118", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "find me all 3 or 6 inch high blocks", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "find me a block that is either 3 or 6 inches tall", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_220", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "block whose length is 3 inches or 6 inches", "source": "block whose length is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_225", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "is there a block with a width equal to either 3 or 6 inches", "source": "block whose width is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_242", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "block with height of either 3 inches or 6 inches", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_307", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "find me all 3 or 6 inch long blocks", "source": "block whose length is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_326", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "any block with width of either 3 inches or 6 inches", "source": "block whose width is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "which block has a width of either 3 or 6 inches", "source": "block whose width is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_641", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "select block of length 3 or 6 inches", "source": "block whose length is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_642", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "choose every block measuring 3 or 6 inches", "source": "block whose length is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_1050", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "which brick is 3 or 6 inches long", "source": "block whose length is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_1086", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "which brick is 3 or 6 inches high", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_1146", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "block whose height is 3 inches or 6 inches", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_train_1283", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "is there any block with a height of either 3 or 6 inches", "source": "block whose height is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_test_0", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "block either 3 inches or 6 inches long", "source": "block whose length is 3 inches or 6 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call concat (number 3 en.inch) (number 6 en.inch))))", "qid": "blocks_test_168", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "choose the block that has the same width as block 1 has height", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find the block with the same length as block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_34", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose length is length of block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_61", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks with the same shape as block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_71", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find the block that is the same height as block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_75", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what brick is as wide as brick 1 is long", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_84", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose length is width of block 1", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_129", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which block is the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_144", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks as tall as block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_186", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select a block that has the same width and height", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what brick is as long as brick 1 is wide", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_204", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "choose a block that is the same width as block 1s length", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_245", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what block is as tall as block 1 is wide", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_277", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks as tall as block 1 is long", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_328", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks with the same width as block 1", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me a block with the same width as block 1s length", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_434", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks with the same width as the length of block 1", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_482", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "is there a block with the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_495", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select a block with equivalent width to block 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_515", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select all blocks with height equal to the length of block 1", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_581", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block with the same height as block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_588", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose height is height of block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_624", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "choose a block that looks just like block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_630", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block with height equal to block 1s length", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_717", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose width is width of block 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_768", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block with same width that of block 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_796", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks as long as block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_849", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select a block with a height of 1 block width", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_881", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block as long as block 1 is wide", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_889", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find blocks with the length of block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_913", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select all bricks with length of 1", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_978", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block with same color as of block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_986", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what block is as long as block 1 is wide", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1010", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_train_1017", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block the same shape as block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_1099", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "choose a block which is as long as block 1 is wide", "source": "block whose length is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1223", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which brick is the same shape as brick 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_1276", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which block is the same height as block 1", "source": "block whose height is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1334", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which block is the same length as block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_train_1375", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block as long as the height of block 1", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1406", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what block has the same width as block 1s height", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which blocks have a height equal to the width of block 1", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1483", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks as tall as block 1 is wide", "source": "block whose height is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1511", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which brick is as long as brick 1 is tall", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_train_1520", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "bricks that are the same size as brick 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_train_1579", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find the block with the same shape as block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_train_1584", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose height is length of block 1", "source": "block whose height is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_test_7", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks with the same color as block 1", "source": "block whose color is color of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (call getProperty en.block.block1 (string color))))", "qid": "blocks_test_36", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which block is as wide as block 1 is high", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_76", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me a block with length equal to block 1s height", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_78", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "select all blocks with the same width as block 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_test_126", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block with the same length as block 1", "source": "block whose length is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_test_180", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which brick is the same width as brick 1", "source": "block whose width is width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string width))))", "qid": "blocks_test_264", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that is as long as block 1 is tall", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find me all blocks as wide as block 1 is tall", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block whose shape is shape of block 1", "source": "block whose shape is shape of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call getProperty en.block.block1 (string shape))))", "qid": "blocks_test_351", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find a block that has the length of block 1", "source": "block whose width is length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string length))))", "qid": "blocks_test_382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "is there a block that is as long as block 1 is high", "source": "block whose length is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_386", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "block as wide as height of block 1", "source": "block whose width is height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (call getProperty en.block.block1 (string height))))", "qid": "blocks_test_397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "how wide is block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_39", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what color is block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_train_86", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what color is brick 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_train_106", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what shape is block 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_train_115", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "height of block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_176", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "find me all blocks with the shape of block 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_train_248", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of block 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_train_389", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the height of brick 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_468", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how tall is block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_509", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "describe the shape of block 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_train_599", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of block 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_train_638", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the width of block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_644", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the color of block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_train_726", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the height of block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_843", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "select all blocks of length 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_train_883", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the color of block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_train_884", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of block 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_train_1169", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "width of block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_1262", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how tall is block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_1273", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what shape is brick 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_train_1314", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how wide is block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_1357", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the height of block 1", "source": "height of block 1", "target": "(call listValue (call getProperty en.block.block1 (string height)))", "qid": "blocks_train_1367", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the width of block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_train_1578", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the shape of block 1", "source": "shape of block 1", "target": "(call listValue (call getProperty en.block.block1 (string shape)))", "qid": "blocks_test_113", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the color of block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_test_207", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the length of brick 1", "source": "length of block 1", "target": "(call listValue (call getProperty en.block.block1 (string length)))", "qid": "blocks_test_208", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the width of block 1", "source": "width of block 1", "target": "(call listValue (call getProperty en.block.block1 (string width)))", "qid": "blocks_test_248", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "color of block 1", "source": "color of block 1", "target": "(call listValue (call getProperty en.block.block1 (string color)))", "qid": "blocks_test_263", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "find the block to the right of the block that is to the left of block 1", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_38", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks 2 below block 1", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_88", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is to the left of the block that block 1 is above", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is right of the block which block 1 is right of", "source": "block that is right of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_167", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of that block 1 is above", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_209", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is to the right of the block that block 1 is below", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_231", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is to the left of the block that block 1 is below", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below and two left of block 1", "source": "block that is below block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_325", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me a block that block 1 is to the left of", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block left and below block 1", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two above block 1", "source": "block that is above block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_400", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "see block above block 1 and get block left of that one", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_411", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "two blocks right of block 1", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_494", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is right and below block 1", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_496", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2nd left of block 1", "source": "block that is left of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_503", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block which is at the left of the block below block 1", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_590", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of the block that block 1 is above", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_602", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block above the block at right of block 1", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_626", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is below the block that block 1 is below", "source": "block that is below block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_662", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block up and left from block 1", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "second left of block 1", "source": "block that is left of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_686", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is 2 blocks below block 1", "source": "block that is below block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_727", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above that block 1 is below", "source": "block that is above block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_766", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block is at the second left of block 1", "source": "block that is left of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_829", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is to the right of the block that block 1 is above", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_930", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is above the block that is to the left of block 1", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_953", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks which is left and above block 1", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_970", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what blocks are above the block that is to the right of block 1", "source": "block that is above block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1033", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is below the block that is below block 1", "source": "block that is below block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1059", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of that block 1 is below", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1096", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is below the block which block 1 is above", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is above the block of block1 ", "source": "block that is above block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1152", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks over that block 1 is above", "source": "block that is above block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1153", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is above the block that is below block 1", "source": "block that is above block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks right of block 1", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1247", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which block is below a block that block 1 is to the right of", "source": "block that is below block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1264", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is above the block that block 1 is below", "source": "block that is above block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block right of block 1", "source": "block that is below block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks over that block 1 is left of", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1320", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block to the left of a block that block 1 is left of", "source": "block that is left of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1332", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "see block below block 1 and choose the one left of it", "source": "block that is left of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1338", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is below the block that block 1 is to the left of", "source": "block that is below block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1388", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block below the block under block 1", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks that is below which block 1 is right of", "source": "block that is below block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks above that block 1 is right of", "source": "block that is above block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1431", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the right of the block that block 1 is to the right of", "source": "block that is right of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_1439", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block two up from block 1", "source": "block that is above block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1442", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block right of the block below block 1", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is to the left of the block that block 1 is below", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1506", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "above block 1 to the left", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1528", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below and to right of block 1", "source": "block that is below block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1552", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of the block that block 1 is below", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1564", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right to whatever block 1 is left of", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1576", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is left of the block that block 1 is right of", "source": "block that is left of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_11", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is below the block that block 1 is to the right of", "source": "block that is below block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_18", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is above the block that block 1 is to the right of", "source": "block that is above block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_44", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks 2 left of block 1", "source": "block that is left of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_test_55", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "get me the blocks to the left of the block above block 1", "source": "block that is left of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_test_170", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find a block that is below block 1", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_test_186", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "above block to right of block 1", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_test_219", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "2 blocks below block 1", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_test_335", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of what block 1 is right of", "source": "block that is left of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "select the block with the most shapes", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_59", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which brick has the most colors", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_train_257", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "select all blocks which has least number of shape", "source": "block that has the least number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string shape)))", "qid": "blocks_train_390", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "block that has the least number of color", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_train_505", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find the block with the most shapes", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_812", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "choose the most colorful block", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_train_1014", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find me the block with the least colors", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_train_1054", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which brick has the most shapes", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_1057", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "block that has the most number of shape", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_1068", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "select the least colorful brick", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_train_1147", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what block has the fewest shapes", "source": "block that has the least number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string shape)))", "qid": "blocks_train_1196", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which type of block has the most shapes", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_1235", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "choose the most shapeless block", "source": "block that has the least number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string shape)))", "qid": "blocks_train_1396", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which brick has the least number of shapes", "source": "block that has the least number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string shape)))", "qid": "blocks_train_1513", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find the block with the most colors", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_train_1521", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find me the most colorful block", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_test_52", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "select the brick with the least number of shapes", "source": "block that has the least number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string shape)))", "qid": "blocks_test_74", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which brick has the least number of colors", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_test_90", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "block that has the most number of color", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_test_130", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find the block with the greatest number of colors on it", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_test_295", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what block has the least number of colors", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_test_305", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which is the least colorful block", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_test_331", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "number of block", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_417", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of bricks", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_544", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many blocks are there", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_723", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of blocks", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_963", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the number of the block", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1118", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "tell me the number of blocks", "source": "number of block", "target": "(call listValue (call .size (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1355", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me the block that is to the right of two or more blocks", "source": "block that is right of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_27", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is above less than two bricks", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_70", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block below two other blocks", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_89", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks underneath at least 2 blocks", "source": "block that is below more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_95", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks left of more than 2 blocks", "source": "block that is left of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_127", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block to left of two or more blocks", "source": "block that is left of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_131", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block to right of two or more blocks", "source": "block that is right of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_143", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is above two blocks", "source": "block that is above two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_161", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is right of at most one block", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_162", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block is to the left of no more than two blocks", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_169", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is above at most two block", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_217", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks above at most 2 blocks", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_221", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me the block that is below two or more blocks", "source": "block that is below more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_251", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block below 2 blocks", "source": "block that is below two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_270", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has at most two blocks above it", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_276", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above two or more blocks", "source": "block that is above more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_279", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is below no more than two blocks", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_304", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is to the left of more than two blocks", "source": "block that is left of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_306", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the blocks below block 2", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_319", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is below less than two bricks", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_356", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block right of block 2", "source": "block that is right of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_431", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is to the left of less than two bricks", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_450", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is to the right of two blocks", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_490", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above more than 2 blocks", "source": "block that is above more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_517", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block to right of two others", "source": "block that is right of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_518", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick has no more than two blocks to its left", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_535", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block left from two others", "source": "block that is left of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_538", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block piled on any other block but only one", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_580", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is right of at most two block", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_598", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is above less than two block", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_702", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above less than two blocks", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_744", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block that is to the right of more than 2 blocks", "source": "block that is right of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_767", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select a block with two blocks below it", "source": "block that is above at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_778", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block to the right of at least 2 blocks", "source": "block that is right of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_797", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is right of less than two block", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_842", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks at least 2 blocks below", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_858", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which blocks are left of singleorfewer blocks", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_859", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block that is to the left of two or less blocks", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_908", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block on bottom", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_931", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that has at most 2 blocks to the right of it", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_962", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block left of 2 blocks", "source": "block that is left of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1037", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks below two block", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1053", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the blocks to the right of greater that two blocks", "source": "block that is right of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1116", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is below two blocks ", "source": "block that is below two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1120", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has less than two blocks to the left of it", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1127", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks 2 blocks from the right", "source": "block that is right of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1157", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the bricks below at most 2 blocks", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1203", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block with at most two blocks to the left of it", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1251", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block right of at least two block", "source": "block that is right of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1261", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks below at most 1 blocks", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1286", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block with less that two blocks above it", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1336", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block left of more than 2 blocks", "source": "block that is left of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1348", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks below 2 blocks", "source": "block that is below two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1353", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with at least 2 blocks to the right", "source": "block that is left of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1360", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block above two others", "source": "block that is above two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1364", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all the blocks that has at most 2 blocks to the left", "source": "block that is right of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1391", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me the block that is left of two blocks", "source": "block that is left of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1399", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with at most two blocks to the left", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1407", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks that is right of more than 2 blocks", "source": "block that is right of more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1411", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block below two or more blocks", "source": "block that is below more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1417", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks left of 2 blocks", "source": "block that is left of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1507", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find all blocks above 2 or fewer blocks", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1515", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has less than two blocks to the right of it", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1537", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find that block that is to the left of just one other block", "source": "block that is left of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1541", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block that is to the left of two or more blocks", "source": "block that is left of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1542", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is below no more than two bricks", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1546", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block that has only one block to the left of it", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1557", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that has at most two blocks to its left", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1568", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block below block 2", "source": "block that is below less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_46", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is above at least two other blocks", "source": "block that is above at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_64", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks that has less than 2 blocks to the left", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_183", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block with at most two blocks below it", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_194", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block that is no higher than 2 blocks", "source": "block that is above at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_205", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks above 2 blocks", "source": "block that is above two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_212", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a block under one or two blocks at most", "source": "block that is below at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_218", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "select the block on the left corner", "source": "block that is left of two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_231", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which brick is to the right of less than two bricks", "source": "block that is right of less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_241", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is below two or more blocks", "source": "block that is below at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string below) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_272", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what blocks are above more than two blocks", "source": "block that is above more than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_292", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that is left of at most two block", "source": "block that is left of at most two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string left) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_299", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is above two other blocks", "source": "block that is above two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_339", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is above at two or more blocks", "source": "block that is above at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_356", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block has less than two blocks below it", "source": "block that is above less than two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string above) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_359", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all blocks with more than 2 blocks to its left", "source": "block that is right of at least two block", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string right) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_test_396", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "locate the block that is special", "source": "block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)))", "qid": "blocks_train_241", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "a special block", "source": "block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)))", "qid": "blocks_test_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find me all the special blocks", "source": "block that is special", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)))", "qid": "blocks_test_246", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "not more than 3 inches wide block", "source": "block whose width is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_17", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks longer than 3 inches", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_32", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is shorter than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_47", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find blocks wider than 3 inches", "source": "block whose width is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_91", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks at least 3 inches in width", "source": "block whose width is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_96", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is 3 or less inches wide", "source": "block whose width is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_103", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks at most 3 inches long", "source": "block whose length is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_133", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "select a brick that is at least 3 inches wide", "source": "block whose width is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_187", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose height is at least 3 inches", "source": "block whose height is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_281", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose height is smaller than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks shorter than 3 inches", "source": "block whose length is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_303", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is less than 3 inches long", "source": "block whose length is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick has a width smaller than 3 inches", "source": "block whose width is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me a block wider than 3 inches", "source": "block whose width is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is wider than 3 inches", "source": "block whose width is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_391", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is 3 inches or less long", "source": "block whose length is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_404", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "select the block that is at least 3 inches tall", "source": "block whose height is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find the block that is not less than 3 inches tall", "source": "block whose height is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_447", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "select a brick that is no bigger than 3 inches long", "source": "block whose length is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_501", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "choose a block that is taller than 3 inches", "source": "block whose height is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_596", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose length is smaller than 3 inches", "source": "block whose length is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_610", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose height is at most 3 inches", "source": "block whose height is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_615", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find a block shorter than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_655", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all the bricks at least 3 inches long", "source": "block whose length is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_680", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks at most as tall as 3 inches", "source": "block whose height is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_816", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is 3 or less inches tall", "source": "block whose height is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_856", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find the block taller than 3 inches", "source": "block whose height is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_876", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks with a width shorter than 3 inches", "source": "block whose width is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_899", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block that is taller than three inches", "source": "block whose height is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_903", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick has a length shorter than 3 inches", "source": "block whose length is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_916", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "select the block with a width smaller than 3 inches", "source": "block whose width is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_923", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "select all blocks with length greater than 3", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_943", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose height is larger than 3 inches", "source": "block whose height is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_952", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks no bigger than 3 inches", "source": "block whose length is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_960", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "choose a 3 inch tall brick", "source": "block whose height is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_967", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find the block that is at least 3 inches long", "source": "block whose length is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1005", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is higher than 3 inches", "source": "block whose height is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1009", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "select a block that has a length of more than 3 inches", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1023", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "gather all the blocks that are 3 inches or more", "source": "block whose length is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1078", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find a block that has a length of less than 3 inches", "source": "block whose length is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1103", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find the block with a height less than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1133", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which blocks exceed 3inches wide", "source": "block whose width is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1185", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find a block with a diameter that is wider than 3 inches total", "source": "block whose width is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1189", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose length is larger than 3 inches", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1243", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is at least 3 inches high", "source": "block whose height is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1255", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "select the blocks less than 3 inches", "source": "block whose length is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1272", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what brick is no more than 3 inches high", "source": "block whose height is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1311", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is less than 3 inches wide", "source": "block whose width is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks at most 3 inches wide", "source": "block whose width is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1319", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find a block with a height no more than 3 inches", "source": "block whose height is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1331", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "choose a block no bigger than 3 inches", "source": "block whose width is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1390", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is at least 3 inches wide", "source": "block whose width is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1404", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is no wider than 3 inches", "source": "block whose width is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is longer than 3 inches", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1438", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks with length less than 3 inches", "source": "block whose length is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose width is smaller than 3 inches", "source": "block whose width is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1505", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks at least 3 inches wide", "source": "block whose width is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1543", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find the block with a maximum height of 3 inches", "source": "block whose height is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1566", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is at least 3 inches long", "source": "block whose length is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1569", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is longer than 3 inches", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1586", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is shorter than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1588", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks with width less than 3 inches", "source": "block whose width is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_test_240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me a block at least 3 inches long", "source": "block whose length is at least 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_test_328", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all the blocks shorter than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_test_387", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "above and left of block 1", "source": "block that block 1 is below and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_14", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the right of block 1", "source": "block that block 1 is left of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_36", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is right and below of", "source": "block that block 1 is right of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_58", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks that is left or right of block 1", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_105", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left and above block 1", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_113", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select blocks that are below and to the left of block 1", "source": "block that block 1 is below and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_179", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block right and up from block 1", "source": "block that block 1 is left of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_193", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is to the right and above", "source": "block that block 1 is above and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_208", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which block is above and to left of block 1 ", "source": "block that block 1 is left of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_264", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that block 1 is above", "source": "block that block 1 is above and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_375", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what blocks are to the left and below block 1", "source": "block that block 1 is above and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_401", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the right of block 1", "source": "block that block 1 is right of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_416", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that is on the right side of block 1", "source": "block that block 1 is left of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_418", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 at right and left", "source": "block that block 1 is left of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_446", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and to right of block 1", "source": "block that block 1 is below and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_461", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is to ther right of and that has a shape of a pyramid", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_537", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block which has block 1s below and right", "source": "block that block 1 is below and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_579", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block above block 1", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_614", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block left of block 1", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_679", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that has block 1 above and below", "source": "block that block 1 is above and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_707", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the pyramid block that is to the right of block 1", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_719", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above which block 1 is right of", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_769", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "above and to the right of block 1", "source": "block that block 1 is below and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_822", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the pyramid shaped block below block 1", "source": "block that block 1 is above and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_825", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the left of block 1", "source": "block that block 1 is left of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_840", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block below block 1", "source": "block that block 1 is above and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_868", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the pyramid shaped block", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_895", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below and right of block 1", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_919", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block to the right of block 1 and to the left of block 1", "source": "block that block 1 is left of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_982", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the right of block 1 and is in the shape of a pyramid", "source": "block that block 1 is left of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_994", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks to the left of and above block 1", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1028", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks below block 1", "source": "block that block 1 is below and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1067", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is right of and which is left of block 1", "source": "block that block 1 is right of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1098", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 above and left", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1129", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 on the right", "source": "block that block 1 is right of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1149", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a block with block 1 below and to the right", "source": "block that block 1 is below and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_1156", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 on its right and is pyramidshaped", "source": "block that block 1 is right of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1170", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and below", "source": "block that block 1 is left of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1190", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block above the left one", "source": "block that block 1 is above and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1198", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all pyramid blocks that block 1 is below", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1212", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block right and below block 1", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1347", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that block 1 is to the right of", "source": "block that block 1 is right of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1352", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block left of block one", "source": "block that block 1 is right of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1377", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select all the pyramidshaped blocks above block1", "source": "block that block 1 is above and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1401", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which block is above block 1", "source": "block that block 1 is above and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1437", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is left and right of", "source": "block that block 1 is left of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_1446", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is below", "source": "block that block 1 is below and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1461", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the right of block 1", "source": "block that block 1 is right of and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_train_1464", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks above and below block 1", "source": "block that block 1 is below and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_train_1493", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above block one", "source": "block that block 1 is below and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_train_1512", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that is left of block 1", "source": "block that block 1 is left of and that is left of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string left) (string =) en.block.block1))", "qid": "blocks_train_1570", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block on the right", "source": "block that block 1 is above and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_test_19", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is both above and to the right of block 1", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_test_20", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks that block 1 is below and right of", "source": "block that block 1 is below and that is right of block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string right) (string =) en.block.block1))", "qid": "blocks_test_68", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and below block 1", "source": "block that block 1 is below and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_test_104", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramid shaped block is at right of block 1", "source": "block that block 1 is left of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_140", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "right of block one with pyramid shape", "source": "block that block 1 is left of and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_236", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select block 1 and all of the blocks below it", "source": "block that block 1 is above and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_247", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that block 1 is below and that has a shape of a pyramid", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_284", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that is to the left and below block 1", "source": "block that block 1 is left of and that is below block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1) (string below) (string =) en.block.block1))", "qid": "blocks_test_330", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 below and left", "source": "block that block 1 is right of and that is above block 1", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1) (string above) (string =) en.block.block1))", "qid": "blocks_test_372", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what pyramid shaped block above block 1", "source": "block that block 1 is below and whose shape is a pyramid", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_test_393", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me any pyramidshaped block", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_55", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks not right of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_train_109", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the blocks not below block 1", "source": "block that not is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "qid": "blocks_train_135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks not left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_train_136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block located to the left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_train_250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks to the left of block 1", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_321", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the pyramid blocks", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_432", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is not to the left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_train_470", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks above block 1", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_train_575", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is not right of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_train_592", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is to the left of brick 1", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_635", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose shape is a pyramid", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_718", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select all pyramid blocks", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_814", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks below block 1", "source": "block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1))", "qid": "blocks_train_828", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which block is to the left of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_train_866", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the blocks right of block 1", "source": "block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1))", "qid": "blocks_train_870", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is not below brick 1", "source": "block that not is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "qid": "blocks_train_926", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the blocks that is not a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1003", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that has block 1 to its right", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1112", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a block that is not a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1115", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is left of block 1", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1138", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is not to the left of brick 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_train_1163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is not pyramid shaped", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1171", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block shaped like a pyramid", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_1176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is above block 1", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1202", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that is not above block 1", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_train_1226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is above brick 1", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select all blocks above block 1", "source": "block that not is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "qid": "blocks_train_1379", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "locate the block that has a shape other than that of a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1383", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is below brick 1", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_train_1412", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block to the right of block 1", "source": "block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1))", "qid": "blocks_train_1456", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks not above block 1", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_train_1460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block whose shape is not a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_train_1470", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block piled on top of block 1", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_train_1474", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is not below it", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_train_1589", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that is not left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_test_32", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is right of block 1", "source": "block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1))", "qid": "blocks_test_35", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is not to the right of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_test_85", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which blocks are not above block 1", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_test_108", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that not is left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_test_227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is not shaped like a pyramid", "source": "block whose shape is not a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string !=) en.shape.pyramid))", "qid": "blocks_test_268", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block that is not below block 1", "source": "block that not is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "qid": "blocks_test_290", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a block with block 1 above it", "source": "block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1))", "qid": "blocks_test_324", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a block with block 1 below it", "source": "block that is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1))", "qid": "blocks_test_325", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the blocks that are not to the right of block 1", "source": "block that not is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string !=) en.block.block1))", "qid": "blocks_test_392", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the 3 inch long block", "source": "block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_52", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick is 3 inches wide", "source": "block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_56", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inches long block", "source": "block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_124", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "choose a block that is not 3 inches", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_182", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block that is 3 inches long", "source": "block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_203", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what blocks have a height not equal to 3 inches", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "locate a 3inch lwide block", "source": "block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_398", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block without a length of 3 inches", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_520", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "gather all the blocks that are not 3 inches long", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_762", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose length is 3 inches", "source": "block whose length is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_808", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the 3 inch tall block", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_832", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all the blocks that is not 3 inches long", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_885", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the block with 3 inches of height", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1000", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose length is not 3 inches", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1015", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what blocks height is not 3 inches", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1076", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose height is not 3 inches", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1142", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch high blocks", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1199", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks not 3 inches high", "source": "block whose height is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick is not 3 inches long", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1395", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all the blocks that are shorter or longer than 3 inches", "source": "block whose length is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1410", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select all bricks that are not 3 inches wide", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick is not 3 inches wide", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_train_1554", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "3 inches high block", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1590", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks not 3 inches wide", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_test_45", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select all blocks that dont have a width of 3 inches", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_test_116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block is 3 inches wide", "source": "block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_175", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a block that is not 3 inches wide", "source": "block whose width is not 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string !=) (number 3 en.inch)))", "qid": "blocks_test_315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose height is 3 inches", "source": "block whose height is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_test_343", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block whose width is 3 inches", "source": "block whose width is 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_test_357", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select the longest brick", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_train_28", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "choose the brick with the smallest width", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_125", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the shortest block", "source": "block that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string length))))", "qid": "blocks_train_137", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the block with the biggest width", "source": "block that has the largest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string width))))", "qid": "blocks_train_168", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what block has the greatest height", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_188", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block has the shortest length", "source": "block that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string length))))", "qid": "blocks_train_284", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the widest block", "source": "block that has the largest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string width))))", "qid": "blocks_train_300", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what block is not longer than any other", "source": "block that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string length))))", "qid": "blocks_train_448", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the shortest block", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_465", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block is the tallest", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_504", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "block that has the smallest width", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_619", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "block that has the smallest height", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_637", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the skinniest block", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_643", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block is the smallest", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_658", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the block that has the smallest length", "source": "block that has the smallest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string length))))", "qid": "blocks_train_666", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the shortest block", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_910", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block is the shortest", "source": "block that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "blocks_train_1042", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the longest block", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_train_1159", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "block with lowest width", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_1168", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the tallest block", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_1237", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block has the largest height", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_1341", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "block that has the largest height", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_train_1426", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find me the block with the smallest width", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_1441", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what block is the longest", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_train_1444", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "choose the brick that is the least thick", "source": "block that has the smallest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string min) (call ensureNumericProperty (string width))))", "qid": "blocks_train_1487", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the longest block", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_test_70", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "select the tallest block", "source": "block that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "blocks_test_193", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which brick is the widest", "source": "block that has the largest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string width))))", "qid": "blocks_test_296", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the widest block", "source": "block that has the largest width", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string width))))", "qid": "blocks_test_302", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which block has the largest length", "source": "block that has the largest length", "target": "(call listValue (call superlative (call getProperty (call singleton en.block) (string !type)) (string max) (call ensureNumericProperty (string length))))", "qid": "blocks_test_346", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
