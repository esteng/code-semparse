{"paraphrased": "what recipe was posted in 2004", "source": "recipe whose posting date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_528", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show recipes whose posting date is not 2004", "source": "recipe whose posting date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string !=) (date 2004 -1 -1)))", "qid": "recipes_train_401", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what recipes posting date is not in 2004", "source": "recipe whose posting date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string !=) (date 2004 -1 -1)))", "qid": "recipes_train_22", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which recipe was not posted in 2004", "source": "recipe whose posting date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string !=) (date 2004 -1 -1)))", "qid": "recipes_train_98", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "a recipe which posted after 2004", "source": "recipe whose posting date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_test_56", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what is a recipe that was not posted in 2004", "source": "recipe whose posting date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string !=) (date 2004 -1 -1)))", "qid": "recipes_train_56", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show me recipes not posted in 2004", "source": "recipe whose posting date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string !=) (date 2004 -1 -1)))", "qid": "recipes_train_776", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show me recipes posted in 2004", "source": "recipe whose posting date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_369", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show me recipes not posted in 2004", "source": "recipe whose posting date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string !=) (date 2004 -1 -1)))", "qid": "recipes_train_863", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show me recipes that were not posted in 2004", "source": "recipe whose posting date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string !=) (date 2004 -1 -1)))", "qid": "recipes_train_826", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find recipes posted in 2004", "source": "recipe whose posting date is 2004 and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_394", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show me all recipes from 2004", "source": "recipe whose posting date is 2004 and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_test_0", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "the receipe posting date is 2004", "source": "recipe whose posting date is 2004 and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_test_55", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show me all the recipes posted in 2004", "source": "recipe whose posting date is 2004 and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_125", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what recipes posting date is 2004", "source": "recipe whose posting date is 2004 and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_371", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show me all recipes posted in 2004", "source": "recipe whose posting date is 2004 and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_test_108", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "are there any recipes which were posted twice in 2004", "source": "recipe whose posting date is 2004 and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_231", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which recipe was posted in 2004", "source": "recipe whose posting date is 2004 and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string posting_date) (string =) (date 2004 -1 -1)) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_165", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "either 2004 or 2010", "source": "2004 or 2010", "target": "(call listValue (call concat (date 2004 -1 -1) (date 2010 -1 -1)))", "qid": "recipes_train_173", "anonymized_target": "(call listValue (call concat (date 2004 -1 -1) (date 2010 -1 -1)))"}
{"paraphrased": "what recipes dont call for milk", "source": "recipe that not requires milk", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string !=) en.ingredient.milk))", "qid": "recipes_train_228", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a recipe for a meal other than lunch", "source": "recipe that not is for lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string !=) en.meal.lunch))", "qid": "recipes_train_828", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which recipes are not for lunch", "source": "recipe that not is for lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string !=) en.meal.lunch))", "qid": "recipes_train_705", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me recipes that cannot be taken for lunch", "source": "recipe that not is for lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string !=) en.meal.lunch))", "qid": "recipes_train_468", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me milkfree recipes", "source": "recipe that not requires milk", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string !=) en.ingredient.milk))", "qid": "recipes_train_405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a recipe that is not suitable for lunch", "source": "recipe that not is for lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string !=) en.meal.lunch))", "qid": "recipes_train_773", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what recipe makes a non lunch meal", "source": "recipe that not is for lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string !=) en.meal.lunch))", "qid": "recipes_train_815", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me recipes not for lunch", "source": "recipe that not is for lunch", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string !=) en.meal.lunch))", "qid": "recipes_test_1", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all recipes that require milk", "source": "recipe that requires milk", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk))", "qid": "recipes_train_639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which recipe does not need milk", "source": "recipe that not requires milk", "target": "(call listValue (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string !=) en.ingredient.milk))", "qid": "recipes_test_96", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "for which meal is rice pudding or quiche had", "source": "meal that rice pudding or quiche is for", "target": "(call listValue (call filter (call getProperty (call singleton en.meal) (string !type)) (call reverse (string meal)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_train_691", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what ingredients are used in rice pudding or quiche", "source": "ingredient that rice pudding or quiche requires", "target": "(call listValue (call filter (call getProperty (call singleton en.ingredient) (string !type)) (call reverse (string requires)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_train_673", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me ingredients for rice pudding or quiche", "source": "ingredient that rice pudding or quiche requires", "target": "(call listValue (call filter (call getProperty (call singleton en.ingredient) (string !type)) (call reverse (string requires)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_test_183", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me ingredients needed for rice pudding and quiche", "source": "ingredient that rice pudding or quiche requires", "target": "(call listValue (call filter (call getProperty (call singleton en.ingredient) (string !type)) (call reverse (string requires)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_train_155", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what meal is rice pudding or quiche in", "source": "meal that rice pudding or quiche is for", "target": "(call listValue (call filter (call getProperty (call singleton en.meal) (string !type)) (call reverse (string meal)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_train_687", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "for what meal is rice pudding or quiche", "source": "meal that rice pudding or quiche is for", "target": "(call listValue (call filter (call getProperty (call singleton en.meal) (string !type)) (call reverse (string meal)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_train_307", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what are the ingredients of rice pudding or quiche", "source": "ingredient that rice pudding or quiche requires", "target": "(call listValue (call filter (call getProperty (call singleton en.ingredient) (string !type)) (call reverse (string requires)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_train_772", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what ingredient is required in either rice pudding or quiche", "source": "ingredient that rice pudding or quiche requires", "target": "(call listValue (call filter (call getProperty (call singleton en.ingredient) (string !type)) (call reverse (string requires)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_train_364", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what meal has quiche and rice pudding", "source": "meal that rice pudding or quiche is for", "target": "(call listValue (call filter (call getProperty (call singleton en.meal) (string !type)) (call reverse (string meal)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_train_252", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which ingredient is needed by rice pudding or quiche", "source": "ingredient that rice pudding or quiche requires", "target": "(call listValue (call filter (call getProperty (call singleton en.ingredient) (string !type)) (call reverse (string requires)) (string =) (call concat en.recipe.rice_pudding en.recipe.quiche)))", "qid": "recipes_train_787", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which recipe follows one cuisine", "source": "recipe that has less than two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string <) (number 2)))", "qid": "recipes_test_99", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "show me recipes with fewer than two cuisines", "source": "recipe that has less than two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string <) (number 2)))", "qid": "recipes_train_721", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what recipe has no fewer than two cuisines", "source": "recipe that has at least two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string >=) (number 2)))", "qid": "recipes_train_435", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what recipe has no greater than two cuisines", "source": "recipe that has more than two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string >) (number 2)))", "qid": "recipes_test_33", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which recipes have three or more cuisine", "source": "recipe that has more than two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string >) (number 2)))", "qid": "recipes_train_222", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "show me recipe that has at least have two cuisine", "source": "recipe that has at least two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string >=) (number 2)))", "qid": "recipes_train_194", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what recipe has one cuisine", "source": "recipe that has less than two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string <) (number 2)))", "qid": "recipes_train_24", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "show me recipes for more than two cuisines", "source": "recipe that has more than two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string >) (number 2)))", "qid": "recipes_test_21", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is a recipe from fewer than two cuisines", "source": "recipe that has less than two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string <) (number 2)))", "qid": "recipes_train_831", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what recipe falls under two cuisines", "source": "recipe that has two cuisine", "target": "(call listValue (call countComparative (call getProperty (call singleton en.recipe) (string !type)) (string cuisine) (string =) (number 2)))", "qid": "recipes_train_466", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is a recipe with the most ingredients", "source": "recipe that has the most number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string max) (string cuisine)))", "qid": "recipes_train_672", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which recipe is found in many cuisines", "source": "recipe that has the most number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string max) (string cuisine)))", "qid": "recipes_test_85", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what is a recipe from the fewest cuisines", "source": "recipe that has the least number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string cuisine)))", "qid": "recipes_train_17", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which recipe falls under the least kinds of cuisine", "source": "recipe that has the least number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string cuisine)))", "qid": "recipes_train_207", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "show recipes with one cuisine", "source": "recipe that has the least number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string cuisine)))", "qid": "recipes_train_692", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which recipe has the least number of cuisines", "source": "recipe that has the least number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string cuisine)))", "qid": "recipes_train_188", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "recipe in least cuisines", "source": "recipe that has the least number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string cuisine)))", "qid": "recipes_train_771", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "show recipes with the maximum number of cuisines", "source": "recipe that has the most number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string max) (string cuisine)))", "qid": "recipes_train_505", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what recipe makes the fewest types of cuisine", "source": "recipe that has the least number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string cuisine)))", "qid": "recipes_train_150", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what recipe has the most types of cuisine", "source": "recipe that has the most number of cuisine", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string max) (string cuisine)))", "qid": "recipes_train_707", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "show recipes posted in 2004 and has milk as one of its ingredients", "source": "recipe that requires milk and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_601", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which recipe posted in 2004 needs milk for preparation", "source": "recipe that requires milk and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_777", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what recipes posting date is in 2004 and requires milk", "source": "recipe that requires milk and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_test_91", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show me recipes for lunch posted in 2004", "source": "recipe that is for lunch and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_400", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "show me recipes that need milk and were posted in 2004", "source": "recipe that requires milk and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_714", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "lunch recipes posted in 2004", "source": "recipe that is for lunch and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_313", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what lunch recipes posting date is 2004", "source": "recipe that is for lunch and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_761", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "recipes posted in 2004 that require milk", "source": "recipe that requires milk and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_test_37", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what recipes posted in 2004 require milk", "source": "recipe that requires milk and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string requires) (string =) en.ingredient.milk) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_578", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find a lunch recipe that was posted in 2004", "source": "recipe that is for lunch and whose posting date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.recipe) (string !type)) (string meal) (string =) en.meal.lunch) (string posting_date) (string =) (date 2004 -1 -1)))", "qid": "recipes_train_734", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find recipes for all kinds of meals", "source": "recipe that is for the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string max) (string meal) (call getProperty (call singleton en.meal) (string !type))))", "qid": "recipes_train_824", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "show me recipes that work for more than one meal", "source": "recipe that is for the least number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string meal) (call getProperty (call singleton en.meal) (string !type))))", "qid": "recipes_train_61", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "recipe for the most number of meal", "source": "recipe that is for the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string max) (string meal) (call getProperty (call singleton en.meal) (string !type))))", "qid": "recipes_train_23", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what recipe is designed for the most number of meals", "source": "recipe that is for the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string max) (string meal) (call getProperty (call singleton en.meal) (string !type))))", "qid": "recipes_test_14", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which recipes require the least amount of ingredients", "source": "recipe that requires the least number of ingredient", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string requires) (call getProperty (call singleton en.ingredient) (string !type))))", "qid": "recipes_train_543", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "show me recipes requiring fewest ingredients", "source": "recipe that requires the least number of ingredient", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string requires) (call getProperty (call singleton en.ingredient) (string !type))))", "qid": "recipes_test_202", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "show me recipes requiring the fewest ingredients", "source": "recipe that requires the least number of ingredient", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string requires) (call getProperty (call singleton en.ingredient) (string !type))))", "qid": "recipes_train_782", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "show me recipes for the most meals", "source": "recipe that is for the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string max) (string meal) (call getProperty (call singleton en.meal) (string !type))))", "qid": "recipes_train_410", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what recipe serves at the most three", "source": "recipe that is for the most number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string max) (string meal) (call getProperty (call singleton en.meal) (string !type))))", "qid": "recipes_train_14", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "show me recipe to do a meal for a single person", "source": "recipe that is for the least number of meal", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.recipe) (string !type)) (string min) (string meal) (call getProperty (call singleton en.meal) (string !type))))", "qid": "recipes_train_116", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
