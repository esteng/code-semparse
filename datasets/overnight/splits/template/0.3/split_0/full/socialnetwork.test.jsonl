{"paraphrased": "find employees with last day not in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3357", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is anything but 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3084", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find student with last day other than 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1481", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees starting other than in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_780", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined study in years other than 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3304", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started in years other than 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2765", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students not finishing in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1714", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students graduated any year but 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1503", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees not starting in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_265", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a worker who didnt start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3217", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who have friends that were born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "any friend of anyone born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2091", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is friends with alices friend", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_1572", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people that are friends with someone born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people who are friends of alices friends", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who are alices friends friends", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_228", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who have single friends", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "a friend of alices friend", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what person is friends with males", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1425", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all people who has a friend born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who have more than two friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_437", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who has minimum two friends", "source": "person that is friends with at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2546", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who has maximum two friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_762", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who has less than two friends", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3454", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "someone with over two friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1780", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find people who are friends with no more than two people", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1948", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find someone who has at most two friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_611", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people who have more than two friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1540", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who has two friends", "source": "person that is friends with two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_833", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "person with more then two people", "source": "person that is friends with at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_935", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what people are logged in who are also friends with alice", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3435", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a friend of alice who is online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1489", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are friends with alice and currently online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_17", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are logged in who are alices friends", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_392", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which of alices friends is online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1081", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is online and is friends with", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2912", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friends who are currently online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2890", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which of alices friends are online right now", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3176", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "frinds of alice currently logged in", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_481", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friends who are logged in", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_580", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what online person is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_423", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "males who are online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_908", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "any male who has logged in", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2513", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that are currently online and friends with alice", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1779", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "anyone single who is logged in", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3046", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "online male member", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_71", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are male and currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3263", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person is logged in and was born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2576", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friend who is logged in", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1508", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_69", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the alices 2004 end date", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_313", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what was the graduation date of alice in 2004", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_1181", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what date did alice leave her job in 2004", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_776", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "when did alice start the job she left in 2004", "source": "start date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_94", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what is alices job title from company she left in 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_1468", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "who is alices employer since 2004", "source": "employer of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what was alices job title in 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_test_139", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "when did alice start the job that she quit in 2004", "source": "start date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_2196", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what university did alice attend in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_1650", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "find people with employment end date as 2004", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_864", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "find employees with fewer than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1250", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees with less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_87", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees have fewer than 2 job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2901", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have the greatest amount of job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_337", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who has not more than two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2906", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student has attended less than two universitys", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_668", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students have no more than two majors", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_345", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with at most two jobs", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_494", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with one job title", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_426", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with one employer", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_833", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who stopped working in 2004 or later", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3093", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students who have an end date less than 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1499", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees starting in or after 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2138", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started in 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_330", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have an end date no later than 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_852", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2997", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees quit after 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3365", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students starting on or after 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2746", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started no later than 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_749", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working in or before 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1718", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is not alices gender", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_671", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people is alice not friends with", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_test_779", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what gender is alice not", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_485", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_591", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where was alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_3131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_test_656", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who have a different relationship status than alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1543", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where was alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1985", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_2405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where wa alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2929", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "place where alice was born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2675", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is alices date of birth", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_3361", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "is alice male or female", "source": "gender of alice", "target": "(call listValue (call getProperty en.person.alice (string gender)))", "qid": "socialnetwork_train_708", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is alices birthdate", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_2567", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "where is alice born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_test_57", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "when was alice born", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_1925", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the birth date of alice", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_test_50", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how tall is alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_2526", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "where was alice born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_test_179", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the status of alices relationship", "source": "relationship status of alice", "target": "(call listValue (call getProperty en.person.alice (string relationship_status)))", "qid": "socialnetwork_train_2936", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "people that were born on the day alice started work", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_train_329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born on the date alice left", "source": "person whose birthdate is end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_train_1728", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born on alices start date", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_train_2626", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people born after alices last day of work", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_1170", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people born the same day alice ended school", "source": "person whose birthdate is end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_train_1313", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people whose birthday is the same as alices end date", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_1523", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who have a birthday on the same day alice started her job", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_test_867", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who were born the same day alice started school", "source": "person whose birthdate is start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_train_291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born on alices first day of school", "source": "person whose birthdate is start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_train_2095", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person was born on the last day of alices employment", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_2068", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where was alices friend born", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1644", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who are alices friends from her hometown", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_808", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which city were alices friends born in", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1983", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people of the same gender as alices friends", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3198", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which people are friends of alices friends", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "birthplaces of alices friends", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_186", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the gender of the person alice is friends with", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "friends of alice in similar relationships", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_442", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what people are friens with alice", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "in what city was alices friend born", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_825", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "student who started the same day as alices birthday", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_161", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find student with last day on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2918", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school when alice was born", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2557", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee was terminated when alice was born", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_821", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is birth date of alice", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_604", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended their job on the same day as alices brithday", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_663", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has a start date the same time as the birthdate of alice", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2974", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me employees whose end date is the same as alices bithdate", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_628", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who finish on alices birthday", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_645", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have a start day at the same time as alices birthdate", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_78", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a person born in either 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_357", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "people born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_2775", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "persons born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_test_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "person who was born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "who is born in a city where alice is born", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_30", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which person has a relationship status the same as alice", "source": "person whose relationship status is relationship status that is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3527", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people who has the same birthplace as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1525", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who are friends of alices friends", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_804", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is friends with a person that is friends with alice", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_934", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "a mutual friend of alice", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2633", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who were born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find someone born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_941", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people whose gender is same as alice", "source": "person whose gender is gender that is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2615", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "all single or married persons", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_997", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_2469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "who is friend of either alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2790", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find everyone who is either single or married", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_2099", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people who are male or female", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_1261", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find someone of any gender", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_688", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people that are friends with alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1880", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which people are single or married", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_3121", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_480", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_2074", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people who are friends with an employee who does not have the job title of software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1581", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are friends with a working person that isnt a software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_518", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees friend with title other than software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3404", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with employees that are not named mickinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me all the people who are friends with people that did not attend brown", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3100", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students friends not attending brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_748", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of student who is not student of brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_171", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with a student who does not attend brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1509", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a friend of a student that isnt in computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_599", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person has a friend who is a student at a university other than brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2664", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who were born after 2004", "source": "person whose birthdate is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_295", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "who was born in 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_138", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "find me all people born after 2004", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_713", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "people born in or before 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_422", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "persons born before 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_378", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "who is born before 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_100", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "find people who were born in 2004 or later", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1587", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "person born before 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_2789", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "people who were born in 2004 or earlier", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1849", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "what person has a birthdate earlier than 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "who was born before alices last day of school", "source": "person whose birthdate is smaller than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1792", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "persons born before start date of alice", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1811", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find a person born before alice started working", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_755", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find all people born after alice quitted", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born the same day as or after alice started school", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3440", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find me a person born after alices first day of school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_test_121", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born after alice left", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_309", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born before alice started her job", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2898", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born on or after alices last day of school", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born on or after the day alice quit her job", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_2209", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find people having a relationship with people who are 180 cm tall", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3479", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who has the same relationship status as the 180 cm tall person", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2787", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the birthdate of the person who is 180 cm", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who was born in the same place as the 180 cm tall person", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2150", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what people are friends with a person whose height is 180 cm", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1304", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "name a person friends with a person that is 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1345", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who has the same birthday as the person who is 180 cm tall", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2793", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what gender are those who are 180 cm tall", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_835", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find all people who are 180 cm tall", "source": "person whose height is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_955", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the birthplace of people who are 6 feet tall", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3052", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which employee started their job on alices birthday", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_924", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people joined their study before alice born", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3326", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all employees who will have starte by alices birthday", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_616", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee quit after alices birthday", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_911", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working on or after alice was born", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1189", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started earlier than alices birthdate", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_413", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees starting after alices birthday", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3526", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped working when alice was born  or before", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3407", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who started on or after alices birthday", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_361", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has a start date before alices birthday", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2503", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are currently online", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_1469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "all people currently online", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_35", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what person is logged in", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_1436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "who is the person who has logged in ", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_test_606", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find the gender of no more than two people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_680", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find people with a relationship status that more than two people have", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1935", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the birth city of fewer than two people", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_84", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "birthplace of only one person", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_201", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of no more than two people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1919", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "birthplace of two or less persons", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_788", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "gender which is gender of less than three persons", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_36", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "city with birthplace of two person", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_567", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a gender less than two people have", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1038", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city is the birthplace of two people", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_518", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "either 180cm or 200cm", "source": "180 cm or 200 cm", "target": "(call listValue (call concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_824", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "find people who are between 180 cm and 200 cm tall", "source": "180 cm or 200 cm", "target": "(call listValue (call concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_822", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "find people with height either 180 or 200 cm", "source": "180 cm or 200 cm", "target": "(call listValue (call concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_2336", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "a student ending when alice starts", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1384", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees start date is the same as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_9", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who studied the same field as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1367", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined the institution with alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_315", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that go to or went to the same university as alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_357", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose university of is same as that of student alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_844", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working when alice stopped working", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_751", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is the same as student alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_38", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started the same day alice did", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1716", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "how many employees share alices job title", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2094", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find alices friend who is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_235", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "who is online and friends with alice", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1457", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which friend of alice is online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_2353", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "a friend of alice that is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_375", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "who is alice friends with that is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1817", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find all of alices friends that are currently online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_3059", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find all of alices friends that are currently online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_3231", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find people who are logged in who are also friends with alice", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1724", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what online person is alice friends with", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_473", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
