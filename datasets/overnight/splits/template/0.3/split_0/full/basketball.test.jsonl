{"paraphrased": "players with less and more than 3 rebounds over all seasons", "source": "player whose number of rebounds (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_rebounds) (string !=) (number 3 rebound))) (call domain (string player))) (string player)))", "qid": "basketball_train_582", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what players had a total number of rebounds in a season not equal to three", "source": "player whose number of rebounds (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_rebounds) (string !=) (number 3 rebound))) (call domain (string player))) (string player)))", "qid": "basketball_train_1090", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "players that have more and less than 3 fouls over all seasons", "source": "player whose number of fouls (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_fouls) (string !=) (number 3 foul))) (call domain (string player))) (string player)))", "qid": "basketball_train_1353", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name the player who did not have three fouls in the season", "source": "player whose number of fouls (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_fouls) (string !=) (number 3 foul))) (call domain (string player))) (string player)))", "qid": "basketball_train_1396", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "how many players acquired less or more that 3 turnovers", "source": "player whose number of turnovers (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_turnovers) (string !=) (number 3 turnover))) (call domain (string player))) (string player)))", "qid": "basketball_train_533", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name the player who did not have three steals in the season", "source": "player whose number of steals (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_steals) (string !=) (number 3 steal))) (call domain (string player))) (string player)))", "qid": "basketball_test_335", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "player who never played 3 games over a season", "source": "player whose number of played games (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_games_played) (string !=) (number 3 game))) (call domain (string player))) (string player)))", "qid": "basketball_train_450", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which player did not score 3 points", "source": "player whose number of points (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_points) (string !=) (number 3 point))) (call domain (string player))) (string player)))", "qid": "basketball_train_850", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what players have not even made 3 rebounds in a season", "source": "player whose number of rebounds (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_rebounds) (string !=) (number 3 rebound))) (call domain (string player))) (string player)))", "qid": "basketball_test_326", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has played fewer than 3 games so far this season", "source": "player whose number of played games (over a season) is not 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string num_games_played) (string !=) (number 3 game))) (call domain (string player))) (string player)))", "qid": "basketball_train_472", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "either kobe bryant or lebron james", "source": "kobe bryant or lebron james", "target": "(call listValue (call concat en.player.kobe_bryant en.player.lebron_james))", "qid": "basketball_train_112", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "who is better kobe bryant or lebron james", "source": "kobe bryant or lebron james", "target": "(call listValue (call concat en.player.kobe_bryant en.player.lebron_james))", "qid": "basketball_train_705", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "name a point guard or a forward", "source": "point guard or forward", "target": "(call listValue (call concat en.position.point_guard en.position.forward))", "qid": "basketball_train_284", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "either los angeles lakers or cleveland cavaliers", "source": "los angeles lakers or cleveland cavaliers", "target": "(call listValue (call concat en.team.lakers en.team.cavaliers))", "qid": "basketball_train_1106", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "either los angeles lakers or cleveland cavaliers", "source": "los angeles lakers or cleveland cavaliers", "target": "(call listValue (call concat en.team.lakers en.team.cavaliers))", "qid": "basketball_test_134", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "which team is it the la lakers or the cleveland cavaliers", "source": "los angeles lakers or cleveland cavaliers", "target": "(call listValue (call concat en.team.lakers en.team.cavaliers))", "qid": "basketball_test_252", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "what nba teams play in cleveland or la", "source": "los angeles lakers or cleveland cavaliers", "target": "(call listValue (call concat en.team.lakers en.team.cavaliers))", "qid": "basketball_test_24", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "which player is it kobe bryant or lebron james", "source": "kobe bryant or lebron james", "target": "(call listValue (call concat en.player.kobe_bryant en.player.lebron_james))", "qid": "basketball_train_113", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "players who are forwards or point guards", "source": "point guard or forward", "target": "(call listValue (call concat en.position.point_guard en.position.forward))", "qid": "basketball_train_293", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "player who plays position point guard or forward", "source": "point guard or forward", "target": "(call listValue (call concat en.position.point_guard en.position.forward))", "qid": "basketball_train_771", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "name players who played in 2004 or 2010", "source": "player whose season is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string season) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string player))) (string player)))", "qid": "basketball_test_118", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which players played in the 2004 or 2010 seasons", "source": "player whose season is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string season) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string player))) (string player)))", "qid": "basketball_train_25", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "players that started playing between the 2004 and 2010 seasons", "source": "player whose season is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string season) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string player))) (string player)))", "qid": "basketball_test_190", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which player played in 2004 or 2010", "source": "player whose season is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string season) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string player))) (string player)))", "qid": "basketball_train_1001", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which player did not play in 2004 or 2010", "source": "player whose season is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string season) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string player))) (string player)))", "qid": "basketball_train_713", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what player played in 2004 or 2010", "source": "player whose season is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string season) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string player))) (string player)))", "qid": "basketball_train_327", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "players who played 2004 to 2010", "source": "player whose season is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string season) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string player))) (string player)))", "qid": "basketball_train_547", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what players played in 2004 or 2010", "source": "player whose season is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string season) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string player))) (string player)))", "qid": "basketball_train_1337", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what player made more than 3 block over a season", "source": "player whose number of blocks (over a season) is larger than 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_blocks)) (string >) (call ensureNumericEntity (number 3 block)))) (call domain (string player))) (string player)))", "qid": "basketball_train_461", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which player has scored more than 3 points", "source": "player whose number of points (over a season) is larger than 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_points)) (string >) (call ensureNumericEntity (number 3 point)))) (call domain (string player))) (string player)))", "qid": "basketball_test_189", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which player has more than 3 turnovers in each season theyve played", "source": "player whose number of turnovers (over a season) is larger than 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_turnovers)) (string >) (call ensureNumericEntity (number 3 turnover)))) (call domain (string player))) (string player)))", "qid": "basketball_train_435", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what player has more than 3 games played during a season", "source": "player whose number of played games (over a season) is larger than 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_games_played)) (string >) (call ensureNumericEntity (number 3 game)))) (call domain (string player))) (string player)))", "qid": "basketball_test_226", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "are there players who have participated in more than 3 games in a season", "source": "player whose number of played games (over a season) is larger than 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_games_played)) (string >) (call ensureNumericEntity (number 3 game)))) (call domain (string player))) (string player)))", "qid": "basketball_train_1529", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "player with more than 3 blocks over a season", "source": "player whose number of blocks (over a season) is larger than 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_blocks)) (string >) (call ensureNumericEntity (number 3 block)))) (call domain (string player))) (string player)))", "qid": "basketball_train_141", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what player played more than 3 games", "source": "player whose number of played games (over a season) is larger than 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_games_played)) (string >) (call ensureNumericEntity (number 3 game)))) (call domain (string player))) (string player)))", "qid": "basketball_train_1151", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what player had less than 3 fouls", "source": "player whose number of fouls (over a season) is smaller than 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_fouls)) (string <) (call ensureNumericEntity (number 3 foul)))) (call domain (string player))) (string player)))", "qid": "basketball_train_1285", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which player has a minimum of three steals", "source": "player whose number of steals (over a season) is at least 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_steals)) (string >=) (call ensureNumericEntity (number 3 steal)))) (call domain (string player))) (string player)))", "qid": "basketball_train_563", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what players did not score more than three points in a season", "source": "player whose number of points (over a season) is at most 3", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string num_points)) (string <=) (call ensureNumericEntity (number 3 point)))) (call domain (string player))) (string player)))", "qid": "basketball_train_606", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "player not from los angeles lakers team", "source": "player whose team is not los angeles lakers", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string team) (string !=) en.team.lakers)) (call domain (string player))) (string player)))", "qid": "basketball_test_109", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which players are not point guards", "source": "player whose position is not point guard", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string position) (string !=) en.position.point_guard)) (call domain (string player))) (string player)))", "qid": "basketball_train_156", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which player does not play for the la lakers", "source": "player whose team is not los angeles lakers", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string team) (string !=) en.team.lakers)) (call domain (string player))) (string player)))", "qid": "basketball_test_321", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "players who dont play for los angeles lakers", "source": "player whose team is not los angeles lakers", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string team) (string !=) en.team.lakers)) (call domain (string player))) (string player)))", "qid": "basketball_test_366", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what player did not play point guard", "source": "player whose position is not point guard", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string position) (string !=) en.position.point_guard)) (call domain (string player))) (string player)))", "qid": "basketball_train_14", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name players other than point guard", "source": "player whose position is not point guard", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string position) (string !=) en.position.point_guard)) (call domain (string player))) (string player)))", "qid": "basketball_train_246", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a player who is not a point guard", "source": "player whose position is not point guard", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string position) (string !=) en.position.point_guard)) (call domain (string player))) (string player)))", "qid": "basketball_test_77", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what player is not on the los angeles lakers", "source": "player whose team is not los angeles lakers", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string team) (string !=) en.team.lakers)) (call domain (string player))) (string player)))", "qid": "basketball_test_260", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "player who does not play point guard", "source": "player whose position is not point guard", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string position) (string !=) en.position.point_guard)) (call domain (string player))) (string player)))", "qid": "basketball_train_9", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "player who is not a los angleles laker", "source": "player whose team is not los angeles lakers", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string team) (string !=) en.team.lakers)) (call domain (string player))) (string player)))", "qid": "basketball_train_693", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
