{"paraphrased": "housing 800 sq in size posted on january 2", "source": "housing unit whose posting date is jan 2 and whose size is 800 square feet", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string size) (string =) (number 800 en.square_feet)))", "qid": "housing_train_142", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what housing unit posted on jan 2 has a monthly rent of 1500 dollars", "source": "housing unit whose posting date is jan 2 and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_train_441", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which housing posted jan 2nd rents for 1500", "source": "housing unit whose posting date is jan 2 and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_train_603", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find an 800 sq ft housing unit posted on january 2", "source": "housing unit whose posting date is jan 2 and whose size is 800 square feet", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string size) (string =) (number 800 en.square_feet)))", "qid": "housing_train_718", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing units that are posted on january end and have a total size of 800 square feet", "source": "housing unit whose posting date is jan 2 and whose size is 800 square feet", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string size) (string =) (number 800 en.square_feet)))", "qid": "housing_test_25", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing posted on january 2 that rents out for 1500 dollar per month", "source": "housing unit whose posting date is jan 2 and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_test_53", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing with 1500 dollar rent that was posted on january 2", "source": "housing unit whose posting date is jan 2 and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_test_151", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "seeking apartment or condo", "source": "apartment or condo", "target": "(call listValue (call concat en.housing.apartment en.housing.condo))", "qid": "housing_train_333", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "condominium or apartment housing", "source": "apartment or condo", "target": "(call listValue (call concat en.housing.apartment en.housing.condo))", "qid": "housing_train_369", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "neighborhoods medtown west or chelsea", "source": "midtown west or chelsea", "target": "(call listValue (call concat en.neighborhood.midtown_west en.neighborhood.chelsea))", "qid": "housing_train_401", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "compare 123 sesame street and 900 mission avenue", "source": "123 sesame street or 900 mission ave", "target": "(call listValue (call concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave))", "qid": "housing_train_537", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "condomonium or flat", "source": "apartment or condo", "target": "(call listValue (call concat en.housing.apartment en.housing.condo))", "qid": "housing_train_647", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "looking for housing in midtown west or chelsea area", "source": "midtown west or chelsea", "target": "(call listValue (call concat en.neighborhood.midtown_west en.neighborhood.chelsea))", "qid": "housing_test_96", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "unit on 123 sesame street or 900 mission avenue", "source": "123 sesame street or 900 mission ave", "target": "(call listValue (call concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave))", "qid": "housing_test_122", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "a housing unit posted on january 2 or february 3", "source": "housing unit whose posting date is jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call concat (date 2015 1 2) (date 2015 2 3))))", "qid": "housing_train_211", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 2 3))))"}
{"paraphrased": "housing posted on january 2 or february 3", "source": "housing unit whose posting date is jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call concat (date 2015 1 2) (date 2015 2 3))))", "qid": "housing_train_402", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 2 3))))"}
{"paraphrased": "what housing unit was posted on jan 2 or feb 3", "source": "housing unit whose posting date is jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call concat (date 2015 1 2) (date 2015 2 3))))", "qid": "housing_train_656", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 2 3))))"}
{"paraphrased": "housing that was posted on january 2", "source": "housing unit whose posting date is jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call concat (date 2015 1 2) (date 2015 2 3))))", "qid": "housing_train_724", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 2 3))))"}
{"paraphrased": "what housing is posted either jan 2nd or feb 3rd", "source": "housing unit whose posting date is jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call concat (date 2015 1 2) (date 2015 2 3))))", "qid": "housing_test_159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 2 3))))"}
{"paraphrased": "housing with a master bedroom and private bath", "source": "housing unit that has a private bath and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_room)))", "qid": "housing_train_10", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit permits cats and had a private bath in it", "source": "housing unit that allows cats and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_bath)))", "qid": "housing_train_12", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit offers a private bath", "source": "housing unit that has a private bath and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_bath)))", "qid": "housing_train_36", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit that both have a private room and allow dogs", "source": "housing unit that has a private room and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_dogs)))", "qid": "housing_train_40", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "show me housing where dogs are allowed", "source": "housing unit that allows dogs and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_dogs)))", "qid": "housing_train_43", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing units permit dogs and cats", "source": "housing unit that allows cats and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string allows_dogs)))", "qid": "housing_train_50", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what housing unit contains a private room and allows cats", "source": "housing unit that allows cats and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_room)))", "qid": "housing_train_61", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find housing units that are pet friendly", "source": "housing unit that allows dogs and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_dogs)))", "qid": "housing_train_64", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit has a private room", "source": "housing unit that has a private room and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_room)))", "qid": "housing_train_122", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing that allows cats and includes a private room", "source": "housing unit that has a private room and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_cats)))", "qid": "housing_train_130", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing with a private room and bath", "source": "housing unit that has a private room and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_bath)))", "qid": "housing_train_150", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit with a private room and allows cats", "source": "housing unit that has a private room and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_cats)))", "qid": "housing_train_160", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit that allows cats", "source": "housing unit that allows cats and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string allows_cats)))", "qid": "housing_train_170", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find cat friendly housing units with a private bath", "source": "housing unit that allows cats and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_bath)))", "qid": "housing_train_174", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit that allows dogs and cats", "source": "housing unit that allows dogs and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_cats)))", "qid": "housing_train_178", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit permits dogs and has the facility of a private bath", "source": "housing unit that allows dogs and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string has_private_bath)))", "qid": "housing_train_197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "apartment with a private room", "source": "housing unit that has a private room and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_room)))", "qid": "housing_train_216", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find housing units with a private room", "source": "housing unit that has a private room and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_room)))", "qid": "housing_train_222", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "catfriendly apartments with a private room", "source": "housing unit that allows cats and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_room)))", "qid": "housing_train_232", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "apartment with a master bedroom and private bath", "source": "housing unit that has a private room and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_bath)))", "qid": "housing_train_243", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit permits cats inside it", "source": "housing unit that allows cats and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string allows_cats)))", "qid": "housing_train_273", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "dogfriendly housing", "source": "housing unit that allows dogs and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_dogs)))", "qid": "housing_train_279", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "locate housing units with private roombath", "source": "housing unit that has a private room and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_bath)))", "qid": "housing_train_285", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "catfriendly apartments with a private bathroom", "source": "housing unit that has a private bath and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string allows_cats)))", "qid": "housing_train_352", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "catfriendly housing with a private room", "source": "housing unit that allows cats and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_room)))", "qid": "housing_train_358", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "show me places with a private room where cats are welcome", "source": "housing unit that allows cats and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_room)))", "qid": "housing_train_370", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "apartments that are dog friendly", "source": "housing unit that allows dogs and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_dogs)))", "qid": "housing_train_378", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "show me housing which have a private bathroom and allow cats", "source": "housing unit that has a private bath and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string allows_cats)))", "qid": "housing_train_394", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "units that have a private room", "source": "housing unit that has a private room and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_room)))", "qid": "housing_train_419", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "looking for a unit with a private bathroom and dog friendly", "source": "housing unit that has a private bath and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string allows_dogs)))", "qid": "housing_train_443", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which is the housing unit that permits dogs inside it", "source": "housing unit that allows dogs and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_dogs)))", "qid": "housing_train_445", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit that allows dogs and has a private bath", "source": "housing unit that allows dogs and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string has_private_bath)))", "qid": "housing_train_450", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find housing with a private room and bath", "source": "housing unit that has a private room and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_bath)))", "qid": "housing_train_455", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "dogfriendly apartment with a private bathroom", "source": "housing unit that has a private bath and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string allows_dogs)))", "qid": "housing_train_473", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit with a private room and bath", "source": "housing unit that has a private room and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string has_private_bath)))", "qid": "housing_train_486", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "apartments that have a private bath", "source": "housing unit that has a private bath and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_bath)))", "qid": "housing_train_498", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find cat friendly housing units with a private room", "source": "housing unit that has a private room and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_cats)))", "qid": "housing_train_561", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "pet friendly housing unit", "source": "housing unit that allows cats and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string allows_cats)))", "qid": "housing_train_570", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "dog and cat friendly housing", "source": "housing unit that allows cats and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string allows_dogs)))", "qid": "housing_train_588", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit allows dogs and cats", "source": "housing unit that allows dogs and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_cats)))", "qid": "housing_train_601", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find housing units with a private room and is dog friendly", "source": "housing unit that allows dogs and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string has_private_room)))", "qid": "housing_train_629", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "apartment with a private bath that also accepts cats", "source": "housing unit that allows cats and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_bath)))", "qid": "housing_train_644", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find housing that allows dogs and cats", "source": "housing unit that allows dogs and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string allows_cats)))", "qid": "housing_train_654", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find housing that has a private room and bath", "source": "housing unit that has a private bath and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_room)))", "qid": "housing_train_661", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing that allows cats and includes a private bath", "source": "housing unit that allows cats and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_bath)))", "qid": "housing_train_662", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "apartments with a private bath that allow dogs", "source": "housing unit that allows dogs and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string has_private_bath)))", "qid": "housing_train_713", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "apartments with a private bathroom that allow cats", "source": "housing unit that has a private room and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_cats)))", "qid": "housing_train_720", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit that allows cats and has a private bath", "source": "housing unit that allows cats and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_bath)))", "qid": "housing_train_726", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit permits dogs and has the facility of a private room", "source": "housing unit that has a private room and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_dogs)))", "qid": "housing_train_733", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "catfriendly housing with a private bath", "source": "housing unit that has a private bath and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string allows_cats)))", "qid": "housing_train_740", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit permits dogs and has a private bath", "source": "housing unit that has a private bath and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string allows_dogs)))", "qid": "housing_train_748", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find pet friendly housing units", "source": "housing unit that allows cats and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string allows_dogs)))", "qid": "housing_test_6", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing provides a private room where dogs are allowed", "source": "housing unit that has a private room and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_dogs)))", "qid": "housing_test_11", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit permits cats and has a private room", "source": "housing unit that has a private room and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string allows_cats)))", "qid": "housing_test_49", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit with a private bath", "source": "housing unit that has a private bath and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_bath)))", "qid": "housing_test_50", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit permits cats inside it and has a private room", "source": "housing unit that allows cats and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string has_private_room)))", "qid": "housing_test_62", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "show me places with private rooms where dogs are welcome", "source": "housing unit that allows dogs and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string has_private_room)))", "qid": "housing_test_64", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit offers a private room and a private bath", "source": "housing unit that has a private bath and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_room)))", "qid": "housing_test_84", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find housing with a private bath", "source": "housing unit that has a private bath and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_bath)))", "qid": "housing_test_97", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit with a private bath and room", "source": "housing unit that has a private bath and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_room)))", "qid": "housing_test_99", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit permits cats inside it and has the facility of a private bath", "source": "housing unit that has a private bath and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string allows_cats)))", "qid": "housing_test_114", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which unit allows dogs and has a private bath", "source": "housing unit that allows dogs and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string has_private_bath)))", "qid": "housing_test_120", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing units permits dogs and offers a private room", "source": "housing unit that allows dogs and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string has_private_room)))", "qid": "housing_test_125", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "looking for a pet friendly unit", "source": "housing unit that allows cats and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string allows_dogs)))", "qid": "housing_test_168", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit with private bath as well as private room", "source": "housing unit that has a private bath and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string has_private_room)))", "qid": "housing_test_183", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing found in the most neighborhoods", "source": "housing unit that has the most number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string neighborhood)))", "qid": "housing_train_65", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which housing unit has  the variety of houses", "source": "housing unit that has the most number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string housing_type)))", "qid": "housing_train_81", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which area has the most number of housing units", "source": "housing unit that has the most number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string neighborhood)))", "qid": "housing_train_84", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "seeking houses in quiet neighborhoods", "source": "housing unit that has the least number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (string housing_type)))", "qid": "housing_train_99", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what is the most numerous housing type", "source": "housing unit that has the most number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string housing_type)))", "qid": "housing_train_151", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "apartment complexes with the most units", "source": "housing unit that has the most number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string housing_type)))", "qid": "housing_train_295", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which housing unit has the least variety of houses", "source": "housing unit that has the least number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (string housing_type)))", "qid": "housing_train_379", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "housing units with a small amount of housing", "source": "housing unit that has the least number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (string housing_type)))", "qid": "housing_train_439", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find housing units with unique housing types", "source": "housing unit that has the least number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (string housing_type)))", "qid": "housing_train_500", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "housing listed in the fewest neighborhoods", "source": "housing unit that has the least number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (string neighborhood)))", "qid": "housing_train_544", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find housing units with the most number of neighborhoods", "source": "housing unit that has the most number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string neighborhood)))", "qid": "housing_train_609", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "building with the least number of housing types", "source": "housing unit that has the least number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (string housing_type)))", "qid": "housing_train_639", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find housing units with the least number of neighborhoods", "source": "housing unit that has the least number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (string neighborhood)))", "qid": "housing_train_643", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "apartment in a quiet neighborhood", "source": "housing unit that has the least number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (string neighborhood)))", "qid": "housing_train_684", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which housing has the most amount of housing types", "source": "housing unit that has the most number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string housing_type)))", "qid": "housing_test_31", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which area has the least number of housing units", "source": "housing unit that has the least number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (string neighborhood)))", "qid": "housing_test_59", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "building with the most kinds of units", "source": "housing unit that has the most number of housing type", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string housing_type)))", "qid": "housing_test_85", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "units with the most neighborhoods", "source": "housing unit that has the most number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string neighborhood)))", "qid": "housing_test_150", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "apartments with the most neighborhoods around it", "source": "housing unit that has the most number of neighborhood", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (string neighborhood)))", "qid": "housing_test_187", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what housing units in the midtown east area also allow dogs", "source": "housing unit that allows dogs and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_21", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartment type housing unit that has private bath", "source": "housing unit that has a private bath and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_22", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which housing unit around midtown west has a private bath", "source": "housing unit that has a private bath and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_79", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartment with private bath", "source": "housing unit that has a private bath and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_96", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which housing unit in the midtown west area has a private room", "source": "housing unit that has a private room and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_108", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing unit that allows cats with midtown west as neighborhood", "source": "housing unit that allows cats and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_148", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing apartment with a private bath", "source": "housing unit that has a private bath and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_154", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which housing in midtown west has a private bath", "source": "housing unit that has a private bath and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_227", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what midtown west housing allows cats", "source": "housing unit that allows cats and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_245", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing apartments that allows cats", "source": "housing unit that allows cats and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_287", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which housing unit belongs to the apartment kind with the facility of a private troom", "source": "housing unit that has a private room and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_325", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing in midtown west with a private room", "source": "housing unit that has a private room and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_384", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "dogfriendly apartment", "source": "housing unit that allows dogs and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_393", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments in midtown west with a private room", "source": "housing unit that has a private room and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_416", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "private housing in midtown west", "source": "housing unit that has a private room and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_451", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments with a private bathroom in midtown west", "source": "housing unit that has a private bath and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_452", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "catfriendly apartments in midtown west", "source": "housing unit that allows cats and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_489", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing unit which is an apartment that is dogs friendly", "source": "housing unit that allows dogs and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_497", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which apartment kind of housing units permits cats in it", "source": "housing unit that allows cats and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_578", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find housing units with private bath located in the neighborhoods of midtown west", "source": "housing unit that has a private bath and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_579", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing apartments that allow dogs", "source": "housing unit that allows dogs and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_593", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments that are catfriendly", "source": "housing unit that allows cats and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_621", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments that permit cats", "source": "housing unit that allows cats and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_723", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "need a unit with a private room in the midtown west area", "source": "housing unit that has a private room and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_725", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which housing unit in midtown west permits dogs", "source": "housing unit that allows dogs and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_test_47", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "dogfriendly apartments", "source": "housing unit that allows dogs and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_test_74", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find apartments with a private room", "source": "housing unit that has a private room and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_test_78", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing unit that is 800 or 1000 square feet", "source": "housing unit whose size is 800 square feet or 1000 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (call concat (number 800 en.square_feet) (number 1000 en.square_feet))))", "qid": "housing_train_69", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "housing unit with size of either 800 or 1000 square feet", "source": "housing unit whose size is 800 square feet or 1000 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (call concat (number 800 en.square_feet) (number 1000 en.square_feet))))", "qid": "housing_train_233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "find housing with rental charges between 1500 and 2000 dollars", "source": "housing unit whose monthly rent is 1500 dollars or 2000 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call concat (number 1500 en.dollar) (number 2000 en.dollar))))", "qid": "housing_train_418", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "housing that is 1500month or 2000month", "source": "housing unit whose monthly rent is 1500 dollars or 2000 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call concat (number 1500 en.dollar) (number 2000 en.dollar))))", "qid": "housing_train_434", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "find housing between 800 and 1000 square feet", "source": "housing unit whose size is 800 square feet or 1000 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (call concat (number 800 en.square_feet) (number 1000 en.square_feet))))", "qid": "housing_train_484", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "apartment with rent between 1500 and 2000", "source": "housing unit whose monthly rent is 1500 dollars or 2000 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call concat (number 1500 en.dollar) (number 2000 en.dollar))))", "qid": "housing_train_665", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "unit with rent between 15002000 dollars", "source": "housing unit whose monthly rent is 1500 dollars or 2000 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call concat (number 1500 en.dollar) (number 2000 en.dollar))))", "qid": "housing_train_672", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "which housing unit has  an area of 800 or 1000 square feet", "source": "housing unit whose size is 800 square feet or 1000 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (call concat (number 800 en.square_feet) (number 1000 en.square_feet))))", "qid": "housing_train_751", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "housing unit that costs 1500 or 200 dollars in rent", "source": "housing unit whose monthly rent is 1500 dollars or 2000 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call concat (number 1500 en.dollar) (number 2000 en.dollar))))", "qid": "housing_test_92", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "apartments that allow dogs", "source": "housing unit that allows dogs", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)))", "qid": "housing_train_162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "catfriendly housing", "source": "housing unit that allows cats", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)))", "qid": "housing_train_163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "apartment with a master bathroom", "source": "housing unit that has a private bath", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)))", "qid": "housing_train_219", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which housing unit permits cats in it", "source": "housing unit that allows cats", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)))", "qid": "housing_train_319", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing unit with a private room", "source": "housing unit that has a private room", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)))", "qid": "housing_train_331", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what housing has a private room", "source": "housing unit that has a private room", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)))", "qid": "housing_train_462", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing units with a private bath", "source": "housing unit that has a private bath", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)))", "qid": "housing_train_465", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what housing units allows dogs", "source": "housing unit that allows dogs", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)))", "qid": "housing_train_521", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "cats permitted in unit", "source": "housing unit that allows cats", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)))", "qid": "housing_train_538", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what housing unit contains a private bath", "source": "housing unit that has a private bath", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)))", "qid": "housing_train_610", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing that accepts dogs", "source": "housing unit that allows dogs", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)))", "qid": "housing_train_709", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing units with private room", "source": "housing unit that has a private room", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)))", "qid": "housing_test_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing units that have a private bath", "source": "housing unit that has a private bath", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)))", "qid": "housing_test_107", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what housing units allow dogs", "source": "housing unit that allows dogs", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)))", "qid": "housing_test_135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "housing that is not the same kind as 123 sesame street", "source": "housing type that is not housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string !=) en.housing_unit.123_sesame_street))", "qid": "housing_train_82", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which neighborhood is 123 sesame street in", "source": "neighborhood that is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street))", "qid": "housing_train_127", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what kind of housing is 123 sesame street", "source": "housing type that is housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street))", "qid": "housing_train_155", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "exclude apartments that are in the same neighborhood as 123 sesame street", "source": "neighborhood that is not neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string !=) en.housing_unit.123_sesame_street))", "qid": "housing_train_159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what type of housing is 123 sesame street", "source": "housing type that is housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street))", "qid": "housing_train_213", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the kind of housing available in 123 sesamre street", "source": "housing type that is housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street))", "qid": "housing_train_282", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name housing types other than 123 sesame street type", "source": "housing type that is not housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string !=) en.housing_unit.123_sesame_street))", "qid": "housing_train_385", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "neighborhoods not near 123 sesame street", "source": "neighborhood that is not neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string !=) en.housing_unit.123_sesame_street))", "qid": "housing_train_507", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the housing type at 123 sesame street", "source": "housing type that is housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street))", "qid": "housing_train_559", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find housing units around 123 sesame street", "source": "neighborhood that is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street))", "qid": "housing_train_567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find housing types other than 123 sesame street", "source": "housing type that is not housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string !=) en.housing_unit.123_sesame_street))", "qid": "housing_train_575", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what neighborhood is 123 sesame street in", "source": "neighborhood that is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street))", "qid": "housing_train_607", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "list all housing types that are not the same as those in 123 sesame street", "source": "housing type that is not housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string !=) en.housing_unit.123_sesame_street))", "qid": "housing_train_692", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "in which area is 123 sesame street", "source": "neighborhood that is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street))", "qid": "housing_train_708", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "exclude housing similar to 123 sesame street", "source": "housing type that is not housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string !=) en.housing_unit.123_sesame_street))", "qid": "housing_test_43", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "list available neighborhoods besides 123 sesame street", "source": "neighborhood that is not neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string !=) en.housing_unit.123_sesame_street))", "qid": "housing_test_63", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "neighborhoods that do not contain 123 sesame street", "source": "neighborhood that is not neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string !=) en.housing_unit.123_sesame_street))", "qid": "housing_test_144", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "the neighborhood of apartment 123 sesame street", "source": "neighborhood that is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street))", "qid": "housing_test_179", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the largest housing unit", "source": "housing unit that has the largest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string size))))", "qid": "housing_train_8", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which housing unit has the highest rent per month", "source": "housing unit that has the largest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string rent))))", "qid": "housing_train_33", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "cheapest housing", "source": "housing unit that has the smallest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string rent))))", "qid": "housing_train_113", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "housing unit with the largest posting date", "source": "housing unit that has the largest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string posting_date))))", "qid": "housing_train_121", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what housing has the cheapest rent", "source": "housing unit that has the smallest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string rent))))", "qid": "housing_train_214", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "smallest available unit", "source": "housing unit that has the smallest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string size))))", "qid": "housing_train_286", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which housing unit has the smallest size", "source": "housing unit that has the smallest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string size))))", "qid": "housing_train_322", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which housing unit is bigger by area", "source": "housing unit that has the largest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string size))))", "qid": "housing_train_339", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "housing unit with the smallest posting date", "source": "housing unit that has the smallest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string posting_date))))", "qid": "housing_train_425", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find housing unit with the latest posting date", "source": "housing unit that has the smallest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string posting_date))))", "qid": "housing_train_446", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "housing posted the most recently", "source": "housing unit that has the largest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string posting_date))))", "qid": "housing_train_480", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the biggest housing unit", "source": "housing unit that has the largest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string size))))", "qid": "housing_train_520", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the housing unit with the most monthly rent", "source": "housing unit that has the largest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string rent))))", "qid": "housing_train_541", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "cheapest places to rent", "source": "housing unit that has the smallest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string rent))))", "qid": "housing_train_555", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "show me the housing with the most space available", "source": "housing unit that has the largest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string size))))", "qid": "housing_train_560", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which housing unit is posted lately", "source": "housing unit that has the smallest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string posting_date))))", "qid": "housing_train_615", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what housing has been posted lately", "source": "housing unit that has the smallest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string posting_date))))", "qid": "housing_train_620", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "housing with with largest posting date", "source": "housing unit that has the largest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string posting_date))))", "qid": "housing_train_626", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "smallest housing units", "source": "housing unit that has the smallest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string size))))", "qid": "housing_train_628", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which housing unit is available for the least rent", "source": "housing unit that has the smallest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string rent))))", "qid": "housing_train_650", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "smallest apartments", "source": "housing unit that has the smallest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string size))))", "qid": "housing_train_706", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what housing has the latest posting date", "source": "housing unit that has the largest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string posting_date))))", "qid": "housing_train_710", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "most expensive places to rent", "source": "housing unit that has the largest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string rent))))", "qid": "housing_train_743", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which housing unit with the highest rent", "source": "housing unit that has the largest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string rent))))", "qid": "housing_test_18", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the housing unit with the least monthly rent", "source": "housing unit that has the smallest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string rent))))", "qid": "housing_test_36", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "most recently posted housing", "source": "housing unit that has the largest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string posting_date))))", "qid": "housing_test_86", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "where are the biggest apartments", "source": "housing unit that has the largest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string size))))", "qid": "housing_test_110", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "most expensive housing", "source": "housing unit that has the largest monthly rent", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string max) (call ensureNumericProperty (string rent))))", "qid": "housing_test_138", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "earliest posted housing", "source": "housing unit that has the smallest posting date", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string posting_date))))", "qid": "housing_test_141", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what is the smallest housing", "source": "housing unit that has the smallest size", "target": "(call listValue (call superlative (call getProperty (call singleton en.housing_unit) (string !type)) (string min) (call ensureNumericProperty (string size))))", "qid": "housing_test_146", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "january 2 to february 3", "source": "jan 2 or feb 3", "target": "(call listValue (call concat (date 2015 1 2) (date 2015 2 3)))", "qid": "housing_train_670", "anonymized_target": "(call listValue (call concat (date 2015 1 2) (date 2015 2 3)))"}
{"paraphrased": "housing posted on january 2", "source": "housing type that is housing type of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_72", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "what neighborhood was the housing unit posted on jan 2", "source": "neighborhood that is neighborhood of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_97", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "find all housing units posted on january 2", "source": "housing type that is housing type of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_303", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "what housing is the same type as the housing posted on january 2", "source": "housing type that is housing type of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_412", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "what neighborhood is the housing unit in that was posted on january 2", "source": "neighborhood that is neighborhood of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_488", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "what kind of housing was posted on jan 2", "source": "housing type that is housing type of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_493", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "housing type posted january 2", "source": "housing type that is housing type of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_574", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "what kind of housing is the housing unit posted on jan 2", "source": "housing type that is housing type of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_608", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "what kind of housing was posted on january 2", "source": "housing type that is housing type of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_667", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "find all housing units posted on january 2", "source": "housing type that is housing type of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_689", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "housing with posting date of january 2", "source": "housing type that is housing type of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_714", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "housing posted in a neighborhood on january 2", "source": "neighborhood that is neighborhood of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_train_744", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "housing neighborhood that was posted on january 2", "source": "neighborhood that is neighborhood of housing unit whose posting date is jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2))))", "qid": "housing_test_65", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2))))"}
{"paraphrased": "rent between 1500 and 2000 dollars", "source": "1500 dollars or 2000 dollars", "target": "(call listValue (call concat (number 1500 en.dollar) (number 2000 en.dollar)))", "qid": "housing_train_206", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "housing units of either 800 square feet or 1000 square feet", "source": "800 square feet or 1000 square feet", "target": "(call listValue (call concat (number 800 en.square_feet) (number 1000 en.square_feet)))", "qid": "housing_train_249", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "seeking apartments between 1500 and 2000", "source": "1500 dollars or 2000 dollars", "target": "(call listValue (call concat (number 1500 en.dollar) (number 2000 en.dollar)))", "qid": "housing_train_483", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "list all housing that have the size of 800 or 1000 square feet", "source": "800 square feet or 1000 square feet", "target": "(call listValue (call concat (number 800 en.square_feet) (number 1000 en.square_feet)))", "qid": "housing_train_623", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "either 800 or 1000 square feet", "source": "800 square feet or 1000 square feet", "target": "(call listValue (call concat (number 800 en.square_feet) (number 1000 en.square_feet)))", "qid": "housing_train_731", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "find housing units with rental charges between 1500 and 2000 dollars", "source": "1500 dollars or 2000 dollars", "target": "(call listValue (call concat (number 1500 en.dollar) (number 2000 en.dollar)))", "qid": "housing_test_76", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "which housing unit has more than two kinds of houses", "source": "housing type that is housing type of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_6", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "housing type of more than two available housings", "source": "housing type that is housing type of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_39", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "housing of two types", "source": "housing type that is housing type of two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_44", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which area has a minimum of two housing units", "source": "neighborhood that is neighborhood of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_59", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "housing with fewer than two units", "source": "housing type that is housing type of less than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string <) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_70", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find all detached housing units", "source": "housing type that is housing type of less than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string <) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_115", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name neighborhoods with two or more housing units", "source": "neighborhood that is neighborhood of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_132", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what kind of housing type is the only of its kind", "source": "housing type that is housing type of less than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string <) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_139", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "housing type with less than 2 units", "source": "housing type that is housing type of less than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string <) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_168", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "neighborhood that has at least 2 apartments", "source": "neighborhood that is neighborhood of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_200", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what housing is a two unit type", "source": "housing type that is housing type of two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_223", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which area has more than two housing units", "source": "neighborhood that is neighborhood of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_228", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what kind of housing are the two housing units", "source": "housing type that is housing type of two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_236", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "a neighborhood with fewer than twohouse units", "source": "neighborhood that is neighborhood of less than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_274", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "housing with no more than two housing units", "source": "housing type that is housing type of at most two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string <=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_275", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "a neighborhood with at most twohouse units", "source": "neighborhood that is neighborhood of at most two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_290", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "housing in a neighborhood larger than two houses", "source": "neighborhood that is neighborhood of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_326", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name housing types that has more than one housing unit of that type", "source": "housing type that is housing type of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_330", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which housing consists of two units maximum", "source": "housing type that is housing type of at most two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string <=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_345", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which neighborhoods have more than two places available", "source": "neighborhood that is neighborhood of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_459", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the housing type of the two housing units", "source": "housing type that is housing type of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_471", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "neighborhoods that have more than two units", "source": "neighborhood that is neighborhood of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_528", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "apartments with at least 2 units", "source": "housing type that is housing type of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_582", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which neighborhood has under two housing units", "source": "neighborhood that is neighborhood of less than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_595", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "housing that is either an apartment or townhouse", "source": "housing type that is housing type of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_614", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "show me housing that is the same type as at least two others", "source": "housing type that is housing type of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_633", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "show housing types for three or more units", "source": "housing type that is housing type of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_669", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "neighborhood with more than two housing units", "source": "neighborhood that is neighborhood of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_673", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "neighborhood with at most two housing", "source": "neighborhood that is neighborhood of at most two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_680", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what neighborhood has less than two housing units", "source": "neighborhood that is neighborhood of less than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_686", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "housing that includes two units", "source": "housing type that is housing type of two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_719", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "neighborhood that has two housing", "source": "neighborhood that is neighborhood of two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_742", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "neighborhoods with more than two apartment complexes", "source": "neighborhood that is neighborhood of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_0", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what neighborhood contains two housing units", "source": "neighborhood that is neighborhood of two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_39", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "neighborhood with less than two housing", "source": "neighborhood that is neighborhood of less than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_73", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "neighborhood that has at least two listings", "source": "neighborhood that is neighborhood of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_82", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what kind of housing is at two or less housing units", "source": "housing type that is housing type of at most two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string <=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_90", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "housing types of more than two units", "source": "housing type that is housing type of more than two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_98", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what neighborhood has two housing units", "source": "neighborhood that is neighborhood of two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_104", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which neighborhood has two housing units maximum", "source": "neighborhood that is neighborhood of at most two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_121", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what neighborhood has two or less housing units", "source": "neighborhood that is neighborhood of at most two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string <=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_155", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "a neighborhood with twohouse units", "source": "neighborhood that is neighborhood of two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_157", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "looking for a 2 family house", "source": "housing type that is housing type of at least two housing unit", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string >=) (number 2) (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_175", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "apartment with a private room that rents for 1500 a month", "source": "housing unit whose monthly rent is 1500 dollars and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_room)))", "qid": "housing_train_26", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "800 square feet housing unit with a private bath", "source": "housing unit whose size is 800 square feet and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_bath)))", "qid": "housing_train_28", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing that is 800 square feet with a private bath", "source": "housing unit whose size is 800 square feet and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_bath)))", "qid": "housing_train_37", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "apartment with a private bathroom for rent at 1500", "source": "housing unit whose monthly rent is 1500 dollars and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_bath)))", "qid": "housing_train_86", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what kind of housing offers 800 square feet and allows cats", "source": "housing unit whose size is 800 square feet and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_cats)))", "qid": "housing_train_140", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "where are 800 square fee housing units that allow dogs", "source": "housing unit whose size is 800 square feet and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_dogs)))", "qid": "housing_train_144", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "800 square foot housing unit with a private room", "source": "housing unit whose size is 800 square feet and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_room)))", "qid": "housing_train_203", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "800 square foot apartment with private bathroom", "source": "housing unit whose size is 800 square feet and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_bath)))", "qid": "housing_train_217", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "pet friendly 800 square feet housing unit", "source": "housing unit whose size is 800 square feet and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_dogs)))", "qid": "housing_train_254", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "catfriendly apartments with rent at 1500", "source": "housing unit whose monthly rent is 1500 dollars and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_cats)))", "qid": "housing_train_258", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me a housing unti that chagres 1500 for rent and has a priiiiiiat bathroom", "source": "housing unit whose monthly rent is 1500 dollars and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_room)))", "qid": "housing_train_271", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "800 square foot apartment with a private room", "source": "housing unit whose size is 800 square feet and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_room)))", "qid": "housing_train_314", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "dogfriendly housing that is 800 square feet", "source": "housing unit whose size is 800 square feet and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_dogs)))", "qid": "housing_train_342", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing units that allow cats and charge 1500 rent monthly", "source": "housing unit whose monthly rent is 1500 dollars and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_cats)))", "qid": "housing_train_380", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "dogfriendly 800 square foot apartment", "source": "housing unit whose size is 800 square feet and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_dogs)))", "qid": "housing_train_383", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which housing unit with an area of 800 square feet has the facility of a private room", "source": "housing unit whose size is 800 square feet and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_room)))", "qid": "housing_train_400", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "800 square foot apartment that allows cats", "source": "housing unit whose size is 800 square feet and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_cats)))", "qid": "housing_train_404", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find pet friendly housing units that charge 1500 dollars as rent", "source": "housing unit whose monthly rent is 1500 dollars and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_dogs)))", "qid": "housing_train_501", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing units that are 800 square feet and have private baths", "source": "housing unit whose size is 800 square feet and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_bath)))", "qid": "housing_train_526", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which housing unit has 1500 dollars as monthly rent and also has the facility of a private bath", "source": "housing unit whose monthly rent is 1500 dollars and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_bath)))", "qid": "housing_train_530", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which housing unit with an area of 800 square permits dogs", "source": "housing unit whose size is 800 square feet and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_dogs)))", "qid": "housing_train_551", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing unit that costs 1500 dollars rent and allows cats", "source": "housing unit whose monthly rent is 1500 dollars and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_cats)))", "qid": "housing_train_587", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing with 1500 dollars rent that has a private bath", "source": "housing unit whose monthly rent is 1500 dollars and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_bath)))", "qid": "housing_train_606", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing unit that costs 1500 dollars rent and allows dogs", "source": "housing unit whose monthly rent is 1500 dollars and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_dogs)))", "qid": "housing_train_611", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing that allows cats and is 1500 a month", "source": "housing unit whose monthly rent is 1500 dollars and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_cats)))", "qid": "housing_train_617", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing with a private room that is 800 square feet total", "source": "housing unit whose size is 800 square feet and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_room)))", "qid": "housing_train_659", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing that is 1500month and includes a private room", "source": "housing unit whose monthly rent is 1500 dollars and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_room)))", "qid": "housing_train_683", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which 1500monthly rentals come with private room", "source": "housing unit whose monthly rent is 1500 dollars and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_room)))", "qid": "housing_test_12", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "private room for 1500 a month", "source": "housing unit whose monthly rent is 1500 dollars and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_room)))", "qid": "housing_test_15", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which housing unit has a private bath and an area of 800 square feet", "source": "housing unit whose size is 800 square feet and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_bath)))", "qid": "housing_test_24", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find housing units with a private room and is of size 800 square feet", "source": "housing unit whose size is 800 square feet and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string has_private_room)))", "qid": "housing_test_69", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing units with a private bath and a 1500 dollar monthly rent", "source": "housing unit whose monthly rent is 1500 dollars and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string has_private_bath)))", "qid": "housing_test_80", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find 800 square feet housing units that allow cats", "source": "housing unit whose size is 800 square feet and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_cats)))", "qid": "housing_test_101", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "cats permitted 1500 rent monthly", "source": "housing unit whose monthly rent is 1500 dollars and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_cats)))", "qid": "housing_test_108", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which housing unit with an area of 800 square feet permits cats in it", "source": "housing unit whose size is 800 square feet and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string allows_cats)))", "qid": "housing_test_119", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "housing with 1500 rent and allows dogs", "source": "housing unit whose monthly rent is 1500 dollars and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string allows_dogs)))", "qid": "housing_test_127", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what kind of housing is 800 square feet", "source": "housing type that is housing type of housing unit whose size is 800 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "qid": "housing_train_23", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "neighborhoods with housing that is 1500month", "source": "neighborhood that is neighborhood of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_train_104", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what neighborhoods have units with 800 square feet", "source": "neighborhood that is neighborhood of housing unit whose size is 800 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "qid": "housing_train_137", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what kind of housing is available for 1500month", "source": "housing type that is housing type of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_train_147", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what neighborhood is the 800 square foot apartment in", "source": "neighborhood that is neighborhood of housing unit whose size is 800 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "qid": "housing_train_184", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "neighborhoods that have 800 square foot housing", "source": "neighborhood that is neighborhood of housing unit whose size is 800 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "qid": "housing_train_247", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which kind of housing is available for a rent of 1500 dollars per month", "source": "housing type that is housing type of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_train_291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "show only neighborhood units of 800 square feet", "source": "neighborhood that is neighborhood of housing unit whose size is 800 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "qid": "housing_train_354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the neighborhood  of the housing unit with the monthly rent 1500 dollars", "source": "neighborhood that is neighborhood of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_train_468", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "unit of 800 square feet", "source": "housing type that is housing type of housing unit whose size is 800 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "qid": "housing_train_487", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "neighborhood of housing unit whose monthly rent is 1500 dollars", "source": "neighborhood that is neighborhood of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_train_668", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "seeking housing with rent at 1500", "source": "housing type that is housing type of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_test_40", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "housing units that are 800 square feet", "source": "housing type that is housing type of housing unit whose size is 800 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "qid": "housing_test_41", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "units with 1500 dollar rent", "source": "housing type that is housing type of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_test_57", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "housing with rent at 1500", "source": "neighborhood that is neighborhood of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_test_88", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the housing type that charges 1500 dollars as monthly rent", "source": "housing type that is housing type of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_test_93", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which nearby area has a housing unit of 800 square feet by area", "source": "neighborhood that is neighborhood of housing unit whose size is 800 square feet", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet))))", "qid": "housing_test_143", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which neighborhoods have housing with monthly rent of 1500 dollars", "source": "neighborhood that is neighborhood of housing unit whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar))))", "qid": "housing_test_166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find housing units with private room near midtown west", "source": "housing unit whose neighborhood is midtown west and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_room)))", "qid": "housing_train_16", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "apartments with a private bath", "source": "housing unit whose housing type is apartment and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_bath)))", "qid": "housing_train_46", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "private room in midtown west", "source": "housing unit whose neighborhood is midtown west and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_room)))", "qid": "housing_train_52", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "apartments that allow dogs", "source": "housing unit whose housing type is apartment and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string allows_dogs)))", "qid": "housing_train_95", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "housing units in midtown west that allow dogs", "source": "housing unit whose neighborhood is midtown west and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string allows_dogs)))", "qid": "housing_train_103", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find apartments with a private bath", "source": "housing unit whose housing type is apartment and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_bath)))", "qid": "housing_train_110", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "pet friendly housing near midtown west", "source": "housing unit whose neighborhood is midtown west and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string allows_cats)))", "qid": "housing_train_171", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "housing units with a  orivate bath in the midtown west area", "source": "housing unit whose neighborhood is midtown west and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_bath)))", "qid": "housing_train_182", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "apartment with a private bathroom", "source": "housing unit whose housing type is apartment and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_bath)))", "qid": "housing_train_218", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "housing unit in midtown west and allows dogs", "source": "housing unit whose neighborhood is midtown west and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string allows_dogs)))", "qid": "housing_train_256", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "housing apartments with a private bath", "source": "housing unit whose housing type is apartment and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_bath)))", "qid": "housing_train_262", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "apartments with private baths", "source": "housing unit whose housing type is apartment and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_bath)))", "qid": "housing_train_397", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "housing unit with a private room in midtown west", "source": "housing unit whose neighborhood is midtown west and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_room)))", "qid": "housing_train_449", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "show me housing in midtown west where dogs are welcome", "source": "housing unit whose neighborhood is midtown west and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string allows_dogs)))", "qid": "housing_train_477", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "cats allowed in midtown west", "source": "housing unit whose neighborhood is midtown west and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string allows_cats)))", "qid": "housing_train_506", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "housing units that allow cats in midtown west", "source": "housing unit whose neighborhood is midtown west and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string allows_cats)))", "qid": "housing_train_557", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what midtown west housing unit has a private bath", "source": "housing unit whose neighborhood is midtown west and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_bath)))", "qid": "housing_train_562", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "housing unit which is an apartment housing type with a private room", "source": "housing unit whose housing type is apartment and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_room)))", "qid": "housing_train_569", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "apartments with a private room", "source": "housing unit whose housing type is apartment and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_room)))", "qid": "housing_train_577", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "apartment with a private room", "source": "housing unit whose housing type is apartment and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_room)))", "qid": "housing_train_585", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "apartments with a private room in midtown west", "source": "housing unit whose neighborhood is midtown west and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_room)))", "qid": "housing_train_632", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "apartment with a master bathroom in midtown west neighbourhood", "source": "housing unit whose neighborhood is midtown west and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_bath)))", "qid": "housing_train_641", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "cat friendly apartments in midtown west", "source": "housing unit whose neighborhood is midtown west and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string allows_cats)))", "qid": "housing_train_679", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "show me apartments with a private room", "source": "housing unit whose housing type is apartment and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_room)))", "qid": "housing_train_693", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find housing units with a private room and is of the housing type apartment", "source": "housing unit whose housing type is apartment and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string has_private_room)))", "qid": "housing_test_32", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find apartments that are pet friendly", "source": "housing unit whose housing type is apartment and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string allows_cats)))", "qid": "housing_test_133", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "apartment that allows cats", "source": "housing unit whose housing type is apartment and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string allows_cats)))", "qid": "housing_test_184", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "private bath in midtown west", "source": "housing unit whose neighborhood is midtown west and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string has_private_bath)))", "qid": "housing_test_185", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "how much is 123 sesame street per month", "source": "monthly rent of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string rent)))", "qid": "housing_train_7", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the 123 sesame street housing type", "source": "housing type of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string housing_type)))", "qid": "housing_train_35", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "area around 123sesame street", "source": "neighborhood of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string neighborhood)))", "qid": "housing_train_41", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "housing near 123 sesame street", "source": "neighborhood of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string neighborhood)))", "qid": "housing_train_60", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what day did 123 sesame street become available", "source": "posting date of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string posting_date)))", "qid": "housing_train_165", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "housing type on 123 sesame street", "source": "housing type of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string housing_type)))", "qid": "housing_train_215", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how much a month is the rent at 123 sesame street", "source": "monthly rent of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string rent)))", "qid": "housing_train_237", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how large is the unit at 123 sesame street", "source": "size of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string size)))", "qid": "housing_train_277", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what kind of housing is in 123 sesame street", "source": "neighborhood of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string neighborhood)))", "qid": "housing_train_323", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the rent of 123 sesame street", "source": "monthly rent of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string rent)))", "qid": "housing_train_350", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "when was 123 sesame street posted", "source": "posting date of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string posting_date)))", "qid": "housing_train_362", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what neighborhood is 123 sesame street in", "source": "neighborhood of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string neighborhood)))", "qid": "housing_train_377", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the rent of 123 sesame street per month", "source": "monthly rent of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string rent)))", "qid": "housing_train_414", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the monthly rent at 123 sesame street", "source": "monthly rent of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string rent)))", "qid": "housing_train_431", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the square footage of 123 sesame street", "source": "size of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string size)))", "qid": "housing_train_432", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the date of the 123 sesame street posting", "source": "posting date of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string posting_date)))", "qid": "housing_train_482", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the area of 123 sesame street", "source": "size of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string size)))", "qid": "housing_train_536", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how big is 123 sesame street", "source": "size of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string size)))", "qid": "housing_train_596", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the date of 123 sesame street posting", "source": "posting date of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string posting_date)))", "qid": "housing_train_599", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the neighborhood of 123 sesame street", "source": "neighborhood of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string neighborhood)))", "qid": "housing_train_649", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what kind of housing is 123 sesame street", "source": "housing type of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string housing_type)))", "qid": "housing_train_716", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how large is 123 sesame street", "source": "size of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string size)))", "qid": "housing_train_737", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the date on which 123 sesame street was posted", "source": "posting date of 123 sesame street", "target": "(call listValue (call getProperty en.housing_unit.123_sesame_street (string posting_date)))", "qid": "housing_test_67", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "housing that has at least two types", "source": "housing unit that has at least two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string >=) (number 2)))", "qid": "housing_train_31", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing units with 2 neighborhoods", "source": "housing unit that has two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (number 2)))", "qid": "housing_train_47", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing units that have more than two neighborhoods", "source": "housing unit that has more than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string >) (number 2)))", "qid": "housing_train_75", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing that has more than two neighborhood", "source": "housing unit that has more than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string >) (number 2)))", "qid": "housing_train_105", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what housing unit has two or more neighborhoods", "source": "housing unit that has at least two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string >=) (number 2)))", "qid": "housing_train_138", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing found in two or less neighborhoods", "source": "housing unit that has at most two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string <=) (number 2)))", "qid": "housing_train_153", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "quiet apartments", "source": "housing unit that has less than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string <) (number 2)))", "qid": "housing_train_176", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing units near two neighborhoods", "source": "housing unit that has two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (number 2)))", "qid": "housing_train_188", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which housing offers less than two kinds of units", "source": "housing unit that has less than two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <) (number 2)))", "qid": "housing_train_198", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing units with less than two nieghborhoods", "source": "housing unit that has less than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string <) (number 2)))", "qid": "housing_train_199", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing found in less than two neighborhoods", "source": "housing unit that has less than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string <) (number 2)))", "qid": "housing_train_242", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing with 2 surrounding neighborhoods", "source": "housing unit that has at most two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string <=) (number 2)))", "qid": "housing_train_250", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing unit with 2 types of housing", "source": "housing unit that has less than two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <) (number 2)))", "qid": "housing_train_284", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing units with one housing type", "source": "housing unit that has less than two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <) (number 2)))", "qid": "housing_train_299", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a twohousing unit", "source": "housing unit that has two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (number 2)))", "qid": "housing_train_300", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing unit within at most 2 neighborhoods", "source": "housing unit that has at most two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string <=) (number 2)))", "qid": "housing_train_360", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what housing unit has two or more housing types", "source": "housing unit that has more than two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string >) (number 2)))", "qid": "housing_train_363", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "building with two or less kinds of unis", "source": "housing unit that has at most two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <=) (number 2)))", "qid": "housing_train_375", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what housing unit has two housing types", "source": "housing unit that has two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (number 2)))", "qid": "housing_train_406", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "unit with one housing type", "source": "housing unit that has less than two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <) (number 2)))", "qid": "housing_train_428", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a housing unit that includes more than two housing types", "source": "housing unit that has more than two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string >) (number 2)))", "qid": "housing_train_438", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which housing unit has a maximum of two housing types", "source": "housing unit that has at most two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <=) (number 2)))", "qid": "housing_train_440", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing that has at least two neighborhood", "source": "housing unit that has at least two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string >=) (number 2)))", "qid": "housing_train_448", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what housing unit is in two neighborhoods", "source": "housing unit that has two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (number 2)))", "qid": "housing_train_464", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which housing unit has two types minimum", "source": "housing unit that has at least two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string >=) (number 2)))", "qid": "housing_train_470", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find housing units with just one neighborhood", "source": "housing unit that has less than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string <) (number 2)))", "qid": "housing_train_475", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing in more than two neighborhoods", "source": "housing unit that has more than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string >) (number 2)))", "qid": "housing_train_547", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what kind of housing has two housing types", "source": "housing unit that has at least two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string >=) (number 2)))", "qid": "housing_train_571", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find a housing unit that is in two neighborhoods", "source": "housing unit that has two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (number 2)))", "qid": "housing_train_598", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find housing units that satisfies two housing types", "source": "housing unit that has at most two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <=) (number 2)))", "qid": "housing_train_652", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "apartments with less than 2 units", "source": "housing unit that has less than two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <) (number 2)))", "qid": "housing_train_666", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what housing unit has 2 or more types", "source": "housing unit that has at least two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string >=) (number 2)))", "qid": "housing_train_678", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "posting with at least two types of housing", "source": "housing unit that has at least two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string >=) (number 2)))", "qid": "housing_train_685", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which area has less than two housing units", "source": "housing unit that has less than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string <) (number 2)))", "qid": "housing_train_702", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing that are either apartments or houses for rent", "source": "housing unit that has at most two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <=) (number 2)))", "qid": "housing_test_10", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing of more than two types", "source": "housing unit that has more than two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string >) (number 2)))", "qid": "housing_test_16", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing near at least two neighborhoods", "source": "housing unit that has at least two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string >=) (number 2)))", "qid": "housing_test_30", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which housing has two types", "source": "housing unit that has two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (number 2)))", "qid": "housing_test_81", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing units that have the most housing types", "source": "housing unit that has at most two housing type", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string <=) (number 2)))", "qid": "housing_test_126", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what housing unit is in over two neighborhoods", "source": "housing unit that has more than two neighborhood", "target": "(call listValue (call countComparative (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string >) (number 2)))", "qid": "housing_test_173", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing of 800 square feet posted on january 2", "source": "housing unit whose size is 800 square feet and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_453", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what housing unit posted on jan 2s rent is 1500 dollars", "source": "housing unit whose monthly rent is 1500 dollars and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_454", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing with monthly rent of 1500 dollars that was posted on january 2", "source": "housing unit whose monthly rent is 1500 dollars and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_705", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing 800 sf in size posted on january 2", "source": "housing unit whose size is 800 square feet and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_test_61", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing units with monthly rents of 1500 dollars that posted on january 2", "source": "housing unit whose monthly rent is 1500 dollars and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_test_95", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing with monthly rent of 1500 dollars that was posted on january 2", "source": "housing unit whose monthly rent is 1500 dollars and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_test_164", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what 800 square foot housing posted jan 2nd", "source": "housing unit whose size is 800 square feet and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_test_177", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing units that have a private room that was posted on january 2", "source": "housing unit that has a private room and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_29", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing with a private room that posted on january 2", "source": "housing unit that has a private room and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_183", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing that allows dogs and was posted on january 2", "source": "housing unit that allows dogs and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_220", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing posted on january 2nd that allows dogs", "source": "housing unit that allows dogs and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_259", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what housing using posted on jan 2 has a private bath", "source": "housing unit that has a private bath and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_302", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing with private room that was posted on january 2", "source": "housing unit that has a private room and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_337", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "which housing posted jan 2nd permits dogs", "source": "housing unit that allows dogs and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_391", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "a housing unit with a private bath that posted on january 2", "source": "housing unit that has a private bath and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_410", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "which housing posted jan 2nd permits cats", "source": "housing unit that allows cats and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_415", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what housing unit  posted on jan 2 has a private room", "source": "housing unit that has a private room and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_room)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_576", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what housing unit posted on jan 2 allows dogs", "source": "housing unit that allows dogs and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_dogs)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_test_44", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing with private bath posted on january 2", "source": "housing unit that has a private bath and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string has_private_bath)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_test_55", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what housing unit posted on jan 2 allows cats", "source": "housing unit that allows cats and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_test_89", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing that allows cats posted on january 2", "source": "housing unit that allows cats and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string allows_cats)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_test_174", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing that was posted on january 2 or february 3", "source": "housing unit whose posting date is at least jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_34", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "housing that was posted on february 3", "source": "housing unit whose posting date is at least jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_68", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "housing posted before january 2 or february 3", "source": "housing unit whose posting date is smaller than jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_173", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "housing that was posted after january 2 or february 3", "source": "housing unit whose posting date is larger than jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_235", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "housing that was posted after january 2 or after february 3", "source": "housing unit whose posting date is at least jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_296", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "which housing posted no earlier than jan 2nd or feb 3rd", "source": "housing unit whose posting date is at least jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_389", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "find housing units with posting date between january 2nd and february 3rd", "source": "housing unit whose posting date is at most jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "find housing unit with posting date between january 2nd or february 3rd", "source": "housing unit whose posting date is smaller than jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_466", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "housing with posting dates before january 2nd and february 3rd", "source": "housing unit whose posting date is smaller than jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_518", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "which housing unit is posted before jan 2", "source": "housing unit whose posting date is smaller than jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_556", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "housing posted on or before january 2 or on or before february 3", "source": "housing unit whose posting date is at most jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_568", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "housing unit posted after january 2 or february 3", "source": "housing unit whose posting date is larger than jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_597", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "housing that posted after january 2 or february 3", "source": "housing unit whose posting date is larger than jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_train_711", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "housing unit posted at the latest january 2 or february 3", "source": "housing unit whose posting date is at most jan 2 or feb 3", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <=) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))", "qid": "housing_test_171", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2015 1 2) (date 2015 2 3)))))"}
{"paraphrased": "a housing unit in midtown west that was posted on january 2", "source": "housing unit whose neighborhood is midtown west and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_177", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "which housing unit is in midtown west and was posted on january 2", "source": "housing unit whose neighborhood is midtown west and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_566", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "housing in midtown west neighborhood posted on january 2", "source": "housing unit whose neighborhood is midtown west and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_581", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "apartments that were posted on january 2", "source": "housing unit whose housing type is apartment and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_600", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what housing unit in midtown west was posted on jan 2", "source": "housing unit whose neighborhood is midtown west and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_694", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "apartments that were posted on january 2", "source": "housing unit whose housing type is apartment and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_712", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what housing unit was posted on jan 2", "source": "housing unit whose posting date is jan 2 and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_145", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "which housing unit has a jan 2nd posting", "source": "housing unit whose posting date is jan 2 and whose posting date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string posting_date) (string =) (date 2015 1 2)))", "qid": "housing_train_508", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "find housing units that is not an apartment", "source": "housing unit whose housing type is not apartment", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string !=) en.housing.apartment))", "qid": "housing_train_58", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what are the  units that  do  not belong to the area around midtown west", "source": "housing unit whose neighborhood is not midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string !=) en.neighborhood.midtown_west))", "qid": "housing_train_166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing unit near midtown west", "source": "housing unit whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_231", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "looking for housing that isnt an apartment", "source": "housing unit whose housing type is not apartment", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string !=) en.housing.apartment))", "qid": "housing_train_240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find housing units far from midtown west", "source": "housing unit whose neighborhood is not midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string !=) en.neighborhood.midtown_west))", "qid": "housing_train_304", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing that is not an apartment", "source": "housing unit whose housing type is not apartment", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string !=) en.housing.apartment))", "qid": "housing_train_328", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing not in midtown west", "source": "housing unit whose neighborhood is not midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string !=) en.neighborhood.midtown_west))", "qid": "housing_train_335", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me housing units that arent apartments", "source": "housing unit whose housing type is not apartment", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string !=) en.housing.apartment))", "qid": "housing_train_496", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing units that are apartments", "source": "housing unit whose housing type is apartment", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_505", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all units available midtown east", "source": "housing unit whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_539", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing that isnt in midtown west", "source": "housing unit whose neighborhood is not midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string !=) en.neighborhood.midtown_west))", "qid": "housing_train_616", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "list all housing units that are apartments", "source": "housing unit whose housing type is apartment", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_619", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "exclude apartments from midtown west", "source": "housing unit whose neighborhood is not midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string !=) en.neighborhood.midtown_west))", "qid": "housing_train_741", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which housing unit does not have apartment type of house", "source": "housing unit whose housing type is not apartment", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string !=) en.housing.apartment))", "qid": "housing_test_116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what housing units are in midtown west", "source": "housing unit whose neighborhood is midtown west", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_test_149", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing that is bigger than 123 sesame street", "source": "housing unit whose size is larger than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_0", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing posted before or on the same day as 123 sesame street", "source": "housing unit whose posting date is at most posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_3", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "units with larger rent than 123 sesame street", "source": "housing unit whose monthly rent is larger than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_14", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which housing unit has a lesser monthly rent than 123 sesame street", "source": "housing unit whose monthly rent is smaller than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_24", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing the same size as 123 sesame street", "source": "housing unit whose size is at most size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_27", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing units that are same as or lesser than the size of 123 sesame street", "source": "housing unit whose size is at most size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_32", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "apartments with the same rent as 123 sesame street", "source": "housing unit whose monthly rent is at least monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_49", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing that is at least as expensive as 123 sesame street", "source": "housing unit whose monthly rent is at least monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing units outsizing 123 sesame street", "source": "housing unit whose size is larger than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_53", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what housing units are the same size as those in 123 sesame street", "source": "housing unit whose size is at least size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_57", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "show me housing which posted on or before the day 123 sesame street did", "source": "housing unit whose posting date is at most posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_77", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing that posted on the same day at 123 sesame street", "source": "housing unit whose posting date is at least posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_93", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing larger than 123 sesame street", "source": "housing unit whose size is larger than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_106", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing units posted before 123 sesame street", "source": "housing unit whose posting date is larger than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing posted after 123 sesame street", "source": "housing unit whose posting date is larger than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_149", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "apartments with rent that is more expensive than 123 sesame street", "source": "housing unit whose monthly rent is larger than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing that is the same rent as or cheaper than 123 sesame street", "source": "housing unit whose monthly rent is at most monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_179", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "unit smaller than 123 sesame street", "source": "housing unit whose size is smaller than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_193", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which housing is no larger than 123 sesame street", "source": "housing unit whose size is at most size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "apartments posted before 123 sesame street was posted", "source": "housing unit whose posting date is smaller than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing units posted before or on the same date as 123 sesame street", "source": "housing unit whose posting date is at most posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_267", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which housing unit is more expensive than 123 sesame street", "source": "housing unit whose monthly rent is larger than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing units that are at least the same square footage as the housing unit on 123 sesame street", "source": "housing unit whose size is at least size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_281", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing unit with posting date less than that of 123 sesame street", "source": "housing unit whose posting date is smaller than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_292", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing with more square footage than 123 sesame street", "source": "housing unit whose size is larger than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_297", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "apartments with a cheaper rent than 123 sesame street", "source": "housing unit whose monthly rent is smaller than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_311", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "apartments that are smaller than 123 sesame street", "source": "housing unit whose size is smaller than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which housing unit is posted before  the posting date of 123 sesame street", "source": "housing unit whose posting date is smaller than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing unit with a posting date bigger than the date of 123 sesame street", "source": "housing unit whose posting date is larger than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_403", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing units posted after 123 sesame street", "source": "housing unit whose posting date is smaller than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing posted before 123 sesame street", "source": "housing unit whose posting date is smaller than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing units that are posted on the date same as 123 sesame street or later", "source": "housing unit whose posting date is at least posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_429", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing posted the same day or after 123 sesame street", "source": "housing unit whose posting date is at least posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_train_460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "apartment that is the same size are 123 sesame street", "source": "housing unit whose size is at least size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_472", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing that does not have a higher rent then 123 sesame street", "source": "housing unit whose monthly rent is at most monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_479", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing units with rental charges greater than 123 sesame street", "source": "housing unit whose monthly rent is larger than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_490", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing units with size lesser than that of 123 sesame street", "source": "housing unit whose size is smaller than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_509", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing that is the same size or bigger than 123 sesame street", "source": "housing unit whose size is at least size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_523", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing units with less than or equal to the rent of 123 sesame street", "source": "housing unit whose monthly rent is at most monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_622", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is the monthly rent for 123 sesame street", "source": "housing unit whose monthly rent is at least monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_640", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which housing unit resembles the size of 123 sesame street", "source": "housing unit whose size is at most size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_train_717", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing unit with a cheaper rent than 123 sesame street", "source": "housing unit whose monthly rent is smaller than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_train_722", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which housing unit has the rent of 123 sesame street", "source": "housing unit whose monthly rent is at least monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_test_2", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing unit as costly as the rent of the homes in 123 sesame street", "source": "housing unit whose monthly rent is at least monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_test_14", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing units that are smaller than 123 sesame street", "source": "housing unit whose size is smaller than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_test_19", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find housing units with rental charges lesser than that of 123 sesame street", "source": "housing unit whose monthly rent is smaller than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_test_21", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing units bigger than homes on 123 sesame street", "source": "housing unit whose size is larger than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_test_22", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing that is smaller than 123 sesame street", "source": "housing unit whose size is smaller than size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_test_29", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing unit that costs as much rent as the homes in 123 sesame street", "source": "housing unit whose monthly rent is at most monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_test_102", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing that is more expensive than 123 sesame street", "source": "housing unit whose monthly rent is larger than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_test_109", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "apartment posted at a later date than 123 sesame street", "source": "housing unit whose posting date is larger than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_test_115", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing that is the same size or smaller than 123 sesame street", "source": "housing unit whose size is at most size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string <=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_test_124", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which housing unit was posted after the posting date of 123 sesame street", "source": "housing unit whose posting date is larger than posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_test_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what housing has the same posting date as those in 123 sesame street", "source": "housing unit whose posting date is at least posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string posting_date)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string posting_date)))))", "qid": "housing_test_147", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "housing that is cheaper than 123 sesame street", "source": "housing unit whose monthly rent is smaller than monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string rent)) (string <) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string rent)))))", "qid": "housing_test_162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what housing units that are at least the size of 123 sesame street", "source": "housing unit whose size is at least size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (call ensureNumericProperty (string size)) (string >=) (call ensureNumericEntity (call getProperty en.housing_unit.123_sesame_street (string size)))))", "qid": "housing_test_176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is the housing type number", "source": "number of housing type", "target": "(call listValue (call .size (call getProperty (call singleton en.housing) (string !type))))", "qid": "housing_train_80", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the house number of the apartment", "source": "number of housing unit", "target": "(call listValue (call .size (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_190", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the phone number of this apartment complex", "source": "number of housing type", "target": "(call listValue (call .size (call getProperty (call singleton en.housing) (string !type))))", "qid": "housing_train_202", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many neighborhoods", "source": "number of neighborhood", "target": "(call listValue (call .size (call getProperty (call singleton en.neighborhood) (string !type))))", "qid": "housing_train_276", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many housing units are there", "source": "number of housing unit", "target": "(call listValue (call .size (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_train_372", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many different housing types are there", "source": "number of housing type", "target": "(call listValue (call .size (call getProperty (call singleton en.housing) (string !type))))", "qid": "housing_train_478", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how  many neighbourhoods are there", "source": "number of neighborhood", "target": "(call listValue (call .size (call getProperty (call singleton en.neighborhood) (string !type))))", "qid": "housing_train_564", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "count of different units", "source": "number of housing type", "target": "(call listValue (call .size (call getProperty (call singleton en.housing) (string !type))))", "qid": "housing_train_592", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "how many neighborhoods are in the city", "source": "number of neighborhood", "target": "(call listValue (call .size (call getProperty (call singleton en.neighborhood) (string !type))))", "qid": "housing_train_612", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "show total number of all units", "source": "number of housing unit", "target": "(call listValue (call .size (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_37", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the housing unit number", "source": "number of housing unit", "target": "(call listValue (call .size (call getProperty (call singleton en.housing_unit) (string !type))))", "qid": "housing_test_167", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "apartments renting for 1500 a month", "source": "housing unit whose monthly rent is 1500 dollars and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_66", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments in midtown west with rent at 1500", "source": "housing unit whose monthly rent is 1500 dollars and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_111", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing unit in midtown west that has monthly rent of 1500", "source": "housing unit whose monthly rent is 1500 dollars and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_118", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "midtown west unit with 1500 rent monthly", "source": "housing unit whose monthly rent is 1500 dollars and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_351", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find 800 square feet sized housing in the neighborhoods of midtown west", "source": "housing unit whose size is 800 square feet and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which housing unit has apartment kind of house with an area of 800 square feet", "source": "housing unit whose size is 800 square feet and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_367", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartment for rent at 1500", "source": "housing unit whose monthly rent is 1500 dollars and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_381", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which midtown west housing have 800 square feet", "source": "housing unit whose size is 800 square feet and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_388", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "800 square foot apartment in midtown west", "source": "housing unit whose size is 800 square feet and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_392", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find housing units with 1500 dollars as rent and is near midtown west", "source": "housing unit whose monthly rent is 1500 dollars and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_461", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which housing unit does not belong to the apartment type with a monthly rent of 1500 dollars", "source": "housing unit whose monthly rent is 1500 dollars and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_529", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "800 square feet in midtown west", "source": "housing unit whose size is 800 square feet and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_553", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find 800 square feet housing units of the type apartment", "source": "housing unit whose size is 800 square feet and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_605", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments for 1500", "source": "housing unit whose monthly rent is 1500 dollars and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_test_33", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing in midtown west with 1500month rent", "source": "housing unit whose monthly rent is 1500 dollars and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_test_70", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments in the midtown west or chelsea neighborhoods", "source": "housing unit whose neighborhood is midtown west or chelsea", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call concat en.neighborhood.midtown_west en.neighborhood.chelsea)))", "qid": "housing_train_54", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "looking for housing that is either an apartment or condo", "source": "housing unit whose housing type is apartment or condo", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call concat en.housing.apartment en.housing.condo)))", "qid": "housing_train_98", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "aparartment or condo units", "source": "housing unit whose housing type is apartment or condo", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call concat en.housing.apartment en.housing.condo)))", "qid": "housing_train_181", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me housing in midtown west or chelsea", "source": "housing unit whose neighborhood is midtown west or chelsea", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call concat en.neighborhood.midtown_west en.neighborhood.chelsea)))", "qid": "housing_train_364", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me apartments and condos", "source": "housing unit whose housing type is apartment or condo", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call concat en.housing.apartment en.housing.condo)))", "qid": "housing_train_409", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which housing unit is in the area of midtown west or chelsea", "source": "housing unit whose neighborhood is midtown west or chelsea", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call concat en.neighborhood.midtown_west en.neighborhood.chelsea)))", "qid": "housing_train_485", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "apartment or condo", "source": "housing unit whose housing type is apartment or condo", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call concat en.housing.apartment en.housing.condo)))", "qid": "housing_train_634", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find housing units in the neighborhoods of midtown west or chelsea", "source": "housing unit whose neighborhood is midtown west or chelsea", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call concat en.neighborhood.midtown_west en.neighborhood.chelsea)))", "qid": "housing_test_68", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find housing units of the type apartment or condo", "source": "housing unit whose housing type is apartment or condo", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call concat en.housing.apartment en.housing.condo)))", "qid": "housing_test_142", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which housing unit resembles 123 sesame street in size", "source": "housing unit whose size is size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (call getProperty en.housing_unit.123_sesame_street (string size))))", "qid": "housing_train_18", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which housing unit resembles that of 123 sesame street", "source": "housing unit whose housing type is housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call getProperty en.housing_unit.123_sesame_street (string housing_type))))", "qid": "housing_train_134", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find housing units in the same size of 123 sesame street", "source": "housing unit whose size is size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (call getProperty en.housing_unit.123_sesame_street (string size))))", "qid": "housing_train_264", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find housing units in the same housing type of 123 sesame street", "source": "housing unit whose housing type is housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call getProperty en.housing_unit.123_sesame_street (string housing_type))))", "qid": "housing_train_308", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "housing with the same rent as 123 sesame street", "source": "housing unit whose monthly rent is monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call getProperty en.housing_unit.123_sesame_street (string rent))))", "qid": "housing_train_317", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "housing unit with same housing type as that of 123 sesame street", "source": "housing unit whose housing type is housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call getProperty en.housing_unit.123_sesame_street (string housing_type))))", "qid": "housing_train_321", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "housing in the neighborhood of 123 sesame street", "source": "housing unit whose neighborhood is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call getProperty en.housing_unit.123_sesame_street (string neighborhood))))", "qid": "housing_train_371", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "housing posted the same day as 123 sesame street", "source": "housing unit whose posting date is posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call getProperty en.housing_unit.123_sesame_street (string posting_date))))", "qid": "housing_train_458", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which housing posted on the same date as 123 sesame street", "source": "housing unit whose posting date is posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call getProperty en.housing_unit.123_sesame_street (string posting_date))))", "qid": "housing_train_467", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which housing unit is posted on the posting date of 123 sesame street", "source": "housing unit whose posting date is posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call getProperty en.housing_unit.123_sesame_street (string posting_date))))", "qid": "housing_train_491", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which housing unit has the monthly rent of 123 sesame street", "source": "housing unit whose monthly rent is monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call getProperty en.housing_unit.123_sesame_street (string rent))))", "qid": "housing_train_519", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "housing unit with the same monthly rent as 123 sesame street", "source": "housing unit whose monthly rent is monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call getProperty en.housing_unit.123_sesame_street (string rent))))", "qid": "housing_train_542", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find housing units around the neighborhoods of 123 sesame street", "source": "housing unit whose neighborhood is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call getProperty en.housing_unit.123_sesame_street (string neighborhood))))", "qid": "housing_train_563", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "apartments similar in size to 123 sesame street", "source": "housing unit whose size is size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (call getProperty en.housing_unit.123_sesame_street (string size))))", "qid": "housing_train_586", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "housing that costs the same as 123 sesame street", "source": "housing unit whose monthly rent is monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call getProperty en.housing_unit.123_sesame_street (string rent))))", "qid": "housing_train_594", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "housing unit sizes on 123 sesame street", "source": "housing unit whose size is size of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (call getProperty en.housing_unit.123_sesame_street (string size))))", "qid": "housing_train_645", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "apartments in the same neighborhood at 123 sesame street", "source": "housing unit whose neighborhood is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call getProperty en.housing_unit.123_sesame_street (string neighborhood))))", "qid": "housing_train_658", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "housing posted the same day as 123 sesame street", "source": "housing unit whose posting date is posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call getProperty en.housing_unit.123_sesame_street (string posting_date))))", "qid": "housing_train_727", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "unit with same rent as 123 sesame street", "source": "housing unit whose monthly rent is monthly rent of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (call getProperty en.housing_unit.123_sesame_street (string rent))))", "qid": "housing_test_154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find housing units with the same posting date as 123 sesame street", "source": "housing unit whose posting date is posting date of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (call getProperty en.housing_unit.123_sesame_street (string posting_date))))", "qid": "housing_test_181", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find housing similar to the house located at 123 sesame street", "source": "housing unit whose housing type is housing type that is housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street)))", "qid": "housing_train_224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which housing unit is in the area of 123 sesame street", "source": "housing unit whose neighborhood is neighborhood that is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street)))", "qid": "housing_train_512", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "housing unit in the neighborhood of 123 sesame street", "source": "housing unit whose neighborhood is neighborhood that is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street)))", "qid": "housing_test_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me the same kind of housing as 123 sesame street", "source": "housing unit whose housing type is housing type that is housing type of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) (call filter (call getProperty (call singleton en.housing) (string !type)) (call reverse (string housing_type)) (string =) en.housing_unit.123_sesame_street)))", "qid": "housing_test_71", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "housing in the same neighborhood at 123 sesame street", "source": "housing unit whose neighborhood is neighborhood that is neighborhood of 123 sesame street", "target": "(call listValue (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) (call filter (call getProperty (call singleton en.neighborhood) (string !type)) (call reverse (string neighborhood)) (string =) en.housing_unit.123_sesame_street)))", "qid": "housing_test_161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find a housing unit posted on january 2 and that allows cats", "source": "housing unit whose posting date is jan 2 and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_cats)))", "qid": "housing_train_13", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "housing with private bath that was posted on january 2", "source": "housing unit whose posting date is jan 2 and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_bath)))", "qid": "housing_train_17", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "what housing unit with a private bath was posted on jan 2", "source": "housing unit whose posting date is jan 2 and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_bath)))", "qid": "housing_train_91", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "housing that allows dogs and was posted on january 2", "source": "housing unit whose posting date is jan 2 and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_dogs)))", "qid": "housing_train_265", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "what housing unit allowing cats was posted on jan 2", "source": "housing unit whose posting date is jan 2 and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_cats)))", "qid": "housing_train_283", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "what housing with a private room posted jan 2nd", "source": "housing unit whose posting date is jan 2 and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_room)))", "qid": "housing_train_289", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "find a housing unit posted on january 2 and that has a private room", "source": "housing unit whose posting date is jan 2 and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_room)))", "qid": "housing_train_332", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "what housing unit allowing dogs was posted on jan 2", "source": "housing unit whose posting date is jan 2 and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_dogs)))", "qid": "housing_train_340", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "what housing unit with a private room was posted on jan 2", "source": "housing unit whose posting date is jan 2 and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_room)))", "qid": "housing_train_405", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "housing allowing cats that was posted on january 2", "source": "housing unit whose posting date is jan 2 and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_cats)))", "qid": "housing_train_421", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "housing posted january 2nd that includes a private room", "source": "housing unit whose posting date is jan 2 and that has a private room", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_room)))", "qid": "housing_train_422", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "a unit with a private bath that posted on january 2", "source": "housing unit whose posting date is jan 2 and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_bath)))", "qid": "housing_train_635", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "housing that allows dogs that posted on january 2", "source": "housing unit whose posting date is jan 2 and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_dogs)))", "qid": "housing_train_721", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "housing allowing dogs that was posted on january 2", "source": "housing unit whose posting date is jan 2 and that allows dogs", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_dogs)))", "qid": "housing_test_1", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "housing with private bath that was posted on january 2", "source": "housing unit whose posting date is jan 2 and that has a private bath", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string has_private_bath)))", "qid": "housing_test_20", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "housing that allows cats that posted on january 2", "source": "housing unit whose posting date is jan 2 and that allows cats", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string posting_date) (string =) (date 2015 1 2)) (string allows_cats)))", "qid": "housing_test_42", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "which housing unit has houses of apartment kind", "source": "housing unit whose housing type is apartment and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_30", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartment in midtown west", "source": "housing unit whose housing type is apartment and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_141", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing apartments in a midtown west neighborhood", "source": "housing unit whose neighborhood is midtown west and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_172", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find housing that is an apartment", "source": "housing unit whose housing type is apartment and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_207", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "looking for apartments", "source": "housing unit whose housing type is apartment and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_260", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing unit that is an aprtment", "source": "housing unit whose housing type is apartment and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_307", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which housing unit is available in the area around mid town west", "source": "housing unit whose neighborhood is midtown west and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_361", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments in the midtown west neighborhood", "source": "housing unit whose housing type is apartment and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_474", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find housing units in the neighborhoods of midtown west", "source": "housing unit whose neighborhood is midtown west and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_589", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find apartments in the neighborhoods of midtown west", "source": "housing unit whose neighborhood is midtown west and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_train_730", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "list all apartments in midtown west", "source": "housing unit whose housing type is apartment and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_734", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments in the midtown west neighborhood", "source": "housing unit whose housing type is apartment and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string housing_type) (string =) en.housing.apartment) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_train_738", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "housing units in the midtown west area", "source": "housing unit whose neighborhood is midtown west and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_test_52", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartments in midtown west", "source": "housing unit whose neighborhood is midtown west and whose housing type is apartment", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string housing_type) (string =) en.housing.apartment))", "qid": "housing_test_60", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "apartment in the midtown west neighborhood", "source": "housing unit whose neighborhood is midtown west and whose neighborhood is midtown west", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string neighborhood) (string =) en.neighborhood.midtown_west) (string neighborhood) (string =) en.neighborhood.midtown_west))", "qid": "housing_test_113", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "how big is the housing unit", "source": "total size of housing unit", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_train_101", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average find 800 square feet housing units that allow cats", "source": "average size of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_train_268", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average rent per month of a housing unit", "source": "average monthly rent of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string rent))))", "qid": "housing_train_293", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is that housing unit size", "source": "total size of housing unit", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_train_346", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "unit of average size", "source": "average size of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_train_376", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average size of an apartment", "source": "average size of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_train_533", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the monthly rent of this apartment", "source": "total monthly rent of housing unit", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string rent))))", "qid": "housing_train_546", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is units monthly rental", "source": "total monthly rent of housing unit", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string rent))))", "qid": "housing_train_637", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average size of housing", "source": "average size of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_train_676", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average price of apartments", "source": "average monthly rent of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string rent))))", "qid": "housing_train_687", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "how large is the housing unit", "source": "total size of housing unit", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_train_691", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average monthly rent", "source": "average monthly rent of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string rent))))", "qid": "housing_test_13", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total area of a housing unit", "source": "total size of housing unit", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_test_34", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average monthly rent of housing units", "source": "average monthly rent of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string rent))))", "qid": "housing_test_103", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average monthly rent of the housing units", "source": "average monthly rent of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string rent))))", "qid": "housing_test_112", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the average area  of a housing unit", "source": "average size of housing unit", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_test_118", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the total monthly rent", "source": "total monthly rent of housing unit", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string rent))))", "qid": "housing_test_152", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is the size of the apartment", "source": "total size of housing unit", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.housing_unit) (string !type)) (string size))))", "qid": "housing_test_188", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "which housing unit has an area of 800 square feet", "source": "housing unit whose size is 800 square feet and whose size is 800 square feet", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string size) (string =) (number 800 en.square_feet)))", "qid": "housing_train_76", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what housing costs 1500 dollars and is 800 square feet", "source": "housing unit whose size is 800 square feet and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_train_100", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "800 square foot unit with rent of 1500 monthly", "source": "housing unit whose monthly rent is 1500 dollars and whose size is 800 square feet", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string size) (string =) (number 800 en.square_feet)))", "qid": "housing_train_102", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing that is 800 square feet and 1500month", "source": "housing unit whose size is 800 square feet and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_train_212", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which housing unit with an area of 800 square feet is available fora rent of 1500 dollars per month", "source": "housing unit whose size is 800 square feet and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_train_257", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which housing has a monthly rent of 1500 dollars", "source": "housing unit whose monthly rent is 1500 dollars and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_train_263", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which 1500monthly rentals are 800 square feet", "source": "housing unit whose monthly rent is 1500 dollars and whose size is 800 square feet", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string size) (string =) (number 800 en.square_feet)))", "qid": "housing_train_272", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "800 square foot apartment for 1500 rent", "source": "housing unit whose monthly rent is 1500 dollars and whose size is 800 square feet", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string size) (string =) (number 800 en.square_feet)))", "qid": "housing_train_494", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing that is 1500month and 800 square feet", "source": "housing unit whose monthly rent is 1500 dollars and whose size is 800 square feet", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string size) (string =) (number 800 en.square_feet)))", "qid": "housing_train_739", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "800 square foot apartment with rent at 1500 a month", "source": "housing unit whose size is 800 square feet and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_train_750", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "housing unit whose monthly rent is 1500 dollars", "source": "housing unit whose monthly rent is 1500 dollars and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_test_4", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find 800 square feet housing units", "source": "housing unit whose size is 800 square feet and whose size is 800 square feet", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string size) (string =) (number 800 en.square_feet)))", "qid": "housing_test_9", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find 800 square feet housing units with 1500 dollars as rent", "source": "housing unit whose size is 800 square feet and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string size) (string =) (number 800 en.square_feet)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_test_35", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find housing units with rent as 1500 dollars", "source": "housing unit whose monthly rent is 1500 dollars and whose monthly rent is 1500 dollars", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.housing_unit) (string !type)) (string rent) (string =) (number 1500 en.dollar)) (string rent) (string =) (number 1500 en.dollar)))", "qid": "housing_test_131", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
