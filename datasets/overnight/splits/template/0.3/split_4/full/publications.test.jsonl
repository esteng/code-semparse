{"paraphrased": "find any article that efron didnt write", "source": "article whose author is not efron", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string !=) en.person.efron))", "qid": "publications_train_134", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles not written by efron", "source": "article whose author is not efron", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string !=) en.person.efron))", "qid": "publications_train_296", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "multivariate data analysis cited articles", "source": "article that cites multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_620", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find an article not in annals of statistics", "source": "article whose venue is not annals of statistics", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string !=) en.venue.annals_of_statistics))", "qid": "publications_test_44", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article that does not reference multivariate data analysis", "source": "article that not cites multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string !=) en.article.multivariate_data_analysis))", "qid": "publications_train_580", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which articles author is efron", "source": "article whose author is efron", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron))", "qid": "publications_train_195", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find an efron article", "source": "article whose author is efron", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron))", "qid": "publications_train_394", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles by efron", "source": "article whose author is efron", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron))", "qid": "publications_test_35", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles that do not cite multivariate data analysis", "source": "article that not cites multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string !=) en.article.multivariate_data_analysis))", "qid": "publications_test_4", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles not published in the annals of statistics", "source": "article whose venue is not annals of statistics", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string !=) en.venue.annals_of_statistics))", "qid": "publications_train_185", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "list articles on annals of statistics or computational linguistics", "source": "annals of statistics or computational linguistics", "target": "(call listValue (call concat en.venue.annals_of_statistics en.venue.computational_linguistics))", "qid": "publications_test_131", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "either annals of statistics or computational linguistics", "source": "annals of statistics or computational linguistics", "target": "(call listValue (call concat en.venue.annals_of_statistics en.venue.computational_linguistics))", "qid": "publications_train_483", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "articles published in 2004 that won awards", "source": "article whose publication date is 2004 and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string won_award)))", "qid": "publications_train_90", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what article has a publication date of 2003 and won an award", "source": "article whose publication date is 2004 and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string won_award)))", "qid": "publications_train_439", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "award winning articles published in 2004", "source": "article whose publication date is 2004 and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string won_award)))", "qid": "publications_train_407", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "article with publication date as 2004 and has the venue as annals of statistics", "source": "article whose publication date is 2004 and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_train_428", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what article about annals and statistics has a publication ate of 2004", "source": "article whose publication date is 2004 and whose venue is annals of statistics", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string venue) (string =) en.venue.annals_of_statistics))", "qid": "publications_train_106", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article published in 2004 and that cites multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_130", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what article from 2004 cites multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_2", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name an article published in 2004 about multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_424", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles written by efron published in 2004", "source": "article whose publication date is 2004 and whose author is efron", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string author) (string =) en.person.efron))", "qid": "publications_train_526", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "article published in 2004 and that cites multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_264", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what articles publication date is in 2004 and cites multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_test_123", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which article  that cites multivariate data analysis was published on 2004 ", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_575", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what 2004 article cites multivariate data analysis", "source": "article whose publication date is 2004 and that cites multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1)) (string cites) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_576", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles with three or more authors", "source": "article that has more than two author", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string author) (string >) (number 2)))", "qid": "publications_train_495", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "articles written by fewer than two people", "source": "article that has less than two author", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string author) (string <) (number 2)))", "qid": "publications_train_206", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "article that has less than two venue", "source": "article that has less than two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string <) (number 2)))", "qid": "publications_train_281", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which article was published  in more than two magazines", "source": "article that has more than two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "qid": "publications_train_119", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name an article found in two publications", "source": "article that has two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) (number 2)))", "qid": "publications_train_551", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what article was in two venues", "source": "article that has two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) (number 2)))", "qid": "publications_test_151", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name an article found in more than two venues", "source": "article that has more than two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string >) (number 2)))", "qid": "publications_train_621", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "article with two venues", "source": "article that has two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) (number 2)))", "qid": "publications_train_395", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name an article with more than two authors", "source": "article that has more than two author", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string author) (string >) (number 2)))", "qid": "publications_train_254", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "there are at least two venues in the article", "source": "article that has at least two venue", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string venue) (string >=) (number 2)))", "qid": "publications_train_503", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what article makes the fewest citations", "source": "article that the least number of article cites", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string min) (call reverse (string cites)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_392", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "venue in most of the articles", "source": "venue that is venue of the most number of article", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.venue) (string !type)) (string max) (call reverse (string venue)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_611", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what article was cited the most", "source": "article that the most number of article cites", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string max) (call reverse (string cites)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_536", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which article is cited by the most number of articles", "source": "article that the most number of article cites", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string max) (call reverse (string cites)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_181", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "journal that publishes the fewest number of articles", "source": "venue that is venue of the least number of article", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.venue) (string !type)) (string min) (call reverse (string venue)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_549", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what venue has the most articles", "source": "venue that is venue of the most number of article", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.venue) (string !type)) (string max) (call reverse (string venue)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_477", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who wrote the most articles", "source": "person that is author of the most number of article", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (call reverse (string author)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_111", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what article has the most number of articles cited", "source": "article that the most number of article cites", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.article) (string !type)) (string max) (call reverse (string cites)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_test_0", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "authors of multiple articles", "source": "person that is author of the least number of article", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (call reverse (string author)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_52", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "publication with the fewest articles", "source": "venue that is venue of the least number of article", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.venue) (string !type)) (string min) (call reverse (string venue)) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_37", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what article cited by multivariate data analysis won an award", "source": "article that won an award and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_test_57", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what award winning article is cited by multivariate data analysis", "source": "article that won an award and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_213", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles that won awards cited by multivariate data analysis", "source": "article that won an award and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_276", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "award winning article cited by multivariate data analysis", "source": "article that won an award and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_325", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "award winning articles cited by multivariate data analysis", "source": "article that won an award and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_94", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "awardwinning articles cited in articles using multivariate data analysis", "source": "article that won an award and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_419", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles citing articles published in 2004", "source": "article that cites article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_452", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "article that cite articles published in 2004", "source": "article that cites article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_303", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find an article making a citation of a 2004 published article", "source": "article that cites article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_572", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what article cites another article with a publication date of 2004", "source": "article that cites article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_test_16", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "articles that cite articles published in 2004", "source": "article that cites article whose publication date is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string publication_date) (string =) (date 2004 -1 -1))))", "qid": "publications_train_64", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what article cites other articles about annals of statistics", "source": "article that cites article whose venue is annals of statistics", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "qid": "publications_train_50", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what article cites an article from annals of statistics", "source": "article that cites article whose venue is annals of statistics", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "qid": "publications_train_450", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what article cites articles about multivariate data analysis", "source": "article that cites article that cites multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_test_49", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "any article that cites another article published in annals of statistics", "source": "article that cites article whose venue is annals of statistics", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "qid": "publications_train_81", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "article with the venue as annals of statistics", "source": "article that cites article whose venue is annals of statistics", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string venue) (string =) en.venue.annals_of_statistics)))", "qid": "publications_train_405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "article that cites article whose author is efron", "source": "article that cites article whose author is efron", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "qid": "publications_test_126", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "articles that cite multivariate data analysis", "source": "article that cites article that cites multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_test_160", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "article citing an article citing multivariate data analysis", "source": "article that cites article that cites multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_test_8", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what article cites articles written by efron", "source": "article that cites article whose author is efron", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string author) (string =) en.person.efron)))", "qid": "publications_train_313", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "author of article citing multivariate data analysis", "source": "article that cites article that cites multivariate data analysis", "target": "(call listValue (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (call filter (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) en.article.multivariate_data_analysis)))", "qid": "publications_train_462", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "article that was awarded", "source": "article that won an award and that won an award", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string won_award)))", "qid": "publications_train_478", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "name a person who is the author of an article about multivariate data analysis", "source": "person that is author of multivariate data analysis and that is author of multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) en.article.multivariate_data_analysis) (call reverse (string author)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_562", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is the author of a multivariate data analysis", "source": "person that is author of multivariate data analysis and that is author of multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) en.article.multivariate_data_analysis) (call reverse (string author)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_36", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles cited by studies using multivariate data analysis", "source": "article that multivariate data analysis cites and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_249", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name an article citing multivariate data analysis", "source": "article that multivariate data analysis cites and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_89", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "an article that multivariate data analysis cites", "source": "article that multivariate data analysis cites and that multivariate data analysis cites", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis) (call reverse (string cites)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_624", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name someone who has written an article about multivariate data analysis", "source": "person that is author of multivariate data analysis and that is author of multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) en.article.multivariate_data_analysis) (call reverse (string author)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_77", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what publications contain multivariate data analysis", "source": "venue that is venue of multivariate data analysis and that is venue of multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.venue) (string !type)) (call reverse (string venue)) (string =) en.article.multivariate_data_analysis) (call reverse (string venue)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_test_103", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is and author of multivariate data analysis", "source": "person that is author of multivariate data analysis and that is author of multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) en.article.multivariate_data_analysis) (call reverse (string author)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_train_633", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "writer of multivariate data analysis", "source": "person that is author of multivariate data analysis and that is author of multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) en.article.multivariate_data_analysis) (call reverse (string author)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_test_47", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "writer of multivariate data analysis", "source": "person that is author of multivariate data analysis and that is author of multivariate data analysis", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string author)) (string =) en.article.multivariate_data_analysis) (call reverse (string author)) (string =) en.article.multivariate_data_analysis))", "qid": "publications_test_91", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "articles published in 2004 that have won an award", "source": "article that won an award and whose publication date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string publication_date) (string =) (date 2004 -1 -1)))", "qid": "publications_train_108", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what article won an award and has a publication date of 2004", "source": "article that won an award and whose publication date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string publication_date) (string =) (date 2004 -1 -1)))", "qid": "publications_train_468", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "articles publised in 2004 that won an award", "source": "article that won an award and whose publication date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.article) (string !type)) (string won_award)) (string publication_date) (string =) (date 2004 -1 -1)))", "qid": "publications_train_630", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what article sites only one other article", "source": "article that cites less than two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string <) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_324", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what article cites two other articles", "source": "article that cites two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_31", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "articles that cities maximum two articles", "source": "article that cites at most two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string <=) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_352", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "article citing more than two articles", "source": "article that cites more than two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string >) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_190", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which articles cite two articles", "source": "article that cites two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_test_135", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "articles citing two articles", "source": "article that cites two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_571", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find an article that makes two or fewer citations", "source": "article that cites at most two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string <=) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_289", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "article that cites two or more articles", "source": "article that cites at least two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string >=) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_112", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "article that refernces a single article", "source": "article that cites at least two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string >=) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_606", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what article has two citations", "source": "article that cites two article", "target": "(call listValue (call countComparative (call getProperty (call singleton en.article) (string !type)) (string cites) (string =) (number 2) (call getProperty (call singleton en.article) (string !type))))", "qid": "publications_train_203", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
