{"paraphrased": "who is not 180cm tall", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_1939", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what person is 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_701", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name someone who is 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_648", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a 180 cm tall person", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1072", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what person doesnt have the height of 180 cm", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_2435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people that are not 180 cm tall", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_2876", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a person who is not 180cm tall", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_test_682", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who are shorter than 180 cm", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_test_545", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_198", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_2775", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "find me a person born in either 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_357", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "person who was born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "persons born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_test_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "what person is 180 cm tall and is currently online", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_799", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what online person is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_test_559", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "who is online that is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1530", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find people who are 180 cm tall and logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1899", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "who has a height of 180 and is logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_test_40", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find me all people who are 180 cm tall and currently online", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_2019", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "people who is taller then 180 cm logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1719", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "who is online and is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1258", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what people are logged in with a height of 180 cm", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1721", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what genders are alices friends", "source": "gender that is gender of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2499", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people who have a birthplace of new york and their friends", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2100", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the gender of a person who is single", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_853", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find all males who have friends", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1088", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find all single people", "source": "relationship status that is relationship status of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3446", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what city was the male born", "source": "city that is birthplace of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_733", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find friends of people born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "whats the relationship status of people who are male", "source": "relationship status that is relationship status of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which of my friends have a single status", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_96", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "whose relationship status is single", "source": "relationship status that is relationship status of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_714", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who are alices friends from her hometown", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_808", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people that have friends that alice is friends with", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the relationship status of friend of alice", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1621", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people of the same gender as alices friends", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3198", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "relationship status of people that are friends with alice", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_818", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people who have the same relationship status of someone alice is friends with", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1452", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people those who are friends of friends of alice", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2792", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which people are friends with alices friends", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_160", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what people are friens with alice", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "birth city of alices friend", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_170", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find friends of alice that are single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2356", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find alices friends", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_684", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are friends with alice and male", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2000", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a man who is friends with alice", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_447", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name the friend of alice whose birthplace is new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1260", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which of alices friend is single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2708", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all single people that are friends with alice", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_422", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friends who born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_692", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people from new york that are friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_730", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people who have alices as a mutual friend", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2176", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that are friends with someone that did not stop working in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1787", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are friends with someone that finished school in any year but 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_887", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of students who joined in years except 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person is friends with a student whose end date is not 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_307", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with employees who started working before or after 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3398", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of employees who dont finish in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1368", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees friends with last day other than 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1060", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with student that didnt end in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_231", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who are friends with empoyees whose last day was not in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who have friends who did not begin working in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1953", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born in 2004 who is friends with alice", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3150", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "friends of alice born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1262", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which of alices friends were born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1585", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "who is born is 2004 and is a male", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_260", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "who was born in new york in 2004", "source": "person whose birthplace is new york and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_433", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find all people who born in new york in 2004", "source": "person whose birthplace is new york and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2847", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "all males who were born in 2004", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1357", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "who is single and born in 2004", "source": "person whose relationship status is single and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2423", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "alices friends born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1201", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what males were born in 2004", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3308", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find students with end date in 2004 or 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_766", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended between 2004 and 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2181", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is either 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_879", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who started before 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1837", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who started in 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1711", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees quit after 2004 or after 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2312", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have an end date that is later than either 2004 or 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_104", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find an employee who left after 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_813", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees finishing before 2004", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1744", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whos last day was between 2004 and 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1017", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what logged in person was born in new york", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_test_468", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find all people that are single and online", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_test_838", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find people who are logged in and has the birth place as newyork", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_1731", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me all the online singles", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2475", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "males that are currently online", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_test_502", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "any male who is logged in", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_train_371", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "friends of alice that are currently online", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_2871", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "any friend of alice that is logged in", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1796", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people that are currently online that are single", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2624", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people born in new york and currently online", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_525", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "where were the people that stopped school in or after 2004 born", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_493", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me friends of people who joined their jobs before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1528", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of students whose last day is 2004 or later", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1679", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people that stopped working in or before 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3257", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of employees whose last day was no later than 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1884", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of employee whose end date is before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_984", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of students who finish contemporaneous to or before 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2402", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of employees who started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of employees starting in or before 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2293", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth place  of students whose start date is smaller than 2004 and 2010", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "someone with multiple relationship statuses", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_1160", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who has two relationship status", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_test_368", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people with three genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2818", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people that have two or less birthplaces", "source": "person that has at most two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_train_417", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who was born in over two places", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_3368", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people who have more than two genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2554", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what people have two relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_956", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name a person in more than two relationships", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_2911", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who has two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_1498", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who was born in two or more places", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_test_379", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which of alices friends is online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1081", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is online and is friends with", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2912", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friends who are currently online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2890", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are friends with alice and currently online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_17", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a friend of alice who is online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1489", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "frinds of alice currently logged in", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_481", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which of alices friends are online right now", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3176", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people are logged in who are also friends with alice", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3435", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are logged in who are alices friends", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_392", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friends who are logged in", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_580", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a worker who began in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3305", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who started working on 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_63", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who quit job in 2004 and 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_686", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me students whose start date is either 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_334", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with last days of either 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_191", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a list of students whose start date was in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1442", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who finish in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3283", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended in 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_857", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who began school in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1114", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the names of all students who graduated between 2004 and 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_239", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person is online", "source": "person that is logged in and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "qid": "socialnetwork_train_1992", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find all people that are currently online", "source": "person that is logged in and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "qid": "socialnetwork_train_1915", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "place where alice was born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2675", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is alices gender", "source": "gender of alice", "target": "(call listValue (call getProperty en.person.alice (string gender)))", "qid": "socialnetwork_train_547", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "alices birthplace", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2365", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is height of alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_3363", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is alices date of birth", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_3361", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is alices birthdate", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_2567", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the status of alices relationship", "source": "relationship status of alice", "target": "(call listValue (call getProperty en.person.alice (string relationship_status)))", "qid": "socialnetwork_train_2936", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the birth date of alice", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_test_50", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how tall is alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_2526", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "how tall is alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_test_125", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "who is friends with alice and is 180 cm tall", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1059", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who was born in new york and is 180 cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_358", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which people are friends with alice and is 180 cm tall", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_130", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all people who are friends with alice and are 180 cm tall", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_837", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which guys are also 180 cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_912", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "alices friends with a height of 180 cm", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_467", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people who were born in new york who are 180 cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3230", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people who are male and 180 cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1672", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what people are friends with alice and have a height of 180 cm", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_622", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what people have a birthplace of new york and a height of 180 cm", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2348", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find alices friends born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_98", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is friends with alice and was born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3450", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people who are friends of alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1475", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friends who were born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_682", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is a friend exclusively to alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2754", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "males that alice is friends with", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_42", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a person who is friends with alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_640", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is alice friends with that also have relationship statuses of single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_388", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what friend of alice was born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1119", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all alices friends that were born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3130", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all of alices friends that are currently online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_3059", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find all of alices friends that are currently online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_3231", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find alices friend who is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_235", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which friend of alice is online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_2353", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "who is alice friends with that is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1817", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find people who are logged in who are also friends with alice", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1724", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "a friend of alice that is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_375", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what online person is alice friends with", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_473", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "who is online and friends with alice", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1457", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "online male member", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_71", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2389", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "persons presently logged in who were born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_455", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are currently online and born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_69", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "males who are online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_908", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people that are single and currently online", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2561", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all males that are currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_915", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what online person is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_423", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which of alices friends are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_126", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which people are alice not friends with", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2781", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "anyone who is alices friend", "source": "person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what relationship statuses are not claimed by alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2285", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are not alices friends", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1743", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where was alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1985", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_test_656", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who has different relationship status to alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1841", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_2386", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what gender is not claimed by alice", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_335", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a friend of alice", "source": "person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "180 cm tall person who is logged in", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_823", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "current users who are 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people logged in who are 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2956", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people who are logged in with a height of 180 cm", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1495", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name the person with a height of 180 cm who is logged in", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1929", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name a person who is online who is 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1043", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who are 180 cm tall and are currently online", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3164", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what university did alice stop attending in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_test_814", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what is the job title of alice who started in 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3487", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "alice quit her job in 2004 when did she start it", "source": "start date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_test_226", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "when did alice start the job that she quit in 2004", "source": "start date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_2196", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what is the alices 2004 end date", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_313", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what date in 2004 is alices last day of work", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3214", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "which is the university of studen alice who finished in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_981", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "when did alice who started working in 2004 finish working", "source": "end date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_test_462", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what is alices job title from company she left in 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_1468", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "who did alice quit working for in 2004", "source": "employer of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2295", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "find friends of alice that are 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2762", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a friend of alice who is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_831", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "alices friend who is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2077", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find alices friends who are 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1729", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is alice friends with who is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2038", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "friends of alice who are 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_38", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is friends with alice and is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2060", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what person is 180 cm tall and is alices friend", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2328", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which city a person is born in whose year of birth is 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2839", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what genders are the people born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find the birthplaces of people born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_849", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find the relationship status of people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1797", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what is the gender of the person whose birthdate is in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3381", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find friends of people who were born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_66", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what relationship statuses are claimed by people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find the gender of people born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "friends of all the people born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "name a persons friend who was born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_886", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what person is the tallest", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1235", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "shortest person", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1886", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find me the oldest person", "source": "person that has the smallest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_3053", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the tallest person", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_2897", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the shortest person", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_2411", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "who is the shortest person in my network", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_test_114", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "who is the oldest person in my network", "source": "person that has the smallest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_2347", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find the tallest person", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_903", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "who is the shortest person", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_test_724", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "who was born most recently", "source": "person that has the largest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_2467", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
