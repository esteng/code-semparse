{"paraphrased": "line must begin and end with the characters abc", "source": "line that starts with `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2499", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with character and that ends with the word  abc ", "source": "line that ends with character and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_615", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with a capital letter that finishes with thw word abc", "source": "line that starts with capital letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1148", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with the word abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_378", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what lines start with a vowel and end with the word abc", "source": "line that starts with vowel and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_6222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which line starts with 123 and ends with abc", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1909", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with a letter and ends with word abc", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2291", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with letter and that ends with the word  abc ", "source": "line that starts with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_354", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that starts with the number 123 but ends with the word abc", "source": "line that starts with `` 123 '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5048", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with both a letter and the word abc", "source": "line that ends with letter and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_5116", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line begins with   abc  and ends with a vowel", "source": "line that starts with the word `` abc '' and that ends with vowel", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou])) (string \"))\"))", "qid": "regex_train_3768", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with the shorter word abc ending on a letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_956", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with  123 ", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4499", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc in the beginning and a character at the end", "source": "line that starts with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_2566", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that starts with character", "source": "line that starts with the word `` abc '' and that starts with character", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .) (string .*)) (string \"))\"))", "qid": "regex_train_4161", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and terminates with a letter", "source": "line that starts with the word `` abc '' and that ends with letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z])) (string \"))\"))", "qid": "regex_train_5481", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line begins wabc word and concludes wsmall letter", "source": "line that starts with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_149", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that ends with  abc ", "source": "line that starts with the word `` abc '' and that ends with `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string abc)) (string \"))\"))", "qid": "regex_train_221", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begins and stops with 123", "source": "line that starts with the word `` abc '' and that ends with `` 123 ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string 123)) (string \"))\"))", "qid": "regex_train_4621", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the word abc and finishes with a capital letter", "source": "line that starts with the word `` abc '' and that ends with capital letter", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z])) (string \"))\"))", "qid": "regex_train_894", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "mention the line that ends with wordabc followed by number 123", "source": "line that ends with the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_2732", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with the word  abc  after the number  123 ", "source": "line that ends with the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_972", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after the word abc and also the number 123", "source": "line that ends with the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3167", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with abc", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1238", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after the word abc that is before 123", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_254", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "what  line that ends with the word  abc  before the number  123 ", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1387", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line ending with the number 123 followed by the word abc", "source": "line that ends with the word `` abc '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4465", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with the word  abc  before the number  123 ", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1317", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that finsih with a smaller word abc and the number sequence 123", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_1631", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line stops wabc word then 123 number", "source": "line that ends with the word `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5528", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "number with abc or a digit in it", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1342", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using abc or a digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1076", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what number contains the word   abc  or a digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6361", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number hat has the word abc or a digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_810", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains the word  abc  or digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_812", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that includes the word abc or any digit", "source": "number that contains the word `` abc '' or digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (string [0-9]) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5231", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (ANON_STRING) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what line that contains lowercase letter and that starts with the word  abc ", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3892", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  123  and that starts with the word  abc ", "source": "line that contains `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2173", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that begins with the word abc and where 123 appears", "source": "line that contains `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3733", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that uses lowercase letters and begins with abc", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4851", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains  abc  and that starts with the word  abc ", "source": "line that contains `` abc '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2321", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that includes a lowercase letter and begins with the word abc", "source": "line that contains lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4002", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with abc has a capital letter in it", "source": "line that contains capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with the word abc and containing a vowel", "source": "line that contains vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4506", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains character and that starts with the word  abc ", "source": "line that contains character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1167", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line starting with abc that utilizes a letter", "source": "line that contains letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5448", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "numbers that does not stop with abc", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1996", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with the word  abc ", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3162", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with the word  abc ", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5992", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number where the word abc does not appear", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_1412", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that does not stop after abc", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3138", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number ending without abc", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1488", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not ends with the word  abc ", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2401", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not ends with the word  abc ", "source": "number that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5641", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not end with abc", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1548", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not end with the word abc", "source": "word that not ends with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4181", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word using a digit followed by abc", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1517", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a letter followed by the number 123", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1048", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "a digit followed by the word abc", "source": "the word `` abc '' after digit", "target": "(call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_1145", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "the number 123 preceded by abc", "source": "`` abc '' before the number `` 123 ''", "target": "(call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_1105", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "123 preceded by a capital letter", "source": "capital letter before the number `` 123 ''", "target": "(call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_2274", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "lowercase letter before the number  123 ", "source": "lowercase letter before the number `` 123 ''", "target": "(call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_1881", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": " abc  before the number  123 ", "source": "`` abc '' before the number `` 123 ''", "target": "(call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_848", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "123 with a letter before it", "source": "letter before the number `` 123 ''", "target": "(call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_337", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "vowel before the number  123 ", "source": "vowel before the number `` 123 ''", "target": "(call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_train_3343", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "character preceding 123", "source": "character before the number `` 123 ''", "target": "(call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\"))))", "qid": "regex_test_650", "anonymized_target": "(call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))))"}
{"paraphrased": "line with abc then some digit following that", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_187", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter after the number  123 ", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_1229", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that begins with a capital after 123", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_5337", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line goes 123 then some capital letter", "source": "line that starts with capital letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))) (string .*))", "qid": "regex_train_3292", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that begins with 123 after the number 123", "source": "line that starts with `` 123 '' after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))) (string .*))", "qid": "regex_train_4284", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with the word  abc  before digit", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_1915", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "lines that begins with abc before digits", "source": "line that starts with the word `` abc '' before digit", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))) (string .*))", "qid": "regex_train_4866", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "a line that satrts with the number 123 then contains a letter", "source": "line that starts with letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))) (string .*))", "qid": "regex_test_533", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line beginning with a vowel after 123", "source": "line that starts with vowel after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))) (string .*))", "qid": "regex_train_2683", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "line that starts with lowercase letter after the number  123 ", "source": "line that starts with lowercase letter after the number `` 123 ''", "target": "(call + (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))) (string .*))", "qid": "regex_train_4662", "anonymized_target": "(call + (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING))"}
{"paraphrased": "what line ends with a letter appearing after   123 ", "source": "line that ends with letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_4340", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "the ending of the line needs to be 123123", "source": "line that ends with `` 123 '' after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123))))", "qid": "regex_train_5050", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line ending with 123 followed by a lowercase letter", "source": "line that ends with lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_663", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with letter after the number  123 ", "source": "line that ends with letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z]))))", "qid": "regex_train_1913", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with the word abc prior to a digit", "source": "line that ends with the word `` abc '' before digit", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [0-9]))))", "qid": "regex_test_1197", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that ends with lowercase letter after the number  123 ", "source": "line that ends with lowercase letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z]))))", "qid": "regex_train_4770", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that has 123 and a vowel at the end", "source": "line that ends with vowel after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou]))))", "qid": "regex_train_2025", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "lines that end with 123 followed by a capital letter", "source": "line that ends with capital letter after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z]))))", "qid": "regex_train_6067", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line ending with the sequence 123 followed by a character", "source": "line that ends with character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))))", "qid": "regex_train_4476", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "line that finishes with a character after 123", "source": "line that ends with character after the number `` 123 ''", "target": "(call + (string .*) (call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .))))", "qid": "regex_train_1911", "anonymized_target": "(call + (ANON_STRING) (call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING))))"}
{"paraphrased": "a line that starts with the word  abc  after the number 123 ", "source": "line that starts with the word `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_1021", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line that begins with abc or the number 123", "source": "line that starts with the word `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_489", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with the word abc or the number 123", "source": "line that starts with the word `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_297", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line starting with abc or 123", "source": "line that starts with the word `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_27", "anonymized_target": "(call + (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "word that contains character and that contains  abc ", "source": "word that contains character and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2225", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that includes abc and a vowel", "source": "word that contains vowel and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2167", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that contains letter and that contains  abc ", "source": "word that contains letter and that contains `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \")&(\") (call + (string .*) (string abc) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2095", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that contains the word abc and uses vowels", "source": "word that contains `` abc '' and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string abc) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4406", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains letter and vowels", "source": "word that contains vowel and that contains letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Za-z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1877", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that contains  123 ", "source": "number that contains character and that contains `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string 123) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_16", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that have a capital letter and have a vowel", "source": "word that contains capital letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2014", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character and that contains character", "source": "number that contains character and that contains character", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"((\") (call + (string .*) (string .) (string .*)) (string \")&(\") (call + (string .*) (string .) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3510", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that uses lowercase letters and vowels", "source": "word that contains lowercase letter and that contains vowel", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (string [AEIOUaeiou]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_980", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what word contains capital letters", "source": "word that contains capital letter and that contains capital letter", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"((\") (call + (string .*) (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (string [A-Z]) (string .*)) (string \"))\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2237", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING) (ANON_STRING)) (ANON_STRING))\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what line begins with and contains the word abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3271", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins with the expression abc and that has the saying abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3496", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that both starts with abc and contains abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1269", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line beginning with and containing the word abc", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_330", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with the word  abc  and that contains the word  abc ", "source": "line that starts with the word `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3990", "anonymized_target": "(call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that does not end with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_test_1436", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "line that does not finish with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_test_583", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not end with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_test_560", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "a line that does not terminate with the word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_train_981", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "lines that do not end in the smaller word abc", "source": "line that not ends with the word `` abc ''", "target": "(call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")\"))", "qid": "regex_train_5519", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)\"))"}
{"paraphrased": "line begins with 123 and has abc", "source": "line that starts with `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5130", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with and contains abc", "source": "line that starts with `` abc '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string abc) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_673", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that end with letters and have abc in them", "source": "line that ends with letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5899", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that has abc and starting with a vowel", "source": "line that starts with vowel and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string [AEIOUaeiou]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2194", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins wirh 123 and has abc", "source": "line that starts with `` 123 '' and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string 123) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_test_569", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that have abc and end with other characters", "source": "line that ends with character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string .)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_1511", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that contains the word  abc ", "source": "line that ends with capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4066", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a capital letter but also contains abc", "source": "line that starts with capital letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string [A-Z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3478", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that starts lowercase and has the series abc written somewhere in it", "source": "line that starts with lowercase letter and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string [a-z]) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_6150", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that begins with any character", "source": "line that starts with character and that contains the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3980", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "word without abc in it", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3802", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not use abc", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4373", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that doesnt have the letters abc in it", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_770", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a number that does not include the word abc", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2038", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains the word  abc ", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4630", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that exclude the series abc", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_590", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that do not contain the smaller word abc", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1206", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number not using abc", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_475", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not contains the word  abc ", "source": "number that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4067", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not contains the word  abc ", "source": "word that not contains the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_415", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines that stop with abc and stops with lowercase letters", "source": "line that ends with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_2438", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "list lines that starts with a capital letter and ends with  abc ", "source": "line that ends with the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5721", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that starts with capital letter", "source": "line that ends with the word `` abc '' and that starts with capital letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Z]) (string .*)) (string \"))\"))", "qid": "regex_train_5929", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with lowercase letter", "source": "line that ends with the word `` abc '' and that ends with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string [a-z])) (string \"))\"))", "qid": "regex_train_1604", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "a line that terminates with the word abc and also a character", "source": "line that ends with the word `` abc '' and that ends with character", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (string .)) (string \"))\"))", "qid": "regex_train_711", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that finish with a smaller word abc and begin with the number sequence 123", "source": "line that ends with the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_3403", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and ends with  abc ", "source": "line that ends with the word `` abc '' and that starts with `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string abc) (string .*)) (string \"))\"))", "qid": "regex_train_5705", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that begins and ends with abc 123 respectively", "source": "line that ends with the word `` abc '' and that starts with `` 123 ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string 123) (string .*)) (string \"))\"))", "qid": "regex_train_1172", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines where the word ends in abc and also begins with a lowercase letter", "source": "line that ends with the word `` abc '' and that starts with lowercase letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [a-z]) (string .*)) (string \"))\"))", "qid": "regex_test_1486", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that ends with the abc but starts with a letter", "source": "line that ends with the word `` abc '' and that starts with letter", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string [A-Za-z]) (string .*)) (string \"))\"))", "qid": "regex_test_697", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "word that not starts with the word  abc ", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_660", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "what words do not begin with   abc ", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_134", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that does not begin with abc", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1304", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a digit that does not start with abc", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_6156", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word not beginning with abc", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4134", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that does not starts with abc", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5086", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that not starts with the word  abc ", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3602", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that not starts with the word  abc ", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1540", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "a word that does not begin with the word abc", "source": "word that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1235", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that do not start with the word abc", "source": "number that not starts with the word `` abc ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string \"~(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")\")) (string \"))\\\\\\\\b\"))", "qid": "regex_test_525", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)\")) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "line that begins with a letter or the number 123", "source": "line that starts with letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3007", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "what lines begin with a capital letter or  123 ", "source": "line that starts with capital letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_2787", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begin with teh smaller word abc or the number sequence 123", "source": "line that starts with `` abc '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string abc) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_115", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with 123123", "source": "line that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_test_889", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that begins with a vowel or the number 123", "source": "line that starts with vowel or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3538", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "a line beginning with a letter or the number 123", "source": "line that starts with letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_1628", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with capital letter or the number  123 ", "source": "line that starts with capital letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5390", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line that starts with character or the number  123 ", "source": "line that starts with character or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_5215", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "line can start off with any capital letter or the numerals 123", "source": "line that starts with capital letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_3363", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "lines that begins with a capital letter or 123", "source": "line that starts with capital letter or the number `` 123 ''", "target": "(call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*))", "qid": "regex_train_518", "anonymized_target": "(call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING))"}
{"paraphrased": "word beginning with lowercase letter or number 123", "source": "word that starts with lowercase letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1813", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "words that begins with a capital letter or 123", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1693", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  or the number  123 ", "source": "number that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_507", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word begins with character or the 123 numerals", "source": "word that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_156", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with character or the number  123 ", "source": "number that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2759", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "word that starts with capital letter or the number  123 ", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5334", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that starts with 123 or is 123", "source": "number that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4334", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "find a word that begins with either a capitalized letter or the numeral 123", "source": "word that starts with capital letter or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (call + (call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4956", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with  123  or the number  123 ", "source": "number that starts with `` 123 '' or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_4255", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that starts with a character or  123 ", "source": "number that starts with character or the number `` 123 ''", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\")) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_239", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\")) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that have 123 before a digit", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_701", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "the number must use the characters 123 after a digit", "source": "number that contains `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_129", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  before digit", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_577", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "whats a number that has a character before a digit", "source": "number that contains character before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string .) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1264", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "numbers that uses 123 before digits", "source": "number that contains `` 123 '' before digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string 123) (call .concat (string .*) (string [0-9]))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_5942", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number with digits followed by characters", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_test_450", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character after digit", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_3861", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains character after digit", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_1793", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number using digits", "source": "number that contains character after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string .))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_39", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "number that contains  123  after digit", "source": "number that contains `` 123 '' after digit", "target": "(call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (string 123))) (string .*)) (string \"))\\\\\\\\b\"))", "qid": "regex_train_2466", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (ANON_STRING))) (ANON_STRING)) (ANON_STRING))\\\\\\\\b\"))"}
{"paraphrased": "lines ending 123 after any capital letter", "source": "line that ends with capital letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_969", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that stops after the word abc if it is before any digits", "source": "line that ends with the word `` abc '' after digit", "target": "(call + (string .*) (call .concat (string [0-9]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5444", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line with a vowel at the end before the number 123", "source": "line that ends with vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_31", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with lowercase letter before the number  123 ", "source": "line that ends with lowercase letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [a-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3323", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line ending with the sequence 123 with a vowel appearing right before it", "source": "line that ends with vowel before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [AEIOUaeiou]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_3767", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with  123  before the number  123 ", "source": "line that ends with `` 123 '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string 123) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_766", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line ending with a letter preceding the number 123", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_test_1111", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "line that ends with letter before the number  123 ", "source": "line that ends with letter before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string [A-Za-z]) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_5681", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "lines that initiate with a character directly before the number sequence 123", "source": "line that ends with character before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string .) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4656", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line that ends with  abc  before  123 ", "source": "line that ends with `` abc '' before the number `` 123 ''", "target": "(call + (string .*) (call .concat (string abc) (call .concat (string .*) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")))))", "qid": "regex_train_4088", "anonymized_target": "(call + (ANON_STRING) (call .concat (ANON_STRING) (call .concat (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")))))"}
{"paraphrased": "a line that has a letter at the end and that begins with the word abc", "source": "line that ends with letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Za-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2603", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with vowel and that starts with the word  abc ", "source": "line that ends with vowel and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [AEIOUaeiou])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_3677", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that start with abc and end with capital letters", "source": "line that ends with capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4380", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with the word  abc ", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_2654", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with 123 and abc", "source": "line that ends with `` 123 '' and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string 123)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_5353", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops with a lowercase letter and begins with the word abc", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4553", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with lowercase letter and that starts with the word  abc ", "source": "line that ends with lowercase letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [a-z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_980", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "lines that begin with a character and abc", "source": "line that starts with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_222", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with capital letter and that starts with the word  abc ", "source": "line that ends with capital letter and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (string [A-Z])) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_983", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line that starts with character and that starts with the word  abc ", "source": "line that starts with character and that starts with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .) (string .*)) (string \")&(\") (call + (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \"))\"))", "qid": "regex_train_4377", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING)) (ANON_STRING)&(\") (call + (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING))\"))"}
{"paraphrased": "line using either a vowel or 123", "source": "vowel or the number `` 123 ''", "target": "(call + (string \"(\") (string [AEIOUaeiou]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4006", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "a character or the number segment 123", "source": "character or the number `` 123 ''", "target": "(call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_3158", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "character or he digit123", "source": "character or the number `` 123 ''", "target": "(call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_test_1190", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "lowercase letter or the number  123 ", "source": "lowercase letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_test_333", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "letter or the number  123 ", "source": "letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4527", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either letters or 123", "source": "letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Za-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4964", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "capital letter or the number  123 ", "source": "capital letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [A-Z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_3793", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either 123 or 123", "source": "`` 123 '' or the number `` 123 ''", "target": "(call + (string \"(\") (string 123) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_1516", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "number 123 or a character", "source": "character or the number `` 123 ''", "target": "(call + (string \"(\") (string .) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_4418", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "either a lowercase letter or the number 123", "source": "lowercase letter or the number `` 123 ''", "target": "(call + (string \"(\") (string [a-z]) (string |) (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (string \")\"))", "qid": "regex_train_1974", "anonymized_target": "(call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)\"))"}
{"paraphrased": "lines that uses and ends with the word abc", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2687", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with the word  abc ", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2822", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that have the smaller word abc and finish with the word abc", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2377", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that contains the word  abc  and that ends with the word  abc ", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_1953", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "which line contains abc and and also ends with abc", "source": "line that contains the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\")) (string .*)) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_335", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (ANON_STRING)) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "word that contains a vowel after the number 123", "source": "vowel after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_3788", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": " 123  after the number  123 ", "source": "`` 123 '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123)))", "qid": "regex_train_1429", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what is a word where a character comes after the number 123", "source": "character after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string .)))", "qid": "regex_train_1586", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the digit 123 before an uppercase letter", "source": "capital letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_1408", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "capital letters after 123", "source": "capital letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Z])))", "qid": "regex_train_3160", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "lowercase letter that comes after 123", "source": "lowercase letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_5305", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "vowel after the number  123 ", "source": "vowel after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [AEIOUaeiou])))", "qid": "regex_train_3338", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "the digits 123 after the digit 123", "source": "`` 123 '' after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string 123)))", "qid": "regex_train_2289", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what lowercase letter follows 123", "source": "lowercase letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [a-z])))", "qid": "regex_train_2639", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a letter following the number 123", "source": "letter after the number `` 123 ''", "target": "(call .concat (call + (string \"\\\\\\\\b(\") (string \"[0-9]+&(\") (string 123) (string \"))\\\\\\\\b\")) (call .concat (string .*) (string [A-Za-z])))", "qid": "regex_train_4882", "anonymized_target": "(call .concat (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\")) (call .concat (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find the line that finishes with the lettered sequence abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_2017", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with the word  abc ", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_329", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that ends with the word  abc  and that ends with the word  abc ", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_3864", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that concludes with the word abc and that concludes with the word abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_test_1238", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "what line ends with the word abc and also ends with the word abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4019", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "line that has the word abc at the end", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4808", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
{"paraphrased": "lines that stops after the word abc", "source": "line that ends with the word `` abc '' and that ends with the word `` abc ''", "target": "(call + (string \"((\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \")&(\") (call + (string .*) (call + (string \"\\\\\\\\b(\") (string \"[a-zA-Z]+&(\") (string abc) (string \"))\\\\\\\\b\"))) (string \"))\"))", "qid": "regex_train_4254", "anonymized_target": "(call + (ANON_STRING) (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING)&(\") (call + (ANON_STRING) (call + (ANON_STRING) (ANON_STRING) (ANON_STRING) (ANON_STRING))\\\\\\\\b\"))) (ANON_STRING))\"))"}
