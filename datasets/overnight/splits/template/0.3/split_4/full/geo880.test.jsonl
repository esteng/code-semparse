{"paraphrased": "what state has the most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_2530", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which state has the most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_632", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the fewest capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_1142", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "state with most capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_test_719", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which state has the lowest number of capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_92", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the least number of capital", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_1920", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the greatest number of capitals", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_test_644", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the most capital", "source": "state that has the most number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (string capital_state_city)))", "qid": "geo880_train_2693", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has the least number of capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_2939", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "state with fewest capitals", "source": "state that has the least number of capital", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (string capital_state_city)))", "qid": "geo880_train_2321", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what state has borders and contains sacramento as capital", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1810", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what states include death valley and border california", "source": "state that death valley is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) fb:en.place.death_valley) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_test_423", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state contains mount whitney and has a capital of sacramento", "source": "state that mount whitney is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_854", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has a capital of sacramento and contains mount whitney", "source": "state that mount whitney is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) fb:en.mountain.whitney) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_1609", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city in california is the capital of california", "source": "city that is capital of california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_615", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital of ca", "source": "city that is capital of california and that is contained by california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) fb:en.state.california) (string loc_city_state) (string =) fb:en.state.california))", "qid": "geo880_train_2714", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is bordered by california and contains sacramento", "source": "state that sacramento is contained by and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) fb:en.city.sacramento_ca) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_2764", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state has sacramento as its capital and which has lake tahoe in it", "source": "state that lake tahoe is contained by and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_95", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state borders california and has sacramento as its capital", "source": "state that california borders and whose capital is sacramento", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california) (string capital_state_city) (string =) fb:en.city.sacramento_ca))", "qid": "geo880_train_365", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state borders california and is traversed by the colorado river", "source": "state that colorado river traverses and that borders california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) fb:en.river.colorado) (string next_to_state_state) (string =) fb:en.state.california))", "qid": "geo880_train_1227", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has at least 2 places", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_1763", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "states that two or more rivers flow through", "source": "state that two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_140", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two or more rivers passing through it", "source": "state that at least two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_272", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has less than two locations", "source": "state that less than two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string <) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_90", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state contains two cities", "source": "state that two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_test_236", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has fewer than two cities", "source": "state that less than two city is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string <) (number 2) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_914", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have no more than two bordering states", "source": "state that at most two state borders", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string <=) (number 2) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1349", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has a minimum of two cities", "source": "state that at least two place is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_2469", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have less than two mountains", "source": "state that less than two mountain is contained by", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string <) (number 2) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_1499", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has two rivers crossing it", "source": "state that at least two river traverses", "target": "(call listValue (call countComparative (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string >=) (number 2) (call getProperty (call singleton fb:en.river) (string !type))))", "qid": "geo880_train_2341", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what location has the same elevation as mount whitney", "source": "place whose elevation is elevation of mount whitney", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.mountain.whitney (string elevation_mountain_length))))", "qid": "geo880_train_1437", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has an equal area to that of lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_1874", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has an area equal to the area of lake tahoe", "source": "city whose area is area of lake tahoe", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.lake.tahoe (string area_lake_length^2))))", "qid": "geo880_train_2921", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has the same area as california", "source": "city whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string area_city_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_2786", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what lake is same size as california", "source": "lake whose area is area of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string area_lake_length^2) (string =) (call getProperty fb:en.state.california (string area_state_length^2))))", "qid": "geo880_train_1968", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what location has an elevation equal to the colorado river", "source": "place whose elevation is length of colorado river", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string elevation_place_length) (string =) (call getProperty fb:en.river.colorado (string len_river_length))))", "qid": "geo880_train_112", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what river has length that is the elevation of death valley", "source": "river whose length is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string len_river_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_831", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what city has a population equal to california", "source": "city whose population is population of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string population_city_count) (string =) (call getProperty fb:en.state.california (string population_state_count))))", "qid": "geo880_train_1988", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "name a city with the same population as ca", "source": "city whose density is density of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string density_city_count) (string =) (call getProperty fb:en.state.california (string density_state_count))))", "qid": "geo880_train_2408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what mountains have the same elevation as death valley", "source": "mountain whose elevation is elevation of death valley", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string elevation_mountain_length) (string =) (call getProperty fb:en.place.death_valley (string elevation_place_length))))", "qid": "geo880_train_250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty fb:ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "is this a major lake", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_test_460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is the name of a large lake", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_train_2409", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what cities are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_test_493", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what rivers are considered major", "source": "river that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string major_river)))", "qid": "geo880_train_751", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "cities that are capitals", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_test_504", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "where is a major city", "source": "city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)))", "qid": "geo880_test_382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "can i see a list of capital cities", "source": "city that is a capital", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)))", "qid": "geo880_train_701", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what are some major cities", "source": "city that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)))", "qid": "geo880_train_1226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what is a major lake", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_train_415", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which lake is major", "source": "lake that is major", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string major_lake)))", "qid": "geo880_train_354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1411", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1345", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital of california", "source": "city that is a capital and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1486", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_2628", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what is a major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_test_590", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what major city is the capital of california", "source": "city that is major and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string major_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_1420", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is the capital city of california", "source": "city that is a capital and that is capital of california", "target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string capital_city)) (call reverse (string capital_state_city)) (string =) fb:en.state.california))", "qid": "geo880_train_2919", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which state makes a border for california", "source": "state that state that borders california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2822", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what places are within california", "source": "state that place that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string =) (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) fb:en.state.california)))", "qid": "geo880_test_540", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state has the same mountains as california", "source": "state that mountain that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_mountain_state)) (string =) (call filter (call getProperty (call singleton fb:en.mountain) (string !type)) (string loc_mountain_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2139", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what cities are contained by california", "source": "state that city that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1844", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what city is a capital of a state next to california", "source": "city that is capital of state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_test_329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what city is the capital of a state whose capital city is sacramento", "source": "city that is capital of state whose capital is sacramento", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) fb:en.city.sacramento_ca)))", "qid": "geo880_train_2768", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the capital of california", "source": "state that city that is contained by california is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string =) (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1366", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what is the city capital of a state that borders california", "source": "city that is capital of state that borders california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1564", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state has the same rivers that crosses california", "source": "state that river that traverses california traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string =) (call filter (call getProperty (call singleton fb:en.river) (string !type)) (string traverse_river_state) (string =) fb:en.state.california)))", "qid": "geo880_train_1673", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what state is next to a california bordering state", "source": "state that state that borders california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) fb:en.state.california)))", "qid": "geo880_train_2514", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) fb:ANON_ENTITY)))"}
{"paraphrased": "what states does the colorado river not traverse", "source": "state that colorado river not traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string !=) fb:en.river.colorado))", "qid": "geo880_train_567", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is sacramento not in", "source": "state that sacramento not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_city_state)) (string !=) fb:en.city.sacramento_ca))", "qid": "geo880_train_263", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state has a border with california", "source": "state that california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california))", "qid": "geo880_train_2248", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state is lake tahoe", "source": "state that lake tahoe is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string =) fb:en.lake.tahoe))", "qid": "geo880_train_1607", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does california border", "source": "state that california borders", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string next_to_state_state)) (string =) fb:en.state.california))", "qid": "geo880_test_514", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "which states does the colorado not traverse", "source": "state that colorado river not traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string !=) fb:en.river.colorado))", "qid": "geo880_train_1860", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not have lake tahoe", "source": "state that lake tahoe not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_lake_state)) (string !=) fb:en.lake.tahoe))", "qid": "geo880_train_823", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does not contain death valley", "source": "state that death valley not is contained by", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string loc_place_state)) (string !=) fb:en.place.death_valley))", "qid": "geo880_train_1966", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what city is not the capital of california", "source": "city that is not capital of california", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (call reverse (string capital_state_city)) (string !=) fb:en.state.california))", "qid": "geo880_test_661", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "what state does the colorado river go through", "source": "state that colorado river not traverses", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (call reverse (string traverse_river_state)) (string !=) fb:en.river.colorado))", "qid": "geo880_train_992", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) fb:ANON_ENTITY))"}
{"paraphrased": "states governed in sacramento and austin", "source": "state whose capital is sacramento or austin", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_2640", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state has the capital of either sacramento or austin", "source": "state whose capital is sacramento or austin", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what city is contained by either california or texas", "source": "city that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2849", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what is a place in ca or tx", "source": "place that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_828", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what is a lake in california or texas", "source": "lake that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_944", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what states have a capital of sacramento or austin", "source": "state whose capital is sacramento or austin", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string capital_state_city) (string =) (call concat fb:en.city.sacramento_ca fb:en.city.austin_tx)))", "qid": "geo880_train_2776", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what lakes are in california and texas", "source": "lake that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.lake) (string !type)) (string loc_lake_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_test_653", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what are the cities of both california and texas", "source": "city that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.city) (string !type)) (string loc_city_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2690", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "which state borders either california or texas", "source": "state that borders california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.state) (string !type)) (string next_to_state_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_train_2163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "places in california and texas", "source": "place that is contained by california or texas", "target": "(call listValue (call filter (call getProperty (call singleton fb:en.place) (string !type)) (string loc_place_state) (string =) (call concat fb:en.state.california fb:en.state.texas)))", "qid": "geo880_test_44", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat fb:ANON_ENTITY fb:ANON_ENTITY)))"}
{"paraphrased": "what state has the greatest amount of mountains in it", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_407", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state with fewest cities", "source": "state that the least number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_2580", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what states have the greatest number of states bordering them", "source": "state that the most number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_1321", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the most locations in it", "source": "state that the most number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_47", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state has the most cities", "source": "state that the most number of city is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_city_state)) (call getProperty (call singleton fb:en.city) (string !type))))", "qid": "geo880_train_1908", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state have the greatest number of lakes in it", "source": "state that the most number of lake is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_lake_state)) (call getProperty (call singleton fb:en.lake) (string !type))))", "qid": "geo880_train_2274", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which state contains the most mountains", "source": "state that the most number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string max) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_768", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "state bordering fewest states", "source": "state that the least number of state borders", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string next_to_state_state)) (call getProperty (call singleton fb:en.state) (string !type))))", "qid": "geo880_train_605", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the least number of mountains in it", "source": "state that the least number of mountain is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_mountain_state)) (call getProperty (call singleton fb:en.mountain) (string !type))))", "qid": "geo880_train_386", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what state has the fewest places", "source": "state that the least number of place is contained by", "target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:en.state) (string !type)) (string min) (call reverse (string loc_place_state)) (call getProperty (call singleton fb:en.place) (string !type))))", "qid": "geo880_train_931", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton fb:ANON_ENTITY) (ANON_STRING))))"}
