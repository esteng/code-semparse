{"paraphrased": "show me all meetings that end at 10am", "source": "meeting whose end time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_528", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "what meeting starts at 10am", "source": "meeting whose start time is 10am and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_101", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meeting that begin at 10am", "source": "meeting whose start time is 10am and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_121", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings beginning and ending at 10 am", "source": "meeting whose start time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_141", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings beginning at 10 am and all meetings ending at 10 am", "source": "meeting whose end time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_372", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings beginning at 10 am", "source": "meeting whose start time is 10am and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_378", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me the meeting that starts and ends at 10 am", "source": "meeting whose start time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_test_126", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings that end at 10am and start at 10am", "source": "meeting whose end time is 10am and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_426", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings which begin at 10 am and end at 10 am", "source": "meeting whose end time is 10am and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_149", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "which meetings end at 10am", "source": "meeting whose end time is 10am and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_62", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "person who attends weekly standup", "source": "person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup))", "qid": "calendar_train_89", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me who is not at the weekly standup", "source": "person that is not attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string !=) en.meeting.weekly_standup))", "qid": "calendar_train_140", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person is not attending the weekly standup meeting", "source": "person that is not attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string !=) en.meeting.weekly_standup))", "qid": "calendar_train_112", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what location is not the same as weekly standup", "source": "location that is not location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string !=) en.meeting.weekly_standup))", "qid": "calendar_train_452", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is not an attendee of weekly standup", "source": "person that is not attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string !=) en.meeting.weekly_standup))", "qid": "calendar_train_653", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that do not attend the weekly standup meeting", "source": "person that is not attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string !=) en.meeting.weekly_standup))", "qid": "calendar_train_127", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "locations that do not house the weekly standup meeting", "source": "location that is not location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string !=) en.meeting.weekly_standup))", "qid": "calendar_train_68", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "show me all attendees of the weekly standup meeting", "source": "person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup))", "qid": "calendar_test_149", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who attends weekly standup", "source": "person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup))", "qid": "calendar_train_376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "location different from location of weekly standup", "source": "location that is not location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string !=) en.meeting.weekly_standup))", "qid": "calendar_train_500", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what meeting is on jan 2 or earlier", "source": "meeting whose date is at most jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <=) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_654", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "what meetings are scheduled for a date no earlier than jan 2", "source": "meeting whose date is at least jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >=) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_test_86", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "show me all meetings happening on or after january 2nd", "source": "meeting whose date is at least jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >=) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_294", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "meeting before jan 2", "source": "meeting whose date is smaller than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "what meeting was on or before jan 2", "source": "meeting whose date is at most jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <=) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_test_156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "meetings held before january 2", "source": "meeting whose date is smaller than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string <) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_486", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "meetings held later than january 2", "source": "meeting whose date is larger than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_49", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "show me all meetings after january 2nd", "source": "meeting whose date is larger than jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_test_67", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "what meeting has a date no later than jan 2", "source": "meeting whose date is at least jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >=) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_625", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "meetings held on or after january 2", "source": "meeting whose date is at least jan 2", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string date)) (string >=) (call ensureNumericEntity (date 2015 1 2))))", "qid": "calendar_train_407", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2015 1 2))))"}
{"paraphrased": "show me important meetings on jan 2", "source": "meeting whose date is jan 2 and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)) (string is_important)))", "qid": "calendar_train_287", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "show me all important meetings on jan 2", "source": "meeting whose date is jan 2 and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (date 2015 1 2)) (string is_important)))", "qid": "calendar_test_65", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)) (ANON_STRING)))"}
{"paraphrased": "show me all meetings attended by either alice or bob", "source": "meeting whose attendee is alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call concat en.person.alice en.person.bob)))", "qid": "calendar_train_116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me any meetings located at greenberg cafe or central office", "source": "meeting whose location is greenberg cafe or central office", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call concat en.location.greenberg_cafe en.location.central_office)))", "qid": "calendar_train_246", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me all meetings in greenberg cafe or central office", "source": "meeting whose location is greenberg cafe or central office", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call concat en.location.greenberg_cafe en.location.central_office)))", "qid": "calendar_train_260", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "meeting in greenberg cafe or central office", "source": "meeting whose location is greenberg cafe or central office", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call concat en.location.greenberg_cafe en.location.central_office)))", "qid": "calendar_train_606", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what meeting is in either greenberg cage or central office", "source": "meeting whose location is greenberg cafe or central office", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call concat en.location.greenberg_cafe en.location.central_office)))", "qid": "calendar_test_89", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me meetings with alice or bob", "source": "meeting whose attendee is alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call concat en.person.alice en.person.bob)))", "qid": "calendar_train_665", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me all meetings with either bob or alice attending", "source": "meeting whose attendee is alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call concat en.person.alice en.person.bob)))", "qid": "calendar_train_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "meetings attended by alice or bob", "source": "meeting whose attendee is alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call concat en.person.alice en.person.bob)))", "qid": "calendar_train_579", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "meetings held at greenberg cafe or central office", "source": "meeting whose location is greenberg cafe or central office", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call concat en.location.greenberg_cafe en.location.central_office)))", "qid": "calendar_train_285", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "alice or bob is an attendee at the meeting", "source": "meeting whose attendee is alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call concat en.person.alice en.person.bob)))", "qid": "calendar_test_132", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "is this meeting on january 2 or january 3", "source": "jan 2 or jan 3", "target": "(call listValue (call concat (date 2015 1 2) (date 2015 1 3)))", "qid": "calendar_train_356", "anonymized_target": "(call listValue (call concat (date 2015 1 2) (date 2015 1 3)))"}
{"paraphrased": "find all meetings which begin on january 2nd or january 3rd", "source": "jan 2 or jan 3", "target": "(call listValue (call concat (date 2015 1 2) (date 2015 1 3)))", "qid": "calendar_train_36", "anonymized_target": "(call listValue (call concat (date 2015 1 2) (date 2015 1 3)))"}
{"paraphrased": "january 2nd or 3rd", "source": "jan 2 or jan 3", "target": "(call listValue (call concat (date 2015 1 2) (date 2015 1 3)))", "qid": "calendar_train_326", "anonymized_target": "(call listValue (call concat (date 2015 1 2) (date 2015 1 3)))"}
{"paraphrased": "meetings that start before 10am or before 3pm", "source": "meeting whose start time is smaller than 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string start_time)) (string <) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_train_8", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "what meeting ends 10am or later", "source": "meeting whose end time is at least 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string end_time)) (string >=) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_train_533", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "what meeting ends no later than 10am or 3pm", "source": "meeting whose end time is at most 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string end_time)) (string <=) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_train_473", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "tell me the all meetings begins after 10am or 3pm", "source": "meeting whose start time is at least 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string start_time)) (string >=) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_test_98", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "show me all meetings which begin earlier than 10 am or 3 pm", "source": "meeting whose start time is smaller than 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string start_time)) (string <) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_train_409", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "show me all meetings happening later than 10 am or 3 pm", "source": "meeting whose start time is larger than 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string start_time)) (string >) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_train_444", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "show me meetings starting before 3pm", "source": "meeting whose start time is at most 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string start_time)) (string <=) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_train_272", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "what meeting starts earlier than 10am or 3pm", "source": "meeting whose start time is smaller than 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string start_time)) (string <) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_test_96", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "show me meetings starting at 10am or 3pm", "source": "meeting whose start time is at least 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string start_time)) (string >=) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_train_188", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "meetings that end at or after 10 am or at or after 3pm", "source": "meeting whose end time is at least 10am or 3pm", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (call ensureNumericProperty (string end_time)) (string >=) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))", "qid": "calendar_train_557", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (time 10 0) (time 15 0)))))"}
{"paraphrased": "meetings attended by alice that are three hours long", "source": "meeting whose attendee is alice and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_657", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what three hour meeting is at greenberg cafe", "source": "meeting whose location is greenberg cafe and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_test_148", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which meetings in greenberg cafe will last three hours", "source": "meeting whose location is greenberg cafe and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_508", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what three hour meeting has alice attending", "source": "meeting whose attendee is alice and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_145", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "three hour meeting with alice as attendee", "source": "meeting whose attendee is alice and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_181", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "three hour long meeting at greenberg", "source": "meeting whose location is greenberg cafe and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_321", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "show me all three hour meetings that alice is attending", "source": "meeting whose attendee is alice and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_test_167", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "show me all meetings three hours long happening at the greenberg cafe", "source": "meeting whose location is greenberg cafe and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) en.location.greenberg_cafe) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_451", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "show me all meetings attended by alice which are three hours long", "source": "meeting whose attendee is alice and whose length is three hours", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) en.person.alice) (string length) (string =) (number 3 en.hour)))", "qid": "calendar_train_585", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "person is attendee of weekly standup or annual review", "source": "person that is attendee of weekly standup or annual review", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call concat en.meeting.weekly_standup en.meeting.annual_review)))", "qid": "calendar_train_206", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "who is at the weekly standup or annual review", "source": "person that is attendee of weekly standup or annual review", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call concat en.meeting.weekly_standup en.meeting.annual_review)))", "qid": "calendar_train_61", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "locations of the weekly standup meeting or annual review meeting", "source": "location that is location of weekly standup or annual review", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call concat en.meeting.weekly_standup en.meeting.annual_review)))", "qid": "calendar_train_656", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people that attend the weekly standup meeting or the annual review meeting", "source": "person that is attendee of weekly standup or annual review", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call concat en.meeting.weekly_standup en.meeting.annual_review)))", "qid": "calendar_test_22", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me all people attending either the weekly standup meeting or annual review", "source": "person that is attendee of weekly standup or annual review", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) (call concat en.meeting.weekly_standup en.meeting.annual_review)))", "qid": "calendar_train_445", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "location same as weekly meeting or annual review", "source": "location that is location of weekly standup or annual review", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call concat en.meeting.weekly_standup en.meeting.annual_review)))", "qid": "calendar_test_77", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what location is weekly standup and annual review", "source": "location that is location of weekly standup or annual review", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call concat en.meeting.weekly_standup en.meeting.annual_review)))", "qid": "calendar_train_525", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "show me where the weekly standup and annual review is happening", "source": "location that is location of weekly standup or annual review", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call concat en.meeting.weekly_standup en.meeting.annual_review)))", "qid": "calendar_train_536", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "where will weekly standup and annual review take place", "source": "location that is location of weekly standup or annual review", "target": "(call listValue (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) (call concat en.meeting.weekly_standup en.meeting.annual_review)))", "qid": "calendar_train_495", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what meeting does not start at 10am", "source": "meeting whose start time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string !=) (time 10 0)))", "qid": "calendar_train_619", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me any meetings which end at 10 am", "source": "meeting whose end time is 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "which meetings are scheduled to end at 10am", "source": "meeting whose end time is 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_456", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings not beginning at 10 am", "source": "meeting whose start time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string !=) (time 10 0)))", "qid": "calendar_train_19", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meeting does not start at 10am", "source": "meeting whose start time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string !=) (time 10 0)))", "qid": "calendar_train_212", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings that begin at 10am", "source": "meeting whose start time is 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_test_52", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meetings that do not end at 10am", "source": "meeting whose end time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string !=) (time 10 0)))", "qid": "calendar_train_125", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meetings that end at 10am", "source": "meeting whose end time is 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_74", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings not ending at 10 am", "source": "meeting whose end time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string !=) (time 10 0)))", "qid": "calendar_train_5", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meeting that does not end at 10am", "source": "meeting whose end time is not 10am", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string !=) (time 10 0)))", "qid": "calendar_train_529", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings attended by people who have also attended the weekly standup", "source": "meeting whose attendee is person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_275", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "meetings held in the same place as the weekly standup meeting", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_542", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me all meetings that share an attendee with the weekly standup meeting", "source": "meeting whose attendee is person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "meetings that are attended by people that also attend the weekly standup meeting", "source": "meeting whose attendee is person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me meetings that share location with the weekly standup meeting", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_338", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "meeting shares attendee with weekly standup", "source": "meeting whose attendee is person that is attendee of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string attendee) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string attendee)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_123", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "meeting whose location is same as the  location of weekly standup", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_651", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what meeting has the same location as weekly standup", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_95", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "show me all meetings happening at the same location as the weekly standup", "source": "meeting whose location is location that is location of weekly standup", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string location) (string =) (call filter (call getProperty (call singleton en.location) (string !type)) (call reverse (string location)) (string =) en.meeting.weekly_standup)))", "qid": "calendar_train_408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "three hours long important meeting", "source": "meeting whose length is three hours and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string is_important)))", "qid": "calendar_train_197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what important meeting has a length of three hours", "source": "meeting whose length is three hours and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string is_important)))", "qid": "calendar_train_313", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "show me all three hour meetings that are important", "source": "meeting whose length is three hours and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string is_important)))", "qid": "calendar_train_583", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "show me all meetings three hours long which are marked as important", "source": "meeting whose length is three hours and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string is_important)))", "qid": "calendar_train_269", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "important meetings that are three hours long", "source": "meeting whose length is three hours and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string is_important)))", "qid": "calendar_train_283", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what meeting is on jan 2 or 3rd", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_train_560", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "meeting which is on jan 2 or jan 3", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_train_64", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "show me all meetings happening on january 2nd or january 3rd", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_train_649", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "show me all metings that take place jan 2 or jan 3", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_train_419", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "meetings on january 2 or january 3", "source": "meeting whose date is jan 2 or jan 3", "target": "(call listValue (call filter (call getProperty (call singleton en.meeting) (string !type)) (string date) (string =) (call concat (date 2015 1 2) (date 2015 1 3))))", "qid": "calendar_test_130", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2015 1 2) (date 2015 1 3))))"}
{"paraphrased": "schedule a meeting for 10am or 3pm", "source": "10am or 3pm", "target": "(call listValue (call concat (time 10 0) (time 15 0)))", "qid": "calendar_train_351", "anonymized_target": "(call listValue (call concat (time 10 0) (time 15 0)))"}
{"paraphrased": "is the meeting at 10am or 3pm", "source": "10am or 3pm", "target": "(call listValue (call concat (time 10 0) (time 15 0)))", "qid": "calendar_train_86", "anonymized_target": "(call listValue (call concat (time 10 0) (time 15 0)))"}
{"paraphrased": "show me all meetings between 10am and 3pm", "source": "10am or 3pm", "target": "(call listValue (call concat (time 10 0) (time 15 0)))", "qid": "calendar_train_229", "anonymized_target": "(call listValue (call concat (time 10 0) (time 15 0)))"}
{"paraphrased": "what is an important meeting", "source": "meeting that is important and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string is_important)))", "qid": "calendar_train_148", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "which meetings are important", "source": "meeting that is important and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string is_important)))", "qid": "calendar_train_574", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "show me all meetings marked important", "source": "meeting that is important and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string is_important)))", "qid": "calendar_train_137", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "show me important meetings", "source": "meeting that is important and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string is_important)))", "qid": "calendar_train_590", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "select all important meetings", "source": "meeting that is important and that is important", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string is_important)) (string is_important)))", "qid": "calendar_train_92", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "show me all three hour meetings that end at 10am", "source": "meeting whose length is three hours and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_371", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all three hour meetings that begin at 10am", "source": "meeting whose length is three hours and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_test_9", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meeting starts at 700 am and ends at 000 am", "source": "meeting whose length is three hours and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_415", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meetings ending at 10 am that are three hours long", "source": "meeting whose length is three hours and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_243", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me meetings that take 3 hours and start at 10am", "source": "meeting whose length is three hours and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_test_131", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "meeting that starts at 10am and ends at 1pm", "source": "meeting whose length is three hours and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_554", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings three hours long which end at 10 am", "source": "meeting whose length is three hours and whose end time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string end_time) (string =) (time 10 0)))", "qid": "calendar_train_520", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "show me all meetings lasting three hours beginning at 10 am", "source": "meeting whose length is three hours and whose start time is 10am", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string length) (string =) (number 3 en.hour)) (string start_time) (string =) (time 10 0)))", "qid": "calendar_train_73", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (time 10 0)))"}
{"paraphrased": "what meeting has an end time of 10am on jan2", "source": "meeting whose end time is 10am and whose date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "qid": "calendar_train_470", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what meeting starts at 10am on jan 2", "source": "meeting whose start time is 10am and whose date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "qid": "calendar_train_459", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "show me all meetings that end at 10am on jan 2", "source": "meeting whose end time is 10am and whose date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "qid": "calendar_train_615", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "show me all meetings on january 2nd which end at 10 am", "source": "meeting whose end time is 10am and whose date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "qid": "calendar_train_195", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "show me all meetings that start at 10am on jan 2", "source": "meeting whose start time is 10am and whose date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "qid": "calendar_train_421", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "meeting on january 2nd at 10am", "source": "meeting whose start time is 10am and whose date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "qid": "calendar_train_129", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what meetings on january 2 end at 10am", "source": "meeting whose end time is 10am and whose date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "qid": "calendar_train_162", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "what meeting ends at 10am on january second", "source": "meeting whose end time is 10am and whose date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string end_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "qid": "calendar_train_126", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "show me any meetings on january 2 beginning at 10 am", "source": "meeting whose start time is 10am and whose date is jan 2", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.meeting) (string !type)) (string start_time) (string =) (time 10 0)) (string date) (string =) (date 2015 1 2)))", "qid": "calendar_train_404", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (time 10 0)) (ANON_STRING) (ANON_STRING) (date 2015 1 2)))"}
{"paraphrased": "which meeting has the fewest scheduled locations", "source": "meeting that has the least number of location", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string location)))", "qid": "calendar_train_344", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which meeting has the fewest attendees", "source": "meeting that has the least number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string attendee)))", "qid": "calendar_test_45", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which meeting is attended by the most people", "source": "meeting that has the most number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string max) (string attendee)))", "qid": "calendar_train_299", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "show me meetings with the most locations", "source": "meeting that has the most number of location", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string max) (string location)))", "qid": "calendar_train_592", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what meeting has the fewest locations", "source": "meeting that has the least number of location", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string location)))", "qid": "calendar_test_81", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what meeting had the fewest people show up", "source": "meeting that has the least number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string attendee)))", "qid": "calendar_train_23", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "meetings attended by the smallest number of people", "source": "meeting that has the least number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string min) (string attendee)))", "qid": "calendar_train_484", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what meeting has the most amount of locations", "source": "meeting that has the most number of location", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string max) (string location)))", "qid": "calendar_train_429", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which meeting has the most people scheduled to attend", "source": "meeting that has the most number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string max) (string attendee)))", "qid": "calendar_test_128", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "meeting with largest number of attendees", "source": "meeting that has the most number of attendee", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.meeting) (string !type)) (string max) (string attendee)))", "qid": "calendar_train_611", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
