{"paraphrased": "special block right of block 1", "source": "block that is right of block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "qid": "blocks_test_369", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which special brick is pyramidshaped", "source": "block whose shape is a pyramid and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "qid": "blocks_train_100", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "block whose shape is a pyramid and that is special", "source": "block whose shape is a pyramid and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "qid": "blocks_train_1246", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "block lft of special block 1", "source": "block that is left of block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (string is_special)))", "qid": "blocks_test_84", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "select a special pyramid block", "source": "block whose shape is a pyramid and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (string is_special)))", "qid": "blocks_train_941", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "a special block below block 1", "source": "block that is below block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string is_special)))", "qid": "blocks_test_355", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "select all special blocks above block 1", "source": "block that is above block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1073", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "special block to right of block 1", "source": "block that is right of block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_348", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "choose the block below the special looking block 1", "source": "block that is below block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1547", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find the special block with block 1 below it", "source": "block that is above block 1 and that is special", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (string is_special)))", "qid": "blocks_train_1048", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what block is special and is to the left of block 1", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_282", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is special and has block 1 on its right", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1031", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is special and left of block 1", "source": "block that is special and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_275", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a special block below block 1", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_230", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "special block left of block 1", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_23", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what blocks are special and are below block 1", "source": "block that is special and that block 1 is above", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string above)) (string =) en.block.block1))", "qid": "blocks_train_134", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that are below block 1", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_645", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the special block in the left of block 1", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_882", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all special blocks that are to the right of block 1", "source": "block that is special and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_96", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find a special block above block 1 ", "source": "block that is special and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_test_206", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that has the least number of color", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_train_505", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "block that has the most number of color", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_test_130", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what block has the fewest shapes", "source": "block that has the least number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string shape)))", "qid": "blocks_train_1196", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "select the least colorful brick", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_train_1147", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which brick has the most colors", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_train_257", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find me the most colorful block", "source": "block that has the most number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string color)))", "qid": "blocks_test_52", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which brick has the least number of colors", "source": "block that has the least number of color", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string min) (string color)))", "qid": "blocks_test_90", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "block that has the most number of shape", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_1068", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find the block with the most shapes", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_812", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which brick has the most shapes", "source": "block that has the most number of shape", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.block) (string !type)) (string max) (string shape)))", "qid": "blocks_train_1057", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "find me all blocks with 2 shapes", "source": "block that has two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (number 2)))", "qid": "blocks_train_1480", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks with 2 colors", "source": "block that has two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (number 2)))", "qid": "blocks_train_879", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block with two colors", "source": "block that has two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (number 2)))", "qid": "blocks_train_1027", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what block has two or more shapes", "source": "block that has at least two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string >=) (number 2)))", "qid": "blocks_train_1533", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "select blocks that are two colors", "source": "block that has two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string =) (number 2)))", "qid": "blocks_train_1036", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that has at most two shape", "source": "block that has at most two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string <=) (number 2)))", "qid": "blocks_train_677", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which brick has no more than 2 colors", "source": "block that has at most two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "qid": "blocks_train_488", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks with at most 2 colors", "source": "block that has at most two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <=) (number 2)))", "qid": "blocks_train_80", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all blocks with less than 2 colors", "source": "block that has less than two color", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string color) (string <) (number 2)))", "qid": "blocks_train_669", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the blocks that have two shapes or less", "source": "block that has at most two shape", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (string shape) (string <=) (number 2)))", "qid": "blocks_train_746", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "second left of block 1", "source": "block that is left of block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_train_686", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block below block right of block 1", "source": "block that is below block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_1291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the block that is right and below block 1", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_496", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me a block that block 1 is to the left of", "source": "block that is right of block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is below the block which block 1 is above", "source": "block that is below block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the block that is above the block that is below block 1", "source": "block that is above block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of the block that block 1 is below", "source": "block that is right of block that block 1 is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) en.block.block1)))", "qid": "blocks_train_1564", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what block is below the block that block 1 is to the right of", "source": "block that is below block that block 1 is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) en.block.block1)))", "qid": "blocks_test_18", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all blocks right of that block 1 is above", "source": "block that is right of block that block 1 is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) en.block.block1)))", "qid": "blocks_train_209", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "block up and left from block 1", "source": "block that is above block that block 1 is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) en.block.block1)))", "qid": "blocks_train_678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all the blocks that has at least 2 blocks to the left", "source": "block that at least two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_551", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block that is is left of block two", "source": "block that at least two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_584", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block with two or less blocks to the left", "source": "block that at most two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_430", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block has less than two blocks to its right", "source": "block that less than two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1473", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me a block above at least two blocks", "source": "block that at least two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string >=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_173", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the block with more than two blocks above it", "source": "block that more than two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1558", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find a block with two or less blocks to the right of it", "source": "block that at most two block is right of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1447", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which block has two blocks above it", "source": "block that two block is above", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1373", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "block that at most two block is below", "source": "block that at most two block is below", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string <=) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_1422", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what block is to the right of more than two blocks", "source": "block that more than two block is left of", "target": "(call listValue (call countComparative (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string >) (number 2) (call getProperty (call singleton en.block) (string !type))))", "qid": "blocks_train_484", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "choose a block between 3 or 6 inches", "source": "3 inches or 6 inches", "target": "(call listValue (call concat (number 3 en.inch) (number 6 en.inch)))", "qid": "blocks_train_839", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "is there a block with a measurement of 3 inches or 6 inches", "source": "3 inches or 6 inches", "target": "(call listValue (call concat (number 3 en.inch) (number 6 en.inch)))", "qid": "blocks_train_342", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "what brick is at least 3 or 6 inches", "source": "3 inches or 6 inches", "target": "(call listValue (call concat (number 3 en.inch) (number 6 en.inch)))", "qid": "blocks_train_406", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "select the block that is on the left side of the block that is 3 inches in length", "source": "block that block whose length is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_742", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block left from 3 inch block", "source": "block that block whose width is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_947", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block above 3 inch block", "source": "block that block whose length is 3 inches is below", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string below)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_620", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "block left of 3 inch block", "source": "block that block whose width is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_test_132", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find a block to the right of a block 3 in height", "source": "block that block whose height is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_29", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me the block that has a height of 3 inches", "source": "block that block whose height is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_370", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks left of 3 inch wide blocks", "source": "block that block whose width is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_949", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks right of 3 inch tall blocks", "source": "block that block whose height is 3 inches is right of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string right)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string height) (string =) (number 3 en.inch))))", "qid": "blocks_train_154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "above block at least 3 inches long", "source": "block that block whose length is 3 inches is above", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string above)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string length) (string =) (number 3 en.inch))))", "qid": "blocks_train_295", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "select the block whose width is 3 inches", "source": "block that block whose width is 3 inches is left of", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call reverse (string left)) (string =) (call filter (call getProperty (call singleton en.block) (string !type)) (string width) (string =) (number 3 en.inch))))", "qid": "blocks_train_1087", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "choose the brick shaped like a pyramid or a cube", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_745", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "block that is left of block 1 or block 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1572", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "choose a block that is shape like a cube or pyramid", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_676", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me a block to the right of either block 1 or block 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_76", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "is there a block to the right of either block 1 or block 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1257", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me a pyramid or cube shaped block", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_1148", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find the block that is shaped like a pyramid or a cube", "source": "block whose shape is a pyramid or a cube", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) (call concat en.shape.pyramid en.shape.cube)))", "qid": "blocks_train_652", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find me all blocks left of block 1 or 2", "source": "block that is left of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_512", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "choose a block that is above block 1 or 2", "source": "block that is above block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_test_129", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which brick is to the right of brick 1 or 2", "source": "block that is right of block 1 or block 2", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) (call concat en.block.block1 en.block.block2)))", "qid": "blocks_train_1524", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what block is less than 3 inches wide", "source": "block whose width is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find the block with a height less than 3 inches", "source": "block whose height is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1133", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks longer than 3 inches", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_32", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me a block wider than 3 inches", "source": "block whose width is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is no wider than 3 inches", "source": "block whose width is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is 3 inches or less long", "source": "block whose length is at most 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_404", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "block whose height is larger than 3 inches", "source": "block whose height is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_952", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what block is less than 3 inches long", "source": "block whose length is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks with length less than 3 inches", "source": "block whose length is smaller than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which brick is longer than 3 inches", "source": "block whose length is larger than 3 inches", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >) (call ensureNumericEntity (number 3 en.inch))))", "qid": "blocks_train_1586", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find me all blocks shorter than block 1", "source": "block whose height is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_909", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block is taller than block 1", "source": "block whose height is larger than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_206", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is no longer than brick 1 is high", "source": "block whose length is at most height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_test_157", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what blocks length is smaller than block 1s width", "source": "block whose length is smaller than width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find a block with a width that is less than the height of block 1", "source": "block whose width is smaller than height of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string <) (call ensureNumericEntity (call getProperty en.block.block1 (string height)))))", "qid": "blocks_train_19", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find me all blocks as high as block 1 is long", "source": "block whose height is at most length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block more wider than length of block 1", "source": "block whose width is larger than length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_98", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which brick is at least as long as brick 1", "source": "block whose length is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_test_200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "block whose width is at least the length of block 1", "source": "block whose width is at least length of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string width)) (string >=) (call ensureNumericEntity (call getProperty en.block.block1 (string length)))))", "qid": "blocks_train_462", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what block has less than or equal length then block 1 has width", "source": "block whose length is at most width of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (call ensureNumericProperty (string length)) (string <=) (call ensureNumericEntity (call getProperty en.block.block1 (string width)))))", "qid": "blocks_train_1343", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "select the 3 inch wide special block", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_792", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all special 3 inch long blocks", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_938", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which one is a 3 inch special block", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_510", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "is  there a special block with a height that is only 3 inches", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_1536", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all special blocks with length less than 3 inches", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_test_188", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all the special blocks that are 3 inches long", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_1488", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all 3 inch high special blocks", "source": "block that is special and whose height is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string height) (string =) (number 3 en.inch)))", "qid": "blocks_train_392", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "block that is special and whose length is 3 inches", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_542", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me a 3 inch long special block", "source": "block that is special and whose length is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string length) (string =) (number 3 en.inch)))", "qid": "blocks_train_454", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which special block is 3 inches wide", "source": "block that is special and whose width is 3 inches", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string is_special)) (string width) (string =) (number 3 en.inch)))", "qid": "blocks_train_1548", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me all pyramid blocks which block 1 is right of", "source": "block whose shape is a pyramid and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_478", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "left of block 1", "source": "block that is left of block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_546", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is to the left of the block that block 1 is to the right of", "source": "block that is left of block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_98", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the block that is to the left of block 1", "source": "block that is left of block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_147", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block has block 1 at its left and right", "source": "block that is right of block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_1544", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block above and rigth from block 1", "source": "block that is right of block 1 and that block 1 is below", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string below)) (string =) en.block.block1))", "qid": "blocks_train_296", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the block that is to the left and above block 1", "source": "block that is above block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_test_77", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "pyramid block to left of block 1", "source": "block whose shape is a pyramid and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_test_12", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all blocks right of block 1", "source": "block that is right of block 1 and that block 1 is right of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1) (call reverse (string right)) (string =) en.block.block1))", "qid": "blocks_train_738", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what block is above and to the left of block 1 ", "source": "block that is above block 1 and that block 1 is left of", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string =) en.block.block1) (call reverse (string left)) (string =) en.block.block1))", "qid": "blocks_train_267", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me any pyramidshaped block", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_55", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the block that block 1 is not below it", "source": "block that not is above block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string above) (string !=) en.block.block1))", "qid": "blocks_train_1589", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which brick is to the left of brick 1", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_635", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is left of block 1", "source": "block that is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string =) en.block.block1))", "qid": "blocks_train_1138", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select the blocks below block 1", "source": "block that is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string =) en.block.block1))", "qid": "blocks_train_828", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "select all pyramid blocks", "source": "block whose shape is a pyramid", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string shape) (string =) en.shape.pyramid))", "qid": "blocks_train_814", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is there a block located to the left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_train_250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "block that not is left of block 1", "source": "block that not is left of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string left) (string !=) en.block.block1))", "qid": "blocks_test_227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "choose a block that is right of block 1", "source": "block that is right of block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string right) (string =) en.block.block1))", "qid": "blocks_test_35", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all the blocks not below block 1", "source": "block that not is below block 1", "target": "(call listValue (call filter (call getProperty (call singleton en.block) (string !type)) (string below) (string !=) en.block.block1))", "qid": "blocks_train_135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
